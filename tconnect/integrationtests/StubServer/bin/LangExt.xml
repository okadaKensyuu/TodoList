<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LangExt</name>
    </assembly>
    <members>
        <member name="T:LangExt.Apply">
            <summary>
            任意のモナドに対して関数を適用できる形式（Applicative）に変換する機能を提供するクラスです。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``1(LangExt.Option{``0})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``2(LangExt.Option{``0},LangExt.Option{``1})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``3(LangExt.Option{``0},LangExt.Option{``1},LangExt.Option{``2})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``4(LangExt.Option{``0},LangExt.Option{``1},LangExt.Option{``2},LangExt.Option{``3})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``5(LangExt.Option{``0},LangExt.Option{``1},LangExt.Option{``2},LangExt.Option{``3},LangExt.Option{``4})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``6(LangExt.Option{``0},LangExt.Option{``1},LangExt.Option{``2},LangExt.Option{``3},LangExt.Option{``4},LangExt.Option{``5})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``7(LangExt.Option{``0},LangExt.Option{``1},LangExt.Option{``2},LangExt.Option{``3},LangExt.Option{``4},LangExt.Option{``5},LangExt.Option{``6})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``8(LangExt.Option{``0},LangExt.Option{``1},LangExt.Option{``2},LangExt.Option{``3},LangExt.Option{``4},LangExt.Option{``5},LangExt.Option{``6},LangExt.Option{``7})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``9(LangExt.Option{``0},LangExt.Option{``1},LangExt.Option{``2},LangExt.Option{``3},LangExt.Option{``4},LangExt.Option{``5},LangExt.Option{``6},LangExt.Option{``7},LangExt.Option{``8})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``10(LangExt.Option{``0},LangExt.Option{``1},LangExt.Option{``2},LangExt.Option{``3},LangExt.Option{``4},LangExt.Option{``5},LangExt.Option{``6},LangExt.Option{``7},LangExt.Option{``8},LangExt.Option{``9})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``11(LangExt.Option{``0},LangExt.Option{``1},LangExt.Option{``2},LangExt.Option{``3},LangExt.Option{``4},LangExt.Option{``5},LangExt.Option{``6},LangExt.Option{``7},LangExt.Option{``8},LangExt.Option{``9},LangExt.Option{``10})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``12(LangExt.Option{``0},LangExt.Option{``1},LangExt.Option{``2},LangExt.Option{``3},LangExt.Option{``4},LangExt.Option{``5},LangExt.Option{``6},LangExt.Option{``7},LangExt.Option{``8},LangExt.Option{``9},LangExt.Option{``10},LangExt.Option{``11})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``13(LangExt.Option{``0},LangExt.Option{``1},LangExt.Option{``2},LangExt.Option{``3},LangExt.Option{``4},LangExt.Option{``5},LangExt.Option{``6},LangExt.Option{``7},LangExt.Option{``8},LangExt.Option{``9},LangExt.Option{``10},LangExt.Option{``11},LangExt.Option{``12})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``14(LangExt.Option{``0},LangExt.Option{``1},LangExt.Option{``2},LangExt.Option{``3},LangExt.Option{``4},LangExt.Option{``5},LangExt.Option{``6},LangExt.Option{``7},LangExt.Option{``8},LangExt.Option{``9},LangExt.Option{``10},LangExt.Option{``11},LangExt.Option{``12},LangExt.Option{``13})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``15(LangExt.Option{``0},LangExt.Option{``1},LangExt.Option{``2},LangExt.Option{``3},LangExt.Option{``4},LangExt.Option{``5},LangExt.Option{``6},LangExt.Option{``7},LangExt.Option{``8},LangExt.Option{``9},LangExt.Option{``10},LangExt.Option{``11},LangExt.Option{``12},LangExt.Option{``13},LangExt.Option{``14})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``16(LangExt.Option{``0},LangExt.Option{``1},LangExt.Option{``2},LangExt.Option{``3},LangExt.Option{``4},LangExt.Option{``5},LangExt.Option{``6},LangExt.Option{``7},LangExt.Option{``8},LangExt.Option{``9},LangExt.Option{``10},LangExt.Option{``11},LangExt.Option{``12},LangExt.Option{``13},LangExt.Option{``14},LangExt.Option{``15})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``2(LangExt.Result{``0,``1})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``3(LangExt.Result{``0,``2},LangExt.Result{``1,``2})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``4(LangExt.Result{``0,``3},LangExt.Result{``1,``3},LangExt.Result{``2,``3})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``5(LangExt.Result{``0,``4},LangExt.Result{``1,``4},LangExt.Result{``2,``4},LangExt.Result{``3,``4})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``6(LangExt.Result{``0,``5},LangExt.Result{``1,``5},LangExt.Result{``2,``5},LangExt.Result{``3,``5},LangExt.Result{``4,``5})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``7(LangExt.Result{``0,``6},LangExt.Result{``1,``6},LangExt.Result{``2,``6},LangExt.Result{``3,``6},LangExt.Result{``4,``6},LangExt.Result{``5,``6})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``8(LangExt.Result{``0,``7},LangExt.Result{``1,``7},LangExt.Result{``2,``7},LangExt.Result{``3,``7},LangExt.Result{``4,``7},LangExt.Result{``5,``7},LangExt.Result{``6,``7})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``9(LangExt.Result{``0,``8},LangExt.Result{``1,``8},LangExt.Result{``2,``8},LangExt.Result{``3,``8},LangExt.Result{``4,``8},LangExt.Result{``5,``8},LangExt.Result{``6,``8},LangExt.Result{``7,``8})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``10(LangExt.Result{``0,``9},LangExt.Result{``1,``9},LangExt.Result{``2,``9},LangExt.Result{``3,``9},LangExt.Result{``4,``9},LangExt.Result{``5,``9},LangExt.Result{``6,``9},LangExt.Result{``7,``9},LangExt.Result{``8,``9})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``11(LangExt.Result{``0,``10},LangExt.Result{``1,``10},LangExt.Result{``2,``10},LangExt.Result{``3,``10},LangExt.Result{``4,``10},LangExt.Result{``5,``10},LangExt.Result{``6,``10},LangExt.Result{``7,``10},LangExt.Result{``8,``10},LangExt.Result{``9,``10})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``12(LangExt.Result{``0,``11},LangExt.Result{``1,``11},LangExt.Result{``2,``11},LangExt.Result{``3,``11},LangExt.Result{``4,``11},LangExt.Result{``5,``11},LangExt.Result{``6,``11},LangExt.Result{``7,``11},LangExt.Result{``8,``11},LangExt.Result{``9,``11},LangExt.Result{``10,``11})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``13(LangExt.Result{``0,``12},LangExt.Result{``1,``12},LangExt.Result{``2,``12},LangExt.Result{``3,``12},LangExt.Result{``4,``12},LangExt.Result{``5,``12},LangExt.Result{``6,``12},LangExt.Result{``7,``12},LangExt.Result{``8,``12},LangExt.Result{``9,``12},LangExt.Result{``10,``12},LangExt.Result{``11,``12})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``14(LangExt.Result{``0,``13},LangExt.Result{``1,``13},LangExt.Result{``2,``13},LangExt.Result{``3,``13},LangExt.Result{``4,``13},LangExt.Result{``5,``13},LangExt.Result{``6,``13},LangExt.Result{``7,``13},LangExt.Result{``8,``13},LangExt.Result{``9,``13},LangExt.Result{``10,``13},LangExt.Result{``11,``13},LangExt.Result{``12,``13})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``15(LangExt.Result{``0,``14},LangExt.Result{``1,``14},LangExt.Result{``2,``14},LangExt.Result{``3,``14},LangExt.Result{``4,``14},LangExt.Result{``5,``14},LangExt.Result{``6,``14},LangExt.Result{``7,``14},LangExt.Result{``8,``14},LangExt.Result{``9,``14},LangExt.Result{``10,``14},LangExt.Result{``11,``14},LangExt.Result{``12,``14},LangExt.Result{``13,``14})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``16(LangExt.Result{``0,``15},LangExt.Result{``1,``15},LangExt.Result{``2,``15},LangExt.Result{``3,``15},LangExt.Result{``4,``15},LangExt.Result{``5,``15},LangExt.Result{``6,``15},LangExt.Result{``7,``15},LangExt.Result{``8,``15},LangExt.Result{``9,``15},LangExt.Result{``10,``15},LangExt.Result{``11,``15},LangExt.Result{``12,``15},LangExt.Result{``13,``15},LangExt.Result{``14,``15})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``17(LangExt.Result{``0,``16},LangExt.Result{``1,``16},LangExt.Result{``2,``16},LangExt.Result{``3,``16},LangExt.Result{``4,``16},LangExt.Result{``5,``16},LangExt.Result{``6,``16},LangExt.Result{``7,``16},LangExt.Result{``8,``16},LangExt.Result{``9,``16},LangExt.Result{``10,``16},LangExt.Result{``11,``16},LangExt.Result{``12,``16},LangExt.Result{``13,``16},LangExt.Result{``14,``16},LangExt.Result{``15,``16})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``1(LangExt.ISeq{``0})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``2(LangExt.ISeq{``0},LangExt.ISeq{``1})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``3(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``4(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``5(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``6(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``7(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``8(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``9(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``10(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``11(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``12(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``13(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``14(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12},LangExt.ISeq{``13})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``15(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12},LangExt.ISeq{``13},LangExt.ISeq{``14})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="M:LangExt.Apply.To``16(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12},LangExt.ISeq{``13},LangExt.ISeq{``14},LangExt.ISeq{``15})">
            <summary>
            指定された複数のモナドを適用可能（Applicative）にします。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeOption`1">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeOption`2">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeOption`3">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeOption`4">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeOption`5">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeOption`6">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeOption`7">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeOption`8">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeOption`9">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeOption`10">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeOption`11">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeOption`12">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeOption`13">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeOption`14">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeOption`15">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeOption`16">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeResult`2">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="M:LangExt.Apply.ApplicativeResult`2.By``1(System.Func{`0,``0})">
            <summary>
            指定された関数をこのモナドに適用します。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeResult`3">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="M:LangExt.Apply.ApplicativeResult`3.By``1(System.Func{`0,`1,``0})">
            <summary>
            指定された関数をこのモナドに適用します。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeResult`4">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="M:LangExt.Apply.ApplicativeResult`4.By``1(System.Func{`0,`1,`2,``0})">
            <summary>
            指定された関数をこのモナドに適用します。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeResult`5">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="M:LangExt.Apply.ApplicativeResult`5.By``1(System.Func{`0,`1,`2,`3,``0})">
            <summary>
            指定された関数をこのモナドに適用します。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeResult`6">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="M:LangExt.Apply.ApplicativeResult`6.By``1(System.Func{`0,`1,`2,`3,`4,``0})">
            <summary>
            指定された関数をこのモナドに適用します。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeResult`7">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="M:LangExt.Apply.ApplicativeResult`7.By``1(System.Func{`0,`1,`2,`3,`4,`5,``0})">
            <summary>
            指定された関数をこのモナドに適用します。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeResult`8">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="M:LangExt.Apply.ApplicativeResult`8.By``1(System.Func{`0,`1,`2,`3,`4,`5,`6,``0})">
            <summary>
            指定された関数をこのモナドに適用します。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeResult`9">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="M:LangExt.Apply.ApplicativeResult`9.By``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0})">
            <summary>
            指定された関数をこのモナドに適用します。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeResult`10">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="M:LangExt.Apply.ApplicativeResult`10.By``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0})">
            <summary>
            指定された関数をこのモナドに適用します。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeResult`11">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="M:LangExt.Apply.ApplicativeResult`11.By``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,``0})">
            <summary>
            指定された関数をこのモナドに適用します。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeResult`12">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="M:LangExt.Apply.ApplicativeResult`12.By``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,``0})">
            <summary>
            指定された関数をこのモナドに適用します。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeResult`13">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="M:LangExt.Apply.ApplicativeResult`13.By``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,``0})">
            <summary>
            指定された関数をこのモナドに適用します。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeResult`14">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="M:LangExt.Apply.ApplicativeResult`14.By``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,``0})">
            <summary>
            指定された関数をこのモナドに適用します。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeResult`15">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="M:LangExt.Apply.ApplicativeResult`15.By``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,``0})">
            <summary>
            指定された関数をこのモナドに適用します。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeResult`16">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="M:LangExt.Apply.ApplicativeResult`16.By``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,``0})">
            <summary>
            指定された関数をこのモナドに適用します。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeResult`17">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="M:LangExt.Apply.ApplicativeResult`17.By``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,``0})">
            <summary>
            指定された関数をこのモナドに適用します。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeISeq`1">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeISeq`2">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeISeq`3">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeISeq`4">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeISeq`5">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeISeq`6">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeISeq`7">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeISeq`8">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeISeq`9">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeISeq`10">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeISeq`11">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeISeq`12">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeISeq`13">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeISeq`14">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeISeq`15">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Apply.ApplicativeISeq`16">
            <summary>
            関数を適用できる形式のモナドを表すクラスです。
            </summary>
        </member>
        <member name="T:LangExt.Seq`1">
            <summary>
            要素Tのシーケンスを表すインターフェイスです。
            </summary>
            <typeparam name="T">要素の型</typeparam>
        </member>
        <member name="T:LangExt.ISeq`1">
            <summary>
            要素Tのシーケンスを表すインターフェイスです。
            </summary>
            <typeparam name="T">要素の型</typeparam>
        </member>
        <member name="T:LangExt.Choice`2">
            <summary>
            複数の型のうち、どれか一つを保持する「多者択一」を表す型です。
            成功と失敗を保持したい場合、この型ではなくResult[TSuccess, TFailure]型を使ってください。
            この型は、二つの型の違いにほとんど意味がない場合に使います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`2.#ctor(`0)">
            <summary>
            T1を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`2.#ctor(`1)">
            <summary>
            T2を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`2.Match``1(System.Func{`0,``0},System.Func{`1,``0})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`2.Match(System.Action{`0},System.Action{`1})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`2.Equals(LangExt.Choice{`0,`1})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するChoice</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`2.op_Equality(LangExt.Choice{`0,`1},LangExt.Choice{`0,`1})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`2.op_Inequality(LangExt.Choice{`0,`1},LangExt.Choice{`0,`1})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Choice`2.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`2.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Choice`2.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="P:LangExt.Choice`2.TagIndex">
            <summary>
            何番目の型を保持しているかを取得します。
            </summary>
        </member>
        <member name="T:LangExt.Choice`3">
            <summary>
            複数の型のうち、どれか一つを保持する「多者択一」を表す型です。
            </summary>
        </member>
        <member name="M:LangExt.Choice`3.#ctor(`0)">
            <summary>
            T1を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`3.#ctor(`1)">
            <summary>
            T2を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`3.#ctor(`2)">
            <summary>
            T3を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`3.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`3.Match(System.Action{`0},System.Action{`1},System.Action{`2})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`3.Equals(LangExt.Choice{`0,`1,`2})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するChoice</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`3.op_Equality(LangExt.Choice{`0,`1,`2},LangExt.Choice{`0,`1,`2})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`3.op_Inequality(LangExt.Choice{`0,`1,`2},LangExt.Choice{`0,`1,`2})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Choice`3.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`3.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Choice`3.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="P:LangExt.Choice`3.TagIndex">
            <summary>
            何番目の型を保持しているかを取得します。
            </summary>
        </member>
        <member name="T:LangExt.Choice`4">
            <summary>
            複数の型のうち、どれか一つを保持する「多者択一」を表す型です。
            </summary>
        </member>
        <member name="M:LangExt.Choice`4.#ctor(`0)">
            <summary>
            T1を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`4.#ctor(`1)">
            <summary>
            T2を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`4.#ctor(`2)">
            <summary>
            T3を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`4.#ctor(`3)">
            <summary>
            T4を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`4.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`4.Match(System.Action{`0},System.Action{`1},System.Action{`2},System.Action{`3})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`4.Equals(LangExt.Choice{`0,`1,`2,`3})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するChoice</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`4.op_Equality(LangExt.Choice{`0,`1,`2,`3},LangExt.Choice{`0,`1,`2,`3})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`4.op_Inequality(LangExt.Choice{`0,`1,`2,`3},LangExt.Choice{`0,`1,`2,`3})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Choice`4.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`4.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Choice`4.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="P:LangExt.Choice`4.TagIndex">
            <summary>
            何番目の型を保持しているかを取得します。
            </summary>
        </member>
        <member name="T:LangExt.Choice`5">
            <summary>
            複数の型のうち、どれか一つを保持する「多者択一」を表す型です。
            </summary>
        </member>
        <member name="M:LangExt.Choice`5.#ctor(`0)">
            <summary>
            T1を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`5.#ctor(`1)">
            <summary>
            T2を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`5.#ctor(`2)">
            <summary>
            T3を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`5.#ctor(`3)">
            <summary>
            T4を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`5.#ctor(`4)">
            <summary>
            T5を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`5.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`5.Match(System.Action{`0},System.Action{`1},System.Action{`2},System.Action{`3},System.Action{`4})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`5.Equals(LangExt.Choice{`0,`1,`2,`3,`4})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するChoice</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`5.op_Equality(LangExt.Choice{`0,`1,`2,`3,`4},LangExt.Choice{`0,`1,`2,`3,`4})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`5.op_Inequality(LangExt.Choice{`0,`1,`2,`3,`4},LangExt.Choice{`0,`1,`2,`3,`4})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Choice`5.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`5.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Choice`5.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="P:LangExt.Choice`5.TagIndex">
            <summary>
            何番目の型を保持しているかを取得します。
            </summary>
        </member>
        <member name="T:LangExt.Choice`6">
            <summary>
            複数の型のうち、どれか一つを保持する「多者択一」を表す型です。
            </summary>
        </member>
        <member name="M:LangExt.Choice`6.#ctor(`0)">
            <summary>
            T1を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`6.#ctor(`1)">
            <summary>
            T2を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`6.#ctor(`2)">
            <summary>
            T3を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`6.#ctor(`3)">
            <summary>
            T4を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`6.#ctor(`4)">
            <summary>
            T5を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`6.#ctor(`5)">
            <summary>
            T6を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`6.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0},System.Func{`5,``0})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`6.Match(System.Action{`0},System.Action{`1},System.Action{`2},System.Action{`3},System.Action{`4},System.Action{`5})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`6.Equals(LangExt.Choice{`0,`1,`2,`3,`4,`5})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するChoice</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`6.op_Equality(LangExt.Choice{`0,`1,`2,`3,`4,`5},LangExt.Choice{`0,`1,`2,`3,`4,`5})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`6.op_Inequality(LangExt.Choice{`0,`1,`2,`3,`4,`5},LangExt.Choice{`0,`1,`2,`3,`4,`5})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Choice`6.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`6.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Choice`6.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="P:LangExt.Choice`6.TagIndex">
            <summary>
            何番目の型を保持しているかを取得します。
            </summary>
        </member>
        <member name="T:LangExt.Choice`7">
            <summary>
            複数の型のうち、どれか一つを保持する「多者択一」を表す型です。
            </summary>
        </member>
        <member name="M:LangExt.Choice`7.#ctor(`0)">
            <summary>
            T1を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`7.#ctor(`1)">
            <summary>
            T2を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`7.#ctor(`2)">
            <summary>
            T3を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`7.#ctor(`3)">
            <summary>
            T4を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`7.#ctor(`4)">
            <summary>
            T5を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`7.#ctor(`5)">
            <summary>
            T6を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`7.#ctor(`6)">
            <summary>
            T7を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`7.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0},System.Func{`5,``0},System.Func{`6,``0})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`7.Match(System.Action{`0},System.Action{`1},System.Action{`2},System.Action{`3},System.Action{`4},System.Action{`5},System.Action{`6})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`7.Equals(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するChoice</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`7.op_Equality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`7.op_Inequality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Choice`7.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`7.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Choice`7.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="P:LangExt.Choice`7.TagIndex">
            <summary>
            何番目の型を保持しているかを取得します。
            </summary>
        </member>
        <member name="T:LangExt.Choice`8">
            <summary>
            複数の型のうち、どれか一つを保持する「多者択一」を表す型です。
            </summary>
        </member>
        <member name="M:LangExt.Choice`8.#ctor(`0)">
            <summary>
            T1を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`8.#ctor(`1)">
            <summary>
            T2を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`8.#ctor(`2)">
            <summary>
            T3を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`8.#ctor(`3)">
            <summary>
            T4を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`8.#ctor(`4)">
            <summary>
            T5を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`8.#ctor(`5)">
            <summary>
            T6を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`8.#ctor(`6)">
            <summary>
            T7を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`8.#ctor(`7)">
            <summary>
            T8を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`8.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0},System.Func{`5,``0},System.Func{`6,``0},System.Func{`7,``0})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`8.Match(System.Action{`0},System.Action{`1},System.Action{`2},System.Action{`3},System.Action{`4},System.Action{`5},System.Action{`6},System.Action{`7})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`8.Equals(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するChoice</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`8.op_Equality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`8.op_Inequality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Choice`8.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`8.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Choice`8.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="P:LangExt.Choice`8.TagIndex">
            <summary>
            何番目の型を保持しているかを取得します。
            </summary>
        </member>
        <member name="T:LangExt.Choice`9">
            <summary>
            複数の型のうち、どれか一つを保持する「多者択一」を表す型です。
            </summary>
        </member>
        <member name="M:LangExt.Choice`9.#ctor(`0)">
            <summary>
            T1を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`9.#ctor(`1)">
            <summary>
            T2を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`9.#ctor(`2)">
            <summary>
            T3を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`9.#ctor(`3)">
            <summary>
            T4を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`9.#ctor(`4)">
            <summary>
            T5を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`9.#ctor(`5)">
            <summary>
            T6を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`9.#ctor(`6)">
            <summary>
            T7を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`9.#ctor(`7)">
            <summary>
            T8を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`9.#ctor(`8)">
            <summary>
            T9を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`9.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0},System.Func{`5,``0},System.Func{`6,``0},System.Func{`7,``0},System.Func{`8,``0})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`9.Match(System.Action{`0},System.Action{`1},System.Action{`2},System.Action{`3},System.Action{`4},System.Action{`5},System.Action{`6},System.Action{`7},System.Action{`8})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`9.Equals(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するChoice</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`9.op_Equality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`9.op_Inequality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Choice`9.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`9.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Choice`9.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="P:LangExt.Choice`9.TagIndex">
            <summary>
            何番目の型を保持しているかを取得します。
            </summary>
        </member>
        <member name="T:LangExt.Choice`10">
            <summary>
            複数の型のうち、どれか一つを保持する「多者択一」を表す型です。
            </summary>
        </member>
        <member name="M:LangExt.Choice`10.#ctor(`0)">
            <summary>
            T1を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`10.#ctor(`1)">
            <summary>
            T2を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`10.#ctor(`2)">
            <summary>
            T3を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`10.#ctor(`3)">
            <summary>
            T4を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`10.#ctor(`4)">
            <summary>
            T5を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`10.#ctor(`5)">
            <summary>
            T6を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`10.#ctor(`6)">
            <summary>
            T7を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`10.#ctor(`7)">
            <summary>
            T8を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`10.#ctor(`8)">
            <summary>
            T9を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`10.#ctor(`9)">
            <summary>
            T10を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`10.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0},System.Func{`5,``0},System.Func{`6,``0},System.Func{`7,``0},System.Func{`8,``0},System.Func{`9,``0})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`10.Match(System.Action{`0},System.Action{`1},System.Action{`2},System.Action{`3},System.Action{`4},System.Action{`5},System.Action{`6},System.Action{`7},System.Action{`8},System.Action{`9})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`10.Equals(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するChoice</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`10.op_Equality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`10.op_Inequality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Choice`10.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`10.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Choice`10.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="P:LangExt.Choice`10.TagIndex">
            <summary>
            何番目の型を保持しているかを取得します。
            </summary>
        </member>
        <member name="T:LangExt.Choice`11">
            <summary>
            複数の型のうち、どれか一つを保持する「多者択一」を表す型です。
            </summary>
        </member>
        <member name="M:LangExt.Choice`11.#ctor(`0)">
            <summary>
            T1を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`11.#ctor(`1)">
            <summary>
            T2を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`11.#ctor(`2)">
            <summary>
            T3を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`11.#ctor(`3)">
            <summary>
            T4を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`11.#ctor(`4)">
            <summary>
            T5を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`11.#ctor(`5)">
            <summary>
            T6を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`11.#ctor(`6)">
            <summary>
            T7を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`11.#ctor(`7)">
            <summary>
            T8を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`11.#ctor(`8)">
            <summary>
            T9を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`11.#ctor(`9)">
            <summary>
            T10を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`11.#ctor(`10)">
            <summary>
            T11を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`11.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0},System.Func{`5,``0},System.Func{`6,``0},System.Func{`7,``0},System.Func{`8,``0},System.Func{`9,``0},System.Func{`10,``0})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`11.Match(System.Action{`0},System.Action{`1},System.Action{`2},System.Action{`3},System.Action{`4},System.Action{`5},System.Action{`6},System.Action{`7},System.Action{`8},System.Action{`9},System.Action{`10})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`11.Equals(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するChoice</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`11.op_Equality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`11.op_Inequality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Choice`11.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`11.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Choice`11.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="P:LangExt.Choice`11.TagIndex">
            <summary>
            何番目の型を保持しているかを取得します。
            </summary>
        </member>
        <member name="T:LangExt.Choice`12">
            <summary>
            複数の型のうち、どれか一つを保持する「多者択一」を表す型です。
            </summary>
        </member>
        <member name="M:LangExt.Choice`12.#ctor(`0)">
            <summary>
            T1を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`12.#ctor(`1)">
            <summary>
            T2を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`12.#ctor(`2)">
            <summary>
            T3を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`12.#ctor(`3)">
            <summary>
            T4を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`12.#ctor(`4)">
            <summary>
            T5を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`12.#ctor(`5)">
            <summary>
            T6を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`12.#ctor(`6)">
            <summary>
            T7を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`12.#ctor(`7)">
            <summary>
            T8を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`12.#ctor(`8)">
            <summary>
            T9を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`12.#ctor(`9)">
            <summary>
            T10を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`12.#ctor(`10)">
            <summary>
            T11を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`12.#ctor(`11)">
            <summary>
            T12を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`12.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0},System.Func{`5,``0},System.Func{`6,``0},System.Func{`7,``0},System.Func{`8,``0},System.Func{`9,``0},System.Func{`10,``0},System.Func{`11,``0})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`12.Match(System.Action{`0},System.Action{`1},System.Action{`2},System.Action{`3},System.Action{`4},System.Action{`5},System.Action{`6},System.Action{`7},System.Action{`8},System.Action{`9},System.Action{`10},System.Action{`11})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`12.Equals(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するChoice</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`12.op_Equality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`12.op_Inequality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Choice`12.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`12.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Choice`12.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="P:LangExt.Choice`12.TagIndex">
            <summary>
            何番目の型を保持しているかを取得します。
            </summary>
        </member>
        <member name="T:LangExt.Choice`13">
            <summary>
            複数の型のうち、どれか一つを保持する「多者択一」を表す型です。
            </summary>
        </member>
        <member name="M:LangExt.Choice`13.#ctor(`0)">
            <summary>
            T1を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`13.#ctor(`1)">
            <summary>
            T2を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`13.#ctor(`2)">
            <summary>
            T3を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`13.#ctor(`3)">
            <summary>
            T4を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`13.#ctor(`4)">
            <summary>
            T5を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`13.#ctor(`5)">
            <summary>
            T6を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`13.#ctor(`6)">
            <summary>
            T7を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`13.#ctor(`7)">
            <summary>
            T8を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`13.#ctor(`8)">
            <summary>
            T9を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`13.#ctor(`9)">
            <summary>
            T10を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`13.#ctor(`10)">
            <summary>
            T11を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`13.#ctor(`11)">
            <summary>
            T12を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`13.#ctor(`12)">
            <summary>
            T13を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`13.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0},System.Func{`5,``0},System.Func{`6,``0},System.Func{`7,``0},System.Func{`8,``0},System.Func{`9,``0},System.Func{`10,``0},System.Func{`11,``0},System.Func{`12,``0})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`13.Match(System.Action{`0},System.Action{`1},System.Action{`2},System.Action{`3},System.Action{`4},System.Action{`5},System.Action{`6},System.Action{`7},System.Action{`8},System.Action{`9},System.Action{`10},System.Action{`11},System.Action{`12})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`13.Equals(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するChoice</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`13.op_Equality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`13.op_Inequality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Choice`13.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`13.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Choice`13.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="P:LangExt.Choice`13.TagIndex">
            <summary>
            何番目の型を保持しているかを取得します。
            </summary>
        </member>
        <member name="T:LangExt.Choice`14">
            <summary>
            複数の型のうち、どれか一つを保持する「多者択一」を表す型です。
            </summary>
        </member>
        <member name="M:LangExt.Choice`14.#ctor(`0)">
            <summary>
            T1を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`14.#ctor(`1)">
            <summary>
            T2を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`14.#ctor(`2)">
            <summary>
            T3を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`14.#ctor(`3)">
            <summary>
            T4を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`14.#ctor(`4)">
            <summary>
            T5を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`14.#ctor(`5)">
            <summary>
            T6を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`14.#ctor(`6)">
            <summary>
            T7を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`14.#ctor(`7)">
            <summary>
            T8を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`14.#ctor(`8)">
            <summary>
            T9を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`14.#ctor(`9)">
            <summary>
            T10を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`14.#ctor(`10)">
            <summary>
            T11を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`14.#ctor(`11)">
            <summary>
            T12を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`14.#ctor(`12)">
            <summary>
            T13を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`14.#ctor(`13)">
            <summary>
            T14を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`14.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0},System.Func{`5,``0},System.Func{`6,``0},System.Func{`7,``0},System.Func{`8,``0},System.Func{`9,``0},System.Func{`10,``0},System.Func{`11,``0},System.Func{`12,``0},System.Func{`13,``0})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`14.Match(System.Action{`0},System.Action{`1},System.Action{`2},System.Action{`3},System.Action{`4},System.Action{`5},System.Action{`6},System.Action{`7},System.Action{`8},System.Action{`9},System.Action{`10},System.Action{`11},System.Action{`12},System.Action{`13})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`14.Equals(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するChoice</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`14.op_Equality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`14.op_Inequality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Choice`14.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`14.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Choice`14.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="P:LangExt.Choice`14.TagIndex">
            <summary>
            何番目の型を保持しているかを取得します。
            </summary>
        </member>
        <member name="T:LangExt.Choice`15">
            <summary>
            複数の型のうち、どれか一つを保持する「多者択一」を表す型です。
            </summary>
        </member>
        <member name="M:LangExt.Choice`15.#ctor(`0)">
            <summary>
            T1を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`15.#ctor(`1)">
            <summary>
            T2を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`15.#ctor(`2)">
            <summary>
            T3を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`15.#ctor(`3)">
            <summary>
            T4を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`15.#ctor(`4)">
            <summary>
            T5を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`15.#ctor(`5)">
            <summary>
            T6を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`15.#ctor(`6)">
            <summary>
            T7を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`15.#ctor(`7)">
            <summary>
            T8を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`15.#ctor(`8)">
            <summary>
            T9を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`15.#ctor(`9)">
            <summary>
            T10を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`15.#ctor(`10)">
            <summary>
            T11を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`15.#ctor(`11)">
            <summary>
            T12を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`15.#ctor(`12)">
            <summary>
            T13を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`15.#ctor(`13)">
            <summary>
            T14を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`15.#ctor(`14)">
            <summary>
            T15を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`15.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0},System.Func{`5,``0},System.Func{`6,``0},System.Func{`7,``0},System.Func{`8,``0},System.Func{`9,``0},System.Func{`10,``0},System.Func{`11,``0},System.Func{`12,``0},System.Func{`13,``0},System.Func{`14,``0})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`15.Match(System.Action{`0},System.Action{`1},System.Action{`2},System.Action{`3},System.Action{`4},System.Action{`5},System.Action{`6},System.Action{`7},System.Action{`8},System.Action{`9},System.Action{`10},System.Action{`11},System.Action{`12},System.Action{`13},System.Action{`14})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`15.Equals(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するChoice</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`15.op_Equality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`15.op_Inequality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Choice`15.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`15.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Choice`15.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="P:LangExt.Choice`15.TagIndex">
            <summary>
            何番目の型を保持しているかを取得します。
            </summary>
        </member>
        <member name="T:LangExt.Choice`16">
            <summary>
            複数の型のうち、どれか一つを保持する「多者択一」を表す型です。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.#ctor(`0)">
            <summary>
            T1を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.#ctor(`1)">
            <summary>
            T2を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.#ctor(`2)">
            <summary>
            T3を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.#ctor(`3)">
            <summary>
            T4を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.#ctor(`4)">
            <summary>
            T5を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.#ctor(`5)">
            <summary>
            T6を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.#ctor(`6)">
            <summary>
            T7を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.#ctor(`7)">
            <summary>
            T8を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.#ctor(`8)">
            <summary>
            T9を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.#ctor(`9)">
            <summary>
            T10を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.#ctor(`10)">
            <summary>
            T11を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.#ctor(`11)">
            <summary>
            T12を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.#ctor(`12)">
            <summary>
            T13を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.#ctor(`13)">
            <summary>
            T14を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.#ctor(`14)">
            <summary>
            T15を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.#ctor(`15)">
            <summary>
            T16を保持するChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0},System.Func{`5,``0},System.Func{`6,``0},System.Func{`7,``0},System.Func{`8,``0},System.Func{`9,``0},System.Func{`10,``0},System.Func{`11,``0},System.Func{`12,``0},System.Func{`13,``0},System.Func{`14,``0},System.Func{`15,``0})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.Match(System.Action{`0},System.Action{`1},System.Action{`2},System.Action{`3},System.Action{`4},System.Action{`5},System.Action{`6},System.Action{`7},System.Action{`8},System.Action{`9},System.Action{`10},System.Action{`11},System.Action{`12},System.Action{`13},System.Action{`14},System.Action{`15})">
            <summary>
            擬似的にパターンマッチを行います。
            </summary>
        </member>
        <member name="M:LangExt.Choice`16.Equals(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するChoice</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`16.op_Equality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`16.op_Inequality(LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15},LangExt.Choice{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15})">
            <summary>
            2つのChoceの比較を行います。 
            </summary>
            <param name="a">1つ目のChoice</param>
            <param name="b">2つ目のChoice</param>
            <returns>2つのChoiceが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Choice`16.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Choice`16.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Choice`16.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="P:LangExt.Choice`16.TagIndex">
            <summary>
            何番目の型を保持しているかを取得します。
            </summary>
        </member>
        <member name="T:LangExt.Create">
            <summary>
            様々な型の値を生成するためのモジュールです。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``2(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``2(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``3(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``3(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``3(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``4(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``4(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``4(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``4(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``5(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``5(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``5(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``5(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``5(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``6(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``6(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``6(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``6(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``6(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``6(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``7(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``7(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``7(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``7(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``7(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``7(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``7(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``8(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``8(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``8(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``8(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``8(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``8(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``8(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``8(``7)">
            <summary>
            T8を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``9(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``9(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``9(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``9(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``9(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``9(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``9(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``9(``7)">
            <summary>
            T8を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``9(``8)">
            <summary>
            T9を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``10(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``10(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``10(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``10(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``10(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``10(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``10(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``10(``7)">
            <summary>
            T8を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``10(``8)">
            <summary>
            T9を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``10(``9)">
            <summary>
            T10を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``11(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``11(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``11(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``11(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``11(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``11(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``11(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``11(``7)">
            <summary>
            T8を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``11(``8)">
            <summary>
            T9を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``11(``9)">
            <summary>
            T10を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``11(``10)">
            <summary>
            T11を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``12(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``12(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``12(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``12(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``12(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``12(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``12(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``12(``7)">
            <summary>
            T8を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``12(``8)">
            <summary>
            T9を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``12(``9)">
            <summary>
            T10を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``12(``10)">
            <summary>
            T11を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``12(``11)">
            <summary>
            T12を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``13(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``13(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``13(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``13(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``13(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``13(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``13(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``13(``7)">
            <summary>
            T8を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``13(``8)">
            <summary>
            T9を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``13(``9)">
            <summary>
            T10を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``13(``10)">
            <summary>
            T11を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``13(``11)">
            <summary>
            T12を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``13(``12)">
            <summary>
            T13を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``14(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``14(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``14(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``14(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``14(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``14(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``14(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``14(``7)">
            <summary>
            T8を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``14(``8)">
            <summary>
            T9を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``14(``9)">
            <summary>
            T10を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``14(``10)">
            <summary>
            T11を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``14(``11)">
            <summary>
            T12を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``14(``12)">
            <summary>
            T13を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``14(``13)">
            <summary>
            T14を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``15(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``15(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``15(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``15(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``15(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``15(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``15(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``15(``7)">
            <summary>
            T8を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``15(``8)">
            <summary>
            T9を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``15(``9)">
            <summary>
            T10を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``15(``10)">
            <summary>
            T11を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``15(``11)">
            <summary>
            T12を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``15(``12)">
            <summary>
            T13を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``15(``13)">
            <summary>
            T14を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``15(``14)">
            <summary>
            T15を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``16(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``16(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``16(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``16(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``16(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``16(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``16(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``16(``7)">
            <summary>
            T8を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``16(``8)">
            <summary>
            T9を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``16(``9)">
            <summary>
            T10を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``16(``10)">
            <summary>
            T11を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``16(``11)">
            <summary>
            T12を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``16(``12)">
            <summary>
            T13を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``16(``13)">
            <summary>
            T14を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``16(``14)">
            <summary>
            T15を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Choice``16(``15)">
            <summary>
            T16を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Comparer``1(System.Func{``0,``0,System.Int32})">
            <summary>
            比較用関数を指定して、Compare[T]を生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Create.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Create.Func``1(System.Func{``0})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Create.Func``2(System.Func{``0,``1})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Create.Func``3(System.Func{``0,``1,``2})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Create.Func``4(System.Func{``0,``1,``2,``3})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Create.Func``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Create.Func``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Create.Func``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Create.Func``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Create.Func``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Create.Func``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Create.Func``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Create.Func``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Create.Func``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Create.Func``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Create.Func``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Create.Func``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Create.Func``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Create.Range(LangExt.IntWithUnit{LangExt.RangeUnit.Length})">
            <summary>
            指定された長さを持つ、0から始まるRangeを生成します。
            長さに負の数を指定することはできません。
            </summary>
        </member>
        <member name="M:LangExt.Create.Range(System.Int32,LangExt.IntWithUnit{LangExt.RangeUnit.Length})">
            <summary>
            指定された開始位置と長さを持つRangeを生成します。
            長さに負の数を指定することはできません。
            </summary>
        </member>
        <member name="M:LangExt.Create.Range(LangExt.IntWithUnit{LangExt.RangeUnit.Index})">
            <summary>
            指定された終了位置(自身は含まない)を持つ、0から始まるRangeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Range(System.Int32,LangExt.IntWithUnit{LangExt.RangeUnit.Index})">
            <summary>
            指定された開始位置と終了位置(自身は含まない)を持つRangeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Result``1(``0)">
            <summary>
            valueがnullでない場合はResult.Success(value)と、
            valueがnullの場合はResult.Failure(Unit._)と同じオブジェクトを返します。
            </summary>
            <typeparam name="T">生成するResultのSuccess側の要素の型</typeparam>
            <param name="value">値</param>
            <returns>valueがnullの場合Failure、そうでない場合Success</returns>
        </member>
        <member name="M:LangExt.Create.Result``1(System.Nullable{``0})">
            <summary>
            valueがnullでない場合はResult.Success(value.Value)と、
            valueがnullの場合はResult.Failure(Unit._)と同じオブジェクトを返します。
            </summary>
            <typeparam name="T">生成するResultのSuccess側の要素の型</typeparam>
            <param name="value">値</param>
            <returns>valueがnullの場合Failure、そうでない場合Success</returns>
        </member>
        <member name="M:LangExt.Create.Seq``1(``0[])">
            <summary>
            引数を要素として含むシーケンスを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Option``1(``0)">
            <summary>
            valueがnullでない場合はOption.Some(value)と、
            valueがnullの場合はOption.Noneと同じオブジェクトを返します。
            </summary>
            <typeparam name="T">生成するOptionの要素の型</typeparam>
            <param name="value">値</param>
            <returns>valueがnullの場合None、そうでない場合Some</returns>
        </member>
        <member name="M:LangExt.Create.Option``1(System.Nullable{``0})">
            <summary>
            valueがnullでない場合はOption.Some(value.Value)と、
            valueがnullの場合はOption.Noneと同じオブジェクトを返します。
            </summary>
            <typeparam name="T">生成するOptionの要素の型</typeparam>
            <param name="value">値</param>
            <returns>valueがnullの場合None、そうでない場合Some</returns>
        </member>
        <member name="M:LangExt.Create.Tuple``2(``0,``1)">
            <summary>2要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``3(``0,``1,``2)">
            <summary>3要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``4(``0,``1,``2,``3)">
            <summary>4要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``5(``0,``1,``2,``3,``4)">
            <summary>5要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``6(``0,``1,``2,``3,``4,``5)">
            <summary>6要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>7要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>8要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``9(``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>9要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``10(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>10要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``11(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>11要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``12(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>12要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``13(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>13要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``14(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>14要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``15(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>15要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``16(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>16要素のタプルを生成します。</summary>
        </member>
        <member name="T:LangExt.Choice">
            <summary>
            Choiceに対する操作を提供します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``2(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``2(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``3(LangExt.Choice{``0,``1},LangExt.Choice{``0,``1},System.Func{``0,``0,``2},System.Func{``1,``1,``2})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``3(System.Tuple{LangExt.Choice{``0,``1},LangExt.Choice{``0,``1}},System.Func{``0,``0,``2},System.Func{``1,``1,``2})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``3(LangExt.Choice{``0,``1},LangExt.Choice{``0,``1},System.Func{``0,``0,``2},System.Func{``1,``1,``2},System.Func{System.Int32,System.Int32,``2})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``3(System.Tuple{LangExt.Choice{``0,``1},LangExt.Choice{``0,``1}},System.Func{``0,``0,``2},System.Func{``1,``1,``2},System.Func{System.Int32,System.Int32,``2})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.CompareTo``2(LangExt.Choice{``0,``1},LangExt.Choice{``0,``1})">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]どうしの大小関係を判断して返します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Comparer``2">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]を比較するためのIComparer[Choice[...]]を取得します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``3(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``3(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``3(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``4(LangExt.Choice{``0,``1,``2},LangExt.Choice{``0,``1,``2},System.Func{``0,``0,``3},System.Func{``1,``1,``3},System.Func{``2,``2,``3})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``4(System.Tuple{LangExt.Choice{``0,``1,``2},LangExt.Choice{``0,``1,``2}},System.Func{``0,``0,``3},System.Func{``1,``1,``3},System.Func{``2,``2,``3})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``4(LangExt.Choice{``0,``1,``2},LangExt.Choice{``0,``1,``2},System.Func{``0,``0,``3},System.Func{``1,``1,``3},System.Func{``2,``2,``3},System.Func{System.Int32,System.Int32,``3})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``4(System.Tuple{LangExt.Choice{``0,``1,``2},LangExt.Choice{``0,``1,``2}},System.Func{``0,``0,``3},System.Func{``1,``1,``3},System.Func{``2,``2,``3},System.Func{System.Int32,System.Int32,``3})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.CompareTo``3(LangExt.Choice{``0,``1,``2},LangExt.Choice{``0,``1,``2})">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]どうしの大小関係を判断して返します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Comparer``3">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]を比較するためのIComparer[Choice[...]]を取得します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``4(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``4(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``4(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``4(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``5(LangExt.Choice{``0,``1,``2,``3},LangExt.Choice{``0,``1,``2,``3},System.Func{``0,``0,``4},System.Func{``1,``1,``4},System.Func{``2,``2,``4},System.Func{``3,``3,``4})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``5(System.Tuple{LangExt.Choice{``0,``1,``2,``3},LangExt.Choice{``0,``1,``2,``3}},System.Func{``0,``0,``4},System.Func{``1,``1,``4},System.Func{``2,``2,``4},System.Func{``3,``3,``4})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``5(LangExt.Choice{``0,``1,``2,``3},LangExt.Choice{``0,``1,``2,``3},System.Func{``0,``0,``4},System.Func{``1,``1,``4},System.Func{``2,``2,``4},System.Func{``3,``3,``4},System.Func{System.Int32,System.Int32,``4})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``5(System.Tuple{LangExt.Choice{``0,``1,``2,``3},LangExt.Choice{``0,``1,``2,``3}},System.Func{``0,``0,``4},System.Func{``1,``1,``4},System.Func{``2,``2,``4},System.Func{``3,``3,``4},System.Func{System.Int32,System.Int32,``4})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.CompareTo``4(LangExt.Choice{``0,``1,``2,``3},LangExt.Choice{``0,``1,``2,``3})">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]どうしの大小関係を判断して返します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Comparer``4">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]を比較するためのIComparer[Choice[...]]を取得します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``5(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``5(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``5(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``5(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``5(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``6(LangExt.Choice{``0,``1,``2,``3,``4},LangExt.Choice{``0,``1,``2,``3,``4},System.Func{``0,``0,``5},System.Func{``1,``1,``5},System.Func{``2,``2,``5},System.Func{``3,``3,``5},System.Func{``4,``4,``5})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``6(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4},LangExt.Choice{``0,``1,``2,``3,``4}},System.Func{``0,``0,``5},System.Func{``1,``1,``5},System.Func{``2,``2,``5},System.Func{``3,``3,``5},System.Func{``4,``4,``5})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``6(LangExt.Choice{``0,``1,``2,``3,``4},LangExt.Choice{``0,``1,``2,``3,``4},System.Func{``0,``0,``5},System.Func{``1,``1,``5},System.Func{``2,``2,``5},System.Func{``3,``3,``5},System.Func{``4,``4,``5},System.Func{System.Int32,System.Int32,``5})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``6(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4},LangExt.Choice{``0,``1,``2,``3,``4}},System.Func{``0,``0,``5},System.Func{``1,``1,``5},System.Func{``2,``2,``5},System.Func{``3,``3,``5},System.Func{``4,``4,``5},System.Func{System.Int32,System.Int32,``5})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.CompareTo``5(LangExt.Choice{``0,``1,``2,``3,``4},LangExt.Choice{``0,``1,``2,``3,``4})">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]どうしの大小関係を判断して返します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Comparer``5">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]を比較するためのIComparer[Choice[...]]を取得します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``6(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``6(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``6(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``6(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``6(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``6(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``7(LangExt.Choice{``0,``1,``2,``3,``4,``5},LangExt.Choice{``0,``1,``2,``3,``4,``5},System.Func{``0,``0,``6},System.Func{``1,``1,``6},System.Func{``2,``2,``6},System.Func{``3,``3,``6},System.Func{``4,``4,``6},System.Func{``5,``5,``6})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``7(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5},LangExt.Choice{``0,``1,``2,``3,``4,``5}},System.Func{``0,``0,``6},System.Func{``1,``1,``6},System.Func{``2,``2,``6},System.Func{``3,``3,``6},System.Func{``4,``4,``6},System.Func{``5,``5,``6})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``7(LangExt.Choice{``0,``1,``2,``3,``4,``5},LangExt.Choice{``0,``1,``2,``3,``4,``5},System.Func{``0,``0,``6},System.Func{``1,``1,``6},System.Func{``2,``2,``6},System.Func{``3,``3,``6},System.Func{``4,``4,``6},System.Func{``5,``5,``6},System.Func{System.Int32,System.Int32,``6})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``7(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5},LangExt.Choice{``0,``1,``2,``3,``4,``5}},System.Func{``0,``0,``6},System.Func{``1,``1,``6},System.Func{``2,``2,``6},System.Func{``3,``3,``6},System.Func{``4,``4,``6},System.Func{``5,``5,``6},System.Func{System.Int32,System.Int32,``6})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.CompareTo``6(LangExt.Choice{``0,``1,``2,``3,``4,``5},LangExt.Choice{``0,``1,``2,``3,``4,``5})">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]どうしの大小関係を判断して返します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Comparer``6">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]を比較するためのIComparer[Choice[...]]を取得します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``7(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``7(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``7(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``7(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``7(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``7(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``7(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``8(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``0,``7},System.Func{``1,``1,``7},System.Func{``2,``2,``7},System.Func{``3,``3,``7},System.Func{``4,``4,``7},System.Func{``5,``5,``7},System.Func{``6,``6,``7})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``8(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``0,``7},System.Func{``1,``1,``7},System.Func{``2,``2,``7},System.Func{``3,``3,``7},System.Func{``4,``4,``7},System.Func{``5,``5,``7},System.Func{``6,``6,``7})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``8(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``0,``7},System.Func{``1,``1,``7},System.Func{``2,``2,``7},System.Func{``3,``3,``7},System.Func{``4,``4,``7},System.Func{``5,``5,``7},System.Func{``6,``6,``7},System.Func{System.Int32,System.Int32,``7})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``8(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``0,``7},System.Func{``1,``1,``7},System.Func{``2,``2,``7},System.Func{``3,``3,``7},System.Func{``4,``4,``7},System.Func{``5,``5,``7},System.Func{``6,``6,``7},System.Func{System.Int32,System.Int32,``7})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.CompareTo``7(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]どうしの大小関係を判断して返します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Comparer``7">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]を比較するためのIComparer[Choice[...]]を取得します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``8(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``8(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``8(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``8(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``8(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``8(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``8(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``8(``7)">
            <summary>
            T8を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``9(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{``0,``0,``8},System.Func{``1,``1,``8},System.Func{``2,``2,``8},System.Func{``3,``3,``8},System.Func{``4,``4,``8},System.Func{``5,``5,``8},System.Func{``6,``6,``8},System.Func{``7,``7,``8})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``9(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7}},System.Func{``0,``0,``8},System.Func{``1,``1,``8},System.Func{``2,``2,``8},System.Func{``3,``3,``8},System.Func{``4,``4,``8},System.Func{``5,``5,``8},System.Func{``6,``6,``8},System.Func{``7,``7,``8})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``9(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{``0,``0,``8},System.Func{``1,``1,``8},System.Func{``2,``2,``8},System.Func{``3,``3,``8},System.Func{``4,``4,``8},System.Func{``5,``5,``8},System.Func{``6,``6,``8},System.Func{``7,``7,``8},System.Func{System.Int32,System.Int32,``8})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``9(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7}},System.Func{``0,``0,``8},System.Func{``1,``1,``8},System.Func{``2,``2,``8},System.Func{``3,``3,``8},System.Func{``4,``4,``8},System.Func{``5,``5,``8},System.Func{``6,``6,``8},System.Func{``7,``7,``8},System.Func{System.Int32,System.Int32,``8})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.CompareTo``8(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]どうしの大小関係を判断して返します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Comparer``8">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]を比較するためのIComparer[Choice[...]]を取得します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``9(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``9(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``9(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``9(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``9(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``9(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``9(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``9(``7)">
            <summary>
            T8を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``9(``8)">
            <summary>
            T9を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``10(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{``0,``0,``9},System.Func{``1,``1,``9},System.Func{``2,``2,``9},System.Func{``3,``3,``9},System.Func{``4,``4,``9},System.Func{``5,``5,``9},System.Func{``6,``6,``9},System.Func{``7,``7,``9},System.Func{``8,``8,``9})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``10(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8}},System.Func{``0,``0,``9},System.Func{``1,``1,``9},System.Func{``2,``2,``9},System.Func{``3,``3,``9},System.Func{``4,``4,``9},System.Func{``5,``5,``9},System.Func{``6,``6,``9},System.Func{``7,``7,``9},System.Func{``8,``8,``9})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``10(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{``0,``0,``9},System.Func{``1,``1,``9},System.Func{``2,``2,``9},System.Func{``3,``3,``9},System.Func{``4,``4,``9},System.Func{``5,``5,``9},System.Func{``6,``6,``9},System.Func{``7,``7,``9},System.Func{``8,``8,``9},System.Func{System.Int32,System.Int32,``9})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``10(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8}},System.Func{``0,``0,``9},System.Func{``1,``1,``9},System.Func{``2,``2,``9},System.Func{``3,``3,``9},System.Func{``4,``4,``9},System.Func{``5,``5,``9},System.Func{``6,``6,``9},System.Func{``7,``7,``9},System.Func{``8,``8,``9},System.Func{System.Int32,System.Int32,``9})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.CompareTo``9(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]どうしの大小関係を判断して返します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Comparer``9">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]を比較するためのIComparer[Choice[...]]を取得します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``10(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``10(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``10(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``10(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``10(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``10(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``10(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``10(``7)">
            <summary>
            T8を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``10(``8)">
            <summary>
            T9を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``10(``9)">
            <summary>
            T10を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``11(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{``0,``0,``10},System.Func{``1,``1,``10},System.Func{``2,``2,``10},System.Func{``3,``3,``10},System.Func{``4,``4,``10},System.Func{``5,``5,``10},System.Func{``6,``6,``10},System.Func{``7,``7,``10},System.Func{``8,``8,``10},System.Func{``9,``9,``10})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``11(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}},System.Func{``0,``0,``10},System.Func{``1,``1,``10},System.Func{``2,``2,``10},System.Func{``3,``3,``10},System.Func{``4,``4,``10},System.Func{``5,``5,``10},System.Func{``6,``6,``10},System.Func{``7,``7,``10},System.Func{``8,``8,``10},System.Func{``9,``9,``10})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``11(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{``0,``0,``10},System.Func{``1,``1,``10},System.Func{``2,``2,``10},System.Func{``3,``3,``10},System.Func{``4,``4,``10},System.Func{``5,``5,``10},System.Func{``6,``6,``10},System.Func{``7,``7,``10},System.Func{``8,``8,``10},System.Func{``9,``9,``10},System.Func{System.Int32,System.Int32,``10})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``11(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}},System.Func{``0,``0,``10},System.Func{``1,``1,``10},System.Func{``2,``2,``10},System.Func{``3,``3,``10},System.Func{``4,``4,``10},System.Func{``5,``5,``10},System.Func{``6,``6,``10},System.Func{``7,``7,``10},System.Func{``8,``8,``10},System.Func{``9,``9,``10},System.Func{System.Int32,System.Int32,``10})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.CompareTo``10(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]どうしの大小関係を判断して返します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Comparer``10">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]を比較するためのIComparer[Choice[...]]を取得します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``11(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``11(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``11(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``11(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``11(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``11(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``11(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``11(``7)">
            <summary>
            T8を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``11(``8)">
            <summary>
            T9を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``11(``9)">
            <summary>
            T10を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``11(``10)">
            <summary>
            T11を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``12(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Func{``0,``0,``11},System.Func{``1,``1,``11},System.Func{``2,``2,``11},System.Func{``3,``3,``11},System.Func{``4,``4,``11},System.Func{``5,``5,``11},System.Func{``6,``6,``11},System.Func{``7,``7,``11},System.Func{``8,``8,``11},System.Func{``9,``9,``11},System.Func{``10,``10,``11})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``12(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}},System.Func{``0,``0,``11},System.Func{``1,``1,``11},System.Func{``2,``2,``11},System.Func{``3,``3,``11},System.Func{``4,``4,``11},System.Func{``5,``5,``11},System.Func{``6,``6,``11},System.Func{``7,``7,``11},System.Func{``8,``8,``11},System.Func{``9,``9,``11},System.Func{``10,``10,``11})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``12(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Func{``0,``0,``11},System.Func{``1,``1,``11},System.Func{``2,``2,``11},System.Func{``3,``3,``11},System.Func{``4,``4,``11},System.Func{``5,``5,``11},System.Func{``6,``6,``11},System.Func{``7,``7,``11},System.Func{``8,``8,``11},System.Func{``9,``9,``11},System.Func{``10,``10,``11},System.Func{System.Int32,System.Int32,``11})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``12(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}},System.Func{``0,``0,``11},System.Func{``1,``1,``11},System.Func{``2,``2,``11},System.Func{``3,``3,``11},System.Func{``4,``4,``11},System.Func{``5,``5,``11},System.Func{``6,``6,``11},System.Func{``7,``7,``11},System.Func{``8,``8,``11},System.Func{``9,``9,``11},System.Func{``10,``10,``11},System.Func{System.Int32,System.Int32,``11})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.CompareTo``11(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]どうしの大小関係を判断して返します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Comparer``11">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]を比較するためのIComparer[Choice[...]]を取得します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``12(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``12(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``12(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``12(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``12(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``12(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``12(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``12(``7)">
            <summary>
            T8を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``12(``8)">
            <summary>
            T9を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``12(``9)">
            <summary>
            T10を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``12(``10)">
            <summary>
            T11を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``12(``11)">
            <summary>
            T12を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``13(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Func{``0,``0,``12},System.Func{``1,``1,``12},System.Func{``2,``2,``12},System.Func{``3,``3,``12},System.Func{``4,``4,``12},System.Func{``5,``5,``12},System.Func{``6,``6,``12},System.Func{``7,``7,``12},System.Func{``8,``8,``12},System.Func{``9,``9,``12},System.Func{``10,``10,``12},System.Func{``11,``11,``12})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``13(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}},System.Func{``0,``0,``12},System.Func{``1,``1,``12},System.Func{``2,``2,``12},System.Func{``3,``3,``12},System.Func{``4,``4,``12},System.Func{``5,``5,``12},System.Func{``6,``6,``12},System.Func{``7,``7,``12},System.Func{``8,``8,``12},System.Func{``9,``9,``12},System.Func{``10,``10,``12},System.Func{``11,``11,``12})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``13(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Func{``0,``0,``12},System.Func{``1,``1,``12},System.Func{``2,``2,``12},System.Func{``3,``3,``12},System.Func{``4,``4,``12},System.Func{``5,``5,``12},System.Func{``6,``6,``12},System.Func{``7,``7,``12},System.Func{``8,``8,``12},System.Func{``9,``9,``12},System.Func{``10,``10,``12},System.Func{``11,``11,``12},System.Func{System.Int32,System.Int32,``12})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``13(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}},System.Func{``0,``0,``12},System.Func{``1,``1,``12},System.Func{``2,``2,``12},System.Func{``3,``3,``12},System.Func{``4,``4,``12},System.Func{``5,``5,``12},System.Func{``6,``6,``12},System.Func{``7,``7,``12},System.Func{``8,``8,``12},System.Func{``9,``9,``12},System.Func{``10,``10,``12},System.Func{``11,``11,``12},System.Func{System.Int32,System.Int32,``12})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.CompareTo``12(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]どうしの大小関係を判断して返します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Comparer``12">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]を比較するためのIComparer[Choice[...]]を取得します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``13(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``13(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``13(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``13(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``13(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``13(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``13(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``13(``7)">
            <summary>
            T8を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``13(``8)">
            <summary>
            T9を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``13(``9)">
            <summary>
            T10を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``13(``10)">
            <summary>
            T11を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``13(``11)">
            <summary>
            T12を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``13(``12)">
            <summary>
            T13を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``14(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Func{``0,``0,``13},System.Func{``1,``1,``13},System.Func{``2,``2,``13},System.Func{``3,``3,``13},System.Func{``4,``4,``13},System.Func{``5,``5,``13},System.Func{``6,``6,``13},System.Func{``7,``7,``13},System.Func{``8,``8,``13},System.Func{``9,``9,``13},System.Func{``10,``10,``13},System.Func{``11,``11,``13},System.Func{``12,``12,``13})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``14(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}},System.Func{``0,``0,``13},System.Func{``1,``1,``13},System.Func{``2,``2,``13},System.Func{``3,``3,``13},System.Func{``4,``4,``13},System.Func{``5,``5,``13},System.Func{``6,``6,``13},System.Func{``7,``7,``13},System.Func{``8,``8,``13},System.Func{``9,``9,``13},System.Func{``10,``10,``13},System.Func{``11,``11,``13},System.Func{``12,``12,``13})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``14(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Func{``0,``0,``13},System.Func{``1,``1,``13},System.Func{``2,``2,``13},System.Func{``3,``3,``13},System.Func{``4,``4,``13},System.Func{``5,``5,``13},System.Func{``6,``6,``13},System.Func{``7,``7,``13},System.Func{``8,``8,``13},System.Func{``9,``9,``13},System.Func{``10,``10,``13},System.Func{``11,``11,``13},System.Func{``12,``12,``13},System.Func{System.Int32,System.Int32,``13})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``14(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}},System.Func{``0,``0,``13},System.Func{``1,``1,``13},System.Func{``2,``2,``13},System.Func{``3,``3,``13},System.Func{``4,``4,``13},System.Func{``5,``5,``13},System.Func{``6,``6,``13},System.Func{``7,``7,``13},System.Func{``8,``8,``13},System.Func{``9,``9,``13},System.Func{``10,``10,``13},System.Func{``11,``11,``13},System.Func{``12,``12,``13},System.Func{System.Int32,System.Int32,``13})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.CompareTo``13(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]どうしの大小関係を判断して返します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Comparer``13">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]を比較するためのIComparer[Choice[...]]を取得します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``14(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``14(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``14(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``14(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``14(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``14(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``14(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``14(``7)">
            <summary>
            T8を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``14(``8)">
            <summary>
            T9を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``14(``9)">
            <summary>
            T10を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``14(``10)">
            <summary>
            T11を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``14(``11)">
            <summary>
            T12を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``14(``12)">
            <summary>
            T13を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``14(``13)">
            <summary>
            T14を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``15(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Func{``0,``0,``14},System.Func{``1,``1,``14},System.Func{``2,``2,``14},System.Func{``3,``3,``14},System.Func{``4,``4,``14},System.Func{``5,``5,``14},System.Func{``6,``6,``14},System.Func{``7,``7,``14},System.Func{``8,``8,``14},System.Func{``9,``9,``14},System.Func{``10,``10,``14},System.Func{``11,``11,``14},System.Func{``12,``12,``14},System.Func{``13,``13,``14})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``15(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}},System.Func{``0,``0,``14},System.Func{``1,``1,``14},System.Func{``2,``2,``14},System.Func{``3,``3,``14},System.Func{``4,``4,``14},System.Func{``5,``5,``14},System.Func{``6,``6,``14},System.Func{``7,``7,``14},System.Func{``8,``8,``14},System.Func{``9,``9,``14},System.Func{``10,``10,``14},System.Func{``11,``11,``14},System.Func{``12,``12,``14},System.Func{``13,``13,``14})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``15(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Func{``0,``0,``14},System.Func{``1,``1,``14},System.Func{``2,``2,``14},System.Func{``3,``3,``14},System.Func{``4,``4,``14},System.Func{``5,``5,``14},System.Func{``6,``6,``14},System.Func{``7,``7,``14},System.Func{``8,``8,``14},System.Func{``9,``9,``14},System.Func{``10,``10,``14},System.Func{``11,``11,``14},System.Func{``12,``12,``14},System.Func{``13,``13,``14},System.Func{System.Int32,System.Int32,``14})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``15(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}},System.Func{``0,``0,``14},System.Func{``1,``1,``14},System.Func{``2,``2,``14},System.Func{``3,``3,``14},System.Func{``4,``4,``14},System.Func{``5,``5,``14},System.Func{``6,``6,``14},System.Func{``7,``7,``14},System.Func{``8,``8,``14},System.Func{``9,``9,``14},System.Func{``10,``10,``14},System.Func{``11,``11,``14},System.Func{``12,``12,``14},System.Func{``13,``13,``14},System.Func{System.Int32,System.Int32,``14})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.CompareTo``14(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]どうしの大小関係を判断して返します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Comparer``14">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]を比較するためのIComparer[Choice[...]]を取得します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``15(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``15(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``15(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``15(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``15(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``15(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``15(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``15(``7)">
            <summary>
            T8を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``15(``8)">
            <summary>
            T9を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``15(``9)">
            <summary>
            T10を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``15(``10)">
            <summary>
            T11を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``15(``11)">
            <summary>
            T12を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``15(``12)">
            <summary>
            T13を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``15(``13)">
            <summary>
            T14を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``15(``14)">
            <summary>
            T15を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``16(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Func{``0,``0,``15},System.Func{``1,``1,``15},System.Func{``2,``2,``15},System.Func{``3,``3,``15},System.Func{``4,``4,``15},System.Func{``5,``5,``15},System.Func{``6,``6,``15},System.Func{``7,``7,``15},System.Func{``8,``8,``15},System.Func{``9,``9,``15},System.Func{``10,``10,``15},System.Func{``11,``11,``15},System.Func{``12,``12,``15},System.Func{``13,``13,``15},System.Func{``14,``14,``15})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``16(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}},System.Func{``0,``0,``15},System.Func{``1,``1,``15},System.Func{``2,``2,``15},System.Func{``3,``3,``15},System.Func{``4,``4,``15},System.Func{``5,``5,``15},System.Func{``6,``6,``15},System.Func{``7,``7,``15},System.Func{``8,``8,``15},System.Func{``9,``9,``15},System.Func{``10,``10,``15},System.Func{``11,``11,``15},System.Func{``12,``12,``15},System.Func{``13,``13,``15},System.Func{``14,``14,``15})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``16(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Func{``0,``0,``15},System.Func{``1,``1,``15},System.Func{``2,``2,``15},System.Func{``3,``3,``15},System.Func{``4,``4,``15},System.Func{``5,``5,``15},System.Func{``6,``6,``15},System.Func{``7,``7,``15},System.Func{``8,``8,``15},System.Func{``9,``9,``15},System.Func{``10,``10,``15},System.Func{``11,``11,``15},System.Func{``12,``12,``15},System.Func{``13,``13,``15},System.Func{``14,``14,``15},System.Func{System.Int32,System.Int32,``15})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``16(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}},System.Func{``0,``0,``15},System.Func{``1,``1,``15},System.Func{``2,``2,``15},System.Func{``3,``3,``15},System.Func{``4,``4,``15},System.Func{``5,``5,``15},System.Func{``6,``6,``15},System.Func{``7,``7,``15},System.Func{``8,``8,``15},System.Func{``9,``9,``15},System.Func{``10,``10,``15},System.Func{``11,``11,``15},System.Func{``12,``12,``15},System.Func{``13,``13,``15},System.Func{``14,``14,``15},System.Func{System.Int32,System.Int32,``15})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.CompareTo``15(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]どうしの大小関係を判断して返します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Comparer``15">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]を比較するためのIComparer[Choice[...]]を取得します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``16(``0)">
            <summary>
            T1を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``16(``1)">
            <summary>
            T2を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``16(``2)">
            <summary>
            T3を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``16(``3)">
            <summary>
            T4を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``16(``4)">
            <summary>
            T5を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``16(``5)">
            <summary>
            T6を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``16(``6)">
            <summary>
            T7を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``16(``7)">
            <summary>
            T8を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``16(``8)">
            <summary>
            T9を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``16(``9)">
            <summary>
            T10を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``16(``10)">
            <summary>
            T11を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``16(``11)">
            <summary>
            T12を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``16(``12)">
            <summary>
            T13を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``16(``13)">
            <summary>
            T14を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``16(``14)">
            <summary>
            T15を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Create``16(``15)">
            <summary>
            T16を含むChoice[...]オブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``17(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Func{``0,``0,``16},System.Func{``1,``1,``16},System.Func{``2,``2,``16},System.Func{``3,``3,``16},System.Func{``4,``4,``16},System.Func{``5,``5,``16},System.Func{``6,``6,``16},System.Func{``7,``7,``16},System.Func{``8,``8,``16},System.Func{``9,``9,``16},System.Func{``10,``10,``16},System.Func{``11,``11,``16},System.Func{``12,``12,``16},System.Func{``13,``13,``16},System.Func{``14,``14,``16},System.Func{``15,``15,``16})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.TryBinOp``17(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}},System.Func{``0,``0,``16},System.Func{``1,``1,``16},System.Func{``2,``2,``16},System.Func{``3,``3,``16},System.Func{``4,``4,``16},System.Func{``5,``5,``16},System.Func{``6,``6,``16},System.Func{``7,``7,``16},System.Func{``8,``8,``16},System.Func{``9,``9,``16},System.Func{``10,``10,``16},System.Func{``11,``11,``16},System.Func{``12,``12,``16},System.Func{``13,``13,``16},System.Func{``14,``14,``16},System.Func{``15,``15,``16})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算の適用を試みます。
            保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``17(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Func{``0,``0,``16},System.Func{``1,``1,``16},System.Func{``2,``2,``16},System.Func{``3,``3,``16},System.Func{``4,``4,``16},System.Func{``5,``5,``16},System.Func{``6,``6,``16},System.Func{``7,``7,``16},System.Func{``8,``8,``16},System.Func{``9,``9,``16},System.Func{``10,``10,``16},System.Func{``11,``11,``16},System.Func{``12,``12,``16},System.Func{``13,``13,``16},System.Func{``14,``14,``16},System.Func{``15,``15,``16},System.Func{System.Int32,System.Int32,``16})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]に対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.BinOp``17(System.Tuple{LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}},System.Func{``0,``0,``16},System.Func{``1,``1,``16},System.Func{``2,``2,``16},System.Func{``3,``3,``16},System.Func{``4,``4,``16},System.Func{``5,``5,``16},System.Func{``6,``6,``16},System.Func{``7,``7,``16},System.Func{``8,``8,``16},System.Func{``9,``9,``16},System.Func{``10,``10,``16},System.Func{``11,``11,``16},System.Func{``12,``12,``16},System.Func{``13,``13,``16},System.Func{``14,``14,``16},System.Func{``15,``15,``16},System.Func{System.Int32,System.Int32,``16})">
            <summary>
            2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算を適用します。
            保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
            </summary>
        </member>
        <member name="M:LangExt.Choice.CompareTo``16(LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},LangExt.Choice{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]どうしの大小関係を判断して返します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Comparer``16">
            <summary>
            全ての型パラメータがIComparable[T]を実装するChoice[...]を比較するためのIComparer[Choice[...]]を取得します。
            </summary>
        </member>
        <member name="M:LangExt.Choice.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Choice.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="T:LangExt.Comparable">
            <summary>
            IComparable[T]に対する操作を提供します。
            </summary>
        </member>
        <member name="M:LangExt.Comparable.RawCmp``1(``0,``0)">
            <summary>
            null安全にCompareToを呼び出します。
            selfがnullだった場合、otherがnullなら0を、そうでないなら-1を返します。
            これは、nullを最も小さい値として扱うことを意味します。
            この挙動との整合性を取るために、ComparaToに渡されたオブジェクトがnullだった場合は1以上の数を返すように実装してください。
            </summary>
        </member>
        <member name="M:LangExt.Comparable.Cmp``1(``0,``0)">
            <summary>
            null安全にCompareToを呼び出し、結果をCompareResultに変換して返します。
            selfがnullだった場合、otherがnullならEQを、そうでないならLTを返します。
            これは、nullを最も小さい値として扱うことを意味します。
            この挙動との整合性を取るために、ComparaToに渡されたオブジェクトがnullだった場合は1以上の数を返すように実装してください。
            </summary>
        </member>
        <member name="M:LangExt.Comparable.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Comparable.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="T:LangExt.Comparable.CompareResult">
            <summary>
            Cmpの結果です。
            </summary>
        </member>
        <member name="F:LangExt.Comparable.CompareResult.LT">
            <summary>
            左側のオブジェクトが右側のオブジェクトよりも小さいことを表します。
            </summary>
        </member>
        <member name="F:LangExt.Comparable.CompareResult.EQ">
            <summary>
            左側のオブジェクトと右側のオブジェクトが同じ大きさを持つことを表します。
            </summary>
        </member>
        <member name="F:LangExt.Comparable.CompareResult.GT">
            <summary>
            左側のオブジェクトが右側のオブジェクトよりも大きいことを表します。
            </summary>
        </member>
        <member name="M:LangExt.Comparable.CompareResult.OfInt(System.Int32)">
            <summary>
            数値からCompareResultオブジェクトに変換します。
            </summary>
        </member>
        <member name="M:LangExt.Comparable.CompareResult.Match``1(System.Func{``0},System.Func{``0},System.Func{``0})">
            <summary>
            結果に対して場合分けを行います。
            </summary>
        </member>
        <member name="M:LangExt.Comparable.CompareResult.Equals(System.Object)">
            <summary>
            このオブジェクトがobjと等しいかどうかを返します。
            </summary>
        </member>
        <member name="M:LangExt.Comparable.CompareResult.GetHashCode">
            <summary>
            このオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.Comparable.CompareResult.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
        </member>
        <member name="M:LangExt.Comparable.CompareResult.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Comparable.CompareResult.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="T:LangExt.Comparer">
            <summary>
            Comparerに対する操作を提供します。
            </summary>
        </member>
        <member name="M:LangExt.Comparer.Create``1(System.Func{``0,``0,System.Int32})">
            <summary>
            比較用関数を指定して、Comparer[T]を生成します。
            </summary>
        </member>
        <member name="M:LangExt.Comparer.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Comparer.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="T:LangExt.Comparer`1">
            <summary>
            2つのオブジェクトを比較するための関数からIComparer[T]に変換するアダプタークラスです。
            </summary>
        </member>
        <member name="M:LangExt.Comparer`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            2つのオブジェクトを比較する関数を指定してオブジェクトを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Comparer`1.Compare(`0,`0)">
            <summary>
            2つのオブジェクトを比較し、一方が他方より小さいか、等しいか、大きいかを示す値を返します。
            </summary>
        </member>
        <member name="T:LangExt.Enumerable">
            <summary>IEnumerableに対する関数を提供します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unfold``3(System.Tuple{``0,``1},System.Func{``0,``1,LangExt.Option{System.Tuple{``2,``0,``1}}})">
            <summary>
            2要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},``2,System.Func{``2,``0,``1,``2})">
            <summary>
            2要素タプルのIEnumerableの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan1``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Func{``0,``1,``0,``1,System.Tuple{``0,``1}})">
            <summary>
            2要素タプルのIEnumerableの各要素を展開して関数に渡すScan1です。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Map``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Func{``0,``1,``2})">
            <summary>
            2要素タプルのIEnumerableの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.MapWithIndex``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Func{``0,``1,System.Int32,``2})">
            <summary>
            2要素タプルのIEnumerableの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Iter``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Action{``0,``1})">
            <summary>
            2要素タプルのIEnumerableの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.IterWithIndex``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Action{``0,``1,System.Int32})">
            <summary>
            2要素タプルのIEnumerableの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Bind``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Func{``0,``1,System.Collections.Generic.IEnumerable{``2}})">
            <summary>
            2要素タプルのIEnumerableの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.BindWithIndex``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Func{``0,``1,System.Int32,System.Collections.Generic.IEnumerable{``2}})">
            <summary>
            2要素タプルのIEnumerableの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhile``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhile``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhileWithIndex``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Func{``0,``1,System.Int32,System.Boolean})">
            <summary>
            2要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhileWithIndex``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Func{``0,``1,System.Int32,System.Boolean})">
            <summary>
            2要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Span``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのIEnumerableの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Break``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのIEnumerableの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Unfold``4(System.Tuple{``0,``1,``2},System.Func{``0,``1,``2,LangExt.Option{System.Tuple{``3,``0,``1,``2}}})">
            <summary>
            3要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},``3,System.Func{``3,``0,``1,``2,``3})">
            <summary>
            3要素タプルのIEnumerableの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan1``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``0,``1,``2,System.Tuple{``0,``1,``2}})">
            <summary>
            3要素タプルのIEnumerableの各要素を展開して関数に渡すScan1です。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Map``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``3})">
            <summary>
            3要素タプルのIEnumerableの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.MapWithIndex``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Int32,``3})">
            <summary>
            3要素タプルのIEnumerableの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Iter``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Action{``0,``1,``2})">
            <summary>
            3要素タプルのIEnumerableの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.IterWithIndex``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Action{``0,``1,``2,System.Int32})">
            <summary>
            3要素タプルのIEnumerableの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Bind``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}})">
            <summary>
            3要素タプルのIEnumerableの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.BindWithIndex``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Int32,System.Collections.Generic.IEnumerable{``3}})">
            <summary>
            3要素タプルのIEnumerableの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhile``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhile``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhileWithIndex``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Int32,System.Boolean})">
            <summary>
            3要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhileWithIndex``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Int32,System.Boolean})">
            <summary>
            3要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Span``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのIEnumerableの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Break``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのIEnumerableの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Unfold``5(System.Tuple{``0,``1,``2,``3},System.Func{``0,``1,``2,``3,LangExt.Option{System.Tuple{``4,``0,``1,``2,``3}}})">
            <summary>
            4要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}},``4,System.Func{``4,``0,``1,``2,``3,``4})">
            <summary>
            4要素タプルのIEnumerableの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan1``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``0,``1,``2,``3,System.Tuple{``0,``1,``2,``3}})">
            <summary>
            4要素タプルのIEnumerableの各要素を展開して関数に渡すScan1です。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Map``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            4要素タプルのIEnumerableの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.MapWithIndex``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Int32,``4})">
            <summary>
            4要素タプルのIEnumerableの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Iter``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}},System.Action{``0,``1,``2,``3})">
            <summary>
            4要素タプルのIEnumerableの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.IterWithIndex``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}},System.Action{``0,``1,``2,``3,System.Int32})">
            <summary>
            4要素タプルのIEnumerableの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Bind``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Collections.Generic.IEnumerable{``4}})">
            <summary>
            4要素タプルのIEnumerableの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.BindWithIndex``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Int32,System.Collections.Generic.IEnumerable{``4}})">
            <summary>
            4要素タプルのIEnumerableの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhile``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhile``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhileWithIndex``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Int32,System.Boolean})">
            <summary>
            4要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhileWithIndex``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Int32,System.Boolean})">
            <summary>
            4要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Span``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのIEnumerableの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Break``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのIEnumerableの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Unfold``6(System.Tuple{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,``4,LangExt.Option{System.Tuple{``5,``0,``1,``2,``3,``4}}})">
            <summary>
            5要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}},``5,System.Func{``5,``0,``1,``2,``3,``4,``5})">
            <summary>
            5要素タプルのIEnumerableの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan1``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``0,``1,``2,``3,``4,System.Tuple{``0,``1,``2,``3,``4}})">
            <summary>
            5要素タプルのIEnumerableの各要素を展開して関数に渡すScan1です。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Map``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            5要素タプルのIEnumerableの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.MapWithIndex``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Int32,``5})">
            <summary>
            5要素タプルのIEnumerableの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Iter``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}},System.Action{``0,``1,``2,``3,``4})">
            <summary>
            5要素タプルのIEnumerableの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.IterWithIndex``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}},System.Action{``0,``1,``2,``3,``4,System.Int32})">
            <summary>
            5要素タプルのIEnumerableの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Bind``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Collections.Generic.IEnumerable{``5}})">
            <summary>
            5要素タプルのIEnumerableの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.BindWithIndex``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Int32,System.Collections.Generic.IEnumerable{``5}})">
            <summary>
            5要素タプルのIEnumerableの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhile``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhile``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhileWithIndex``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Int32,System.Boolean})">
            <summary>
            5要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhileWithIndex``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Int32,System.Boolean})">
            <summary>
            5要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Span``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのIEnumerableの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Break``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのIEnumerableの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Unfold``7(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``0,``1,``2,``3,``4,``5,LangExt.Option{System.Tuple{``6,``0,``1,``2,``3,``4,``5}}})">
            <summary>
            6要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},``6,System.Func{``6,``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            6要素タプルのIEnumerableの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan1``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``0,``1,``2,``3,``4,``5,System.Tuple{``0,``1,``2,``3,``4,``5}})">
            <summary>
            6要素タプルのIEnumerableの各要素を展開して関数に渡すScan1です。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Map``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            6要素タプルのIEnumerableの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.MapWithIndex``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Int32,``6})">
            <summary>
            6要素タプルのIEnumerableの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Iter``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            6要素タプルのIEnumerableの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.IterWithIndex``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Action{``0,``1,``2,``3,``4,``5,System.Int32})">
            <summary>
            6要素タプルのIEnumerableの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Bind``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Collections.Generic.IEnumerable{``6}})">
            <summary>
            6要素タプルのIEnumerableの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.BindWithIndex``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Int32,System.Collections.Generic.IEnumerable{``6}})">
            <summary>
            6要素タプルのIEnumerableの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhile``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhile``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhileWithIndex``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Int32,System.Boolean})">
            <summary>
            6要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhileWithIndex``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Int32,System.Boolean})">
            <summary>
            6要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Span``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのIEnumerableの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Break``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのIEnumerableの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Unfold``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``1,``2,``3,``4,``5,``6,LangExt.Option{System.Tuple{``7,``0,``1,``2,``3,``4,``5,System.Tuple{``6}}}})">
            <summary>
            7要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},``7,System.Func{``7,``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            7要素タプルのIEnumerableの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan1``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``0,``1,``2,``3,``4,``5,``6,System.Tuple{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            7要素タプルのIEnumerableの各要素を展開して関数に渡すScan1です。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Map``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            7要素タプルのIEnumerableの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.MapWithIndex``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Int32,``7})">
            <summary>
            7要素タプルのIEnumerableの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Iter``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            7要素タプルのIEnumerableの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.IterWithIndex``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Action{``0,``1,``2,``3,``4,``5,``6,System.Int32})">
            <summary>
            7要素タプルのIEnumerableの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Bind``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Collections.Generic.IEnumerable{``7}})">
            <summary>
            7要素タプルのIEnumerableの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.BindWithIndex``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Int32,System.Collections.Generic.IEnumerable{``7}})">
            <summary>
            7要素タプルのIEnumerableの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhile``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhile``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhileWithIndex``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Int32,System.Boolean})">
            <summary>
            7要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhileWithIndex``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Int32,System.Boolean})">
            <summary>
            7要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Span``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのIEnumerableの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Break``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのIEnumerableの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Unfold``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,LangExt.Option{System.Tuple{``8,``0,``1,``2,``3,``4,``5,System.Tuple{``6,``7}}}})">
            <summary>
            8要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan``9(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},``8,System.Func{``8,``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            8要素タプルのIEnumerableの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan1``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``0,``1,``2,``3,``4,``5,``6,``7,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}})">
            <summary>
            8要素タプルのIEnumerableの各要素を展開して関数に渡すScan1です。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Map``9(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            8要素タプルのIEnumerableの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.MapWithIndex``9(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Int32,``8})">
            <summary>
            8要素タプルのIEnumerableの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Iter``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            8要素タプルのIEnumerableの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.IterWithIndex``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,System.Int32})">
            <summary>
            8要素タプルのIEnumerableの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Bind``9(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Collections.Generic.IEnumerable{``8}})">
            <summary>
            8要素タプルのIEnumerableの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.BindWithIndex``9(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Int32,System.Collections.Generic.IEnumerable{``8}})">
            <summary>
            8要素タプルのIEnumerableの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhile``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhile``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhileWithIndex``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Int32,System.Boolean})">
            <summary>
            8要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhileWithIndex``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Int32,System.Boolean})">
            <summary>
            8要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Span``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのIEnumerableの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Break``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのIEnumerableの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Unfold``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,LangExt.Option{System.Tuple{``9,``0,``1,``2,``3,``4,``5,System.Tuple{``6,``7,``8}}}})">
            <summary>
            9要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan``10(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},``9,System.Func{``9,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            9要素タプルのIEnumerableの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Map``10(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            9要素タプルのIEnumerableの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.MapWithIndex``10(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Int32,``9})">
            <summary>
            9要素タプルのIEnumerableの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Iter``9(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            9要素タプルのIEnumerableの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.IterWithIndex``9(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Int32})">
            <summary>
            9要素タプルのIEnumerableの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Bind``10(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Collections.Generic.IEnumerable{``9}})">
            <summary>
            9要素タプルのIEnumerableの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.BindWithIndex``10(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Int32,System.Collections.Generic.IEnumerable{``9}})">
            <summary>
            9要素タプルのIEnumerableの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhile``9(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhile``9(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhileWithIndex``9(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Int32,System.Boolean})">
            <summary>
            9要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhileWithIndex``9(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Int32,System.Boolean})">
            <summary>
            9要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Span``9(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのIEnumerableの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Break``9(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのIEnumerableの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Unfold``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,LangExt.Option{System.Tuple{``10,``0,``1,``2,``3,``4,``5,System.Tuple{``6,``7,``8,``9}}}})">
            <summary>
            10要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan``11(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},``10,System.Func{``10,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            10要素タプルのIEnumerableの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Map``11(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            10要素タプルのIEnumerableの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.MapWithIndex``11(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Int32,``10})">
            <summary>
            10要素タプルのIEnumerableの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Iter``10(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            10要素タプルのIEnumerableの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.IterWithIndex``10(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Int32})">
            <summary>
            10要素タプルのIEnumerableの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Bind``11(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Collections.Generic.IEnumerable{``10}})">
            <summary>
            10要素タプルのIEnumerableの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.BindWithIndex``11(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Int32,System.Collections.Generic.IEnumerable{``10}})">
            <summary>
            10要素タプルのIEnumerableの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhile``10(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhile``10(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhileWithIndex``10(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Int32,System.Boolean})">
            <summary>
            10要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhileWithIndex``10(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Int32,System.Boolean})">
            <summary>
            10要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Span``10(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのIEnumerableの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Break``10(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのIEnumerableの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Unfold``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,LangExt.Option{System.Tuple{``11,``0,``1,``2,``3,``4,``5,System.Tuple{``6,``7,``8,``9,``10}}}})">
            <summary>
            11要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan``12(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},``11,System.Func{``11,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            11要素タプルのIEnumerableの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Map``12(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            11要素タプルのIEnumerableの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.MapWithIndex``12(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Int32,``11})">
            <summary>
            11要素タプルのIEnumerableの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Iter``11(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            11要素タプルのIEnumerableの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.IterWithIndex``11(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Int32})">
            <summary>
            11要素タプルのIEnumerableの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Bind``12(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Collections.Generic.IEnumerable{``11}})">
            <summary>
            11要素タプルのIEnumerableの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.BindWithIndex``12(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Int32,System.Collections.Generic.IEnumerable{``11}})">
            <summary>
            11要素タプルのIEnumerableの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhile``11(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhile``11(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhileWithIndex``11(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Int32,System.Boolean})">
            <summary>
            11要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhileWithIndex``11(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Int32,System.Boolean})">
            <summary>
            11要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Span``11(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのIEnumerableの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Break``11(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのIEnumerableの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Unfold``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,LangExt.Option{System.Tuple{``12,``0,``1,``2,``3,``4,``5,System.Tuple{``6,``7,``8,``9,``10,``11}}}})">
            <summary>
            12要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan``13(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},``12,System.Func{``12,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            12要素タプルのIEnumerableの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Map``13(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            12要素タプルのIEnumerableの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.MapWithIndex``13(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Int32,``12})">
            <summary>
            12要素タプルのIEnumerableの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Iter``12(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            12要素タプルのIEnumerableの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.IterWithIndex``12(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Int32})">
            <summary>
            12要素タプルのIEnumerableの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Bind``13(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Collections.Generic.IEnumerable{``12}})">
            <summary>
            12要素タプルのIEnumerableの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.BindWithIndex``13(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Int32,System.Collections.Generic.IEnumerable{``12}})">
            <summary>
            12要素タプルのIEnumerableの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhile``12(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhile``12(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhileWithIndex``12(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Int32,System.Boolean})">
            <summary>
            12要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhileWithIndex``12(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Int32,System.Boolean})">
            <summary>
            12要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Span``12(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのIEnumerableの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Break``12(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのIEnumerableの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Unfold``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,LangExt.Option{System.Tuple{``13,``0,``1,``2,``3,``4,``5,System.Tuple{``6,``7,``8,``9,``10,``11,``12}}}})">
            <summary>
            13要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan``14(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},``13,System.Func{``13,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            13要素タプルのIEnumerableの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Map``14(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            13要素タプルのIEnumerableの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.MapWithIndex``14(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Int32,``13})">
            <summary>
            13要素タプルのIEnumerableの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Iter``13(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            13要素タプルのIEnumerableの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.IterWithIndex``13(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Int32})">
            <summary>
            13要素タプルのIEnumerableの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Bind``14(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Collections.Generic.IEnumerable{``13}})">
            <summary>
            13要素タプルのIEnumerableの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.BindWithIndex``14(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Int32,System.Collections.Generic.IEnumerable{``13}})">
            <summary>
            13要素タプルのIEnumerableの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhile``13(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhile``13(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhileWithIndex``13(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Int32,System.Boolean})">
            <summary>
            13要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhileWithIndex``13(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Int32,System.Boolean})">
            <summary>
            13要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Span``13(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのIEnumerableの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Break``13(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのIEnumerableの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Unfold``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,LangExt.Option{System.Tuple{``14,``0,``1,``2,``3,``4,``5,System.Tuple{``6,``7,``8,``9,``10,``11,``12,System.Tuple{``13}}}}})">
            <summary>
            14要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan``15(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},``14,System.Func{``14,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            14要素タプルのIEnumerableの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Map``15(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            14要素タプルのIEnumerableの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.MapWithIndex``15(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Int32,``14})">
            <summary>
            14要素タプルのIEnumerableの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Iter``14(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            14要素タプルのIEnumerableの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.IterWithIndex``14(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Int32})">
            <summary>
            14要素タプルのIEnumerableの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Bind``15(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Collections.Generic.IEnumerable{``14}})">
            <summary>
            14要素タプルのIEnumerableの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.BindWithIndex``15(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Int32,System.Collections.Generic.IEnumerable{``14}})">
            <summary>
            14要素タプルのIEnumerableの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhile``14(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhile``14(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhileWithIndex``14(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Int32,System.Boolean})">
            <summary>
            14要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhileWithIndex``14(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Int32,System.Boolean})">
            <summary>
            14要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Span``14(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのIEnumerableの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Break``14(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのIEnumerableの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Unfold``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,LangExt.Option{System.Tuple{``15,``0,``1,``2,``3,``4,``5,System.Tuple{``6,``7,``8,``9,``10,``11,``12,System.Tuple{``13,``14}}}}})">
            <summary>
            15要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan``16(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},``15,System.Func{``15,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            15要素タプルのIEnumerableの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Map``16(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            15要素タプルのIEnumerableの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.MapWithIndex``16(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Int32,``15})">
            <summary>
            15要素タプルのIEnumerableの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Iter``15(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            15要素タプルのIEnumerableの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.IterWithIndex``15(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Int32})">
            <summary>
            15要素タプルのIEnumerableの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Bind``16(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Collections.Generic.IEnumerable{``15}})">
            <summary>
            15要素タプルのIEnumerableの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.BindWithIndex``16(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Int32,System.Collections.Generic.IEnumerable{``15}})">
            <summary>
            15要素タプルのIEnumerableの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhile``15(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhile``15(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhileWithIndex``15(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Int32,System.Boolean})">
            <summary>
            15要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhileWithIndex``15(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Int32,System.Boolean})">
            <summary>
            15要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Span``15(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのIEnumerableの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Break``15(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのIEnumerableの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Map``17(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            16要素タプルのIEnumerableの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Iter``16(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            16要素タプルのIEnumerableの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Bind``17(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Collections.Generic.IEnumerable{``16}})">
            <summary>
            16要素タプルのIEnumerableの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhile``16(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのIEnumerableの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhile``16(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのIEnumerableの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Span``16(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのIEnumerableの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Break``16(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのIEnumerableの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>2個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>2個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
            <summary>ZipされたIEnumerableを元に戻し、2個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``1,``2,``3})">
            <summary>3個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
            <summary>3個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}})">
            <summary>ZipされたIEnumerableを元に戻し、3個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>4個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3})">
            <summary>4個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}})">
            <summary>ZipされたIEnumerableを元に戻し、4個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``6(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>5個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4})">
            <summary>5個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}})">
            <summary>ZipされたIEnumerableを元に戻し、5個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``7(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>6個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``6(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5})">
            <summary>6個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}})">
            <summary>ZipされたIEnumerableを元に戻し、6個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``8(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>7個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``7(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6})">
            <summary>7個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>ZipされたIEnumerableを元に戻し、7個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``9(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>8個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``8(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7})">
            <summary>8個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}})">
            <summary>ZipされたIEnumerableを元に戻し、8個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``10(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>9個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``9(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8})">
            <summary>9個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``9(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}})">
            <summary>ZipされたIEnumerableを元に戻し、9個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``11(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>10個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``10(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9})">
            <summary>10個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``10(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}})">
            <summary>ZipされたIEnumerableを元に戻し、10個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``12(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>11個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``11(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10})">
            <summary>11個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``11(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}})">
            <summary>ZipされたIEnumerableを元に戻し、11個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``13(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>12個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``12(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11})">
            <summary>12個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``12(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}})">
            <summary>ZipされたIEnumerableを元に戻し、12個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``14(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>13個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``13(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12})">
            <summary>13個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``13(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}})">
            <summary>ZipされたIEnumerableを元に戻し、13個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``15(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Collections.Generic.IEnumerable{``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>14個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``14(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Collections.Generic.IEnumerable{``13})">
            <summary>14個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``14(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}})">
            <summary>ZipされたIEnumerableを元に戻し、14個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``16(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Collections.Generic.IEnumerable{``13},System.Collections.Generic.IEnumerable{``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>15個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``15(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Collections.Generic.IEnumerable{``13},System.Collections.Generic.IEnumerable{``14})">
            <summary>15個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``15(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}})">
            <summary>ZipされたIEnumerableを元に戻し、15個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``17(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Collections.Generic.IEnumerable{``13},System.Collections.Generic.IEnumerable{``14},System.Collections.Generic.IEnumerable{``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>16個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``16(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Collections.Generic.IEnumerable{``13},System.Collections.Generic.IEnumerable{``14},System.Collections.Generic.IEnumerable{``15})">
            <summary>16個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``16(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}})">
            <summary>ZipされたIEnumerableを元に戻し、16個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>IEnumerableに対して、0から始まる整数列をZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
            <summary>2要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}})">
            <summary>3要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}})">
            <summary>4要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}})">
            <summary>5要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}})">
            <summary>6要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>7要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}})">
            <summary>8要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``9(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}})">
            <summary>9要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``10(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}})">
            <summary>10要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``11(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}})">
            <summary>11要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``12(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}})">
            <summary>12要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``13(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}})">
            <summary>13要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``14(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}})">
            <summary>14要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``15(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}})">
            <summary>15要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ToSeq``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            IEnumerable[T]からシーケンスに変換します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.InitInfinite``1(System.Func{System.Int32,``0})">
            <summary>
            fを元に無限に続くIEnumerableを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.RepeatInfinite``1(``0)">
            <summary>
            指定した要素を含む無限に続くIEnumerableを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Unfold``2(``0,System.Func{``0,LangExt.Option{System.Tuple{``1,``0}}})">
            <summary>
            初期状態からfによって計算されたIEnumerableを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TryGet``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            IEnumerableの指定番目の要素を返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Map``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            IEnumerableのすべての要素に対してfを適用したIEnumerableを生成して返します。
            標準クエリ演算子のSelectに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.MapWithIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            IEnumerableのすべての要素に対してfを適用したIEnumerableを生成して返します。
            fには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のSelectに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Iter``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Enumerableのすべての要素に対してactを実行します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.IterF``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,LangExt.Unit})">
            <summary>
            Enumerableのすべての要素に対してactを実行します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.IterWithIndex``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Enumerableのすべての要素に対してactを実行します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.IterFWithIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,LangExt.Unit})">
            <summary>
            Enumerableのすべての要素に対してactを実行します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Bind``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            IEnumerableの各要素を順番にfの引数に対して渡し、fから返された各IEnumerableを平坦化したIEnumerableを生成して返します。
            標準クエリ演算子のSelectManyに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.BindWithIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            IEnumerableの各要素を順番にfの引数に対して渡し、fから返された各IEnumerableを平坦化したIEnumerableを生成して返します。
            fには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のSelectManyに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Cast``1(System.Collections.IEnumerable)">
            <summary>
            非ジェネリック型のIEnumerableを、IEnumerable[T]に変換します。
            標準クエリ演算子のCastに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            IEnumerableに別のIEnumerableを連結したIEnumerableを生成して返します。
            標準クエリ演算子のConcatに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            ネストしたIEnumerableのネストを一段取り除きます。
            例えば、IEnumerable[IEnumerable[T]]をIEnumerable[T]に変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            IEnumerableの先頭からn個の要素をスキップしたIEnumerableを生成して返します。
            nが0以下の場合、入力のIEnumerableがそのまま返されます。
            nがIEnumerableの要素の個数よりも大きい場合、空のIEnumerableが返されます。
            標準クエリ演算子のSkipに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            IEnumerableの先頭からn個の要素を取り出したIEnumerableを生成して返します。
            nが0以下の場合、空のIEnumerableが返されます。
            nがIEnumerableの要素の個数よりも大きい場合、入力のIEnumerableがそのまま返されます。
            標準クエリ演算子のTakeに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            IEnumerableの先頭からpredを満たす要素をスキップしたIEnumerableを生成して返します。
            標準クエリ演算子のSkipWhileに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhileWithIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            IEnumerableの先頭からpredを満たす要素をスキップしたIEnumerableを生成して返します。
            predには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のSkipWhileに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            IEnumerableの先頭からpredを満たす要素を取り出したIEnumerableを生成して返します。
            標準クエリ演算子のTakeWhileに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhileWithIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            IEnumerableの先頭からpredを満たす要素を取り出したIEnumerableを生成して返します。
            predには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のTakeWhileに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Cache``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            IEnumerableを、走査した要素をキャッシュするIEnumerableに変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SplitAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            指定した位置でIEnumerableを分割します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Span``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            TakeWhileの結果とSkipWhileの結果の両方を同時に取得します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Break``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            TakeWhileの結果とSkipWhileの結果の両方を同時に取得します。
            Spanと異なり、predの否定が渡されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Windowed``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            IEnumerableから取得された要素のスライド式ウィンドウを生成するIEnumerableを返します。
            各ウィンドウは、新しい配列として返されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Windowed3``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            IEnumerableから取得された要素のサイズ3のスライド式ウィンドウを生成するIEnumerableを返します。
            各ウィンドウは、3要素のタプルとして返されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Pairwise``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            IEnumerableから取得された要素のサイズ2のスライド式ウィンドウを生成するIEnumerableを返します。
            各ウィンドウは、2要素のタプルとして返されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            IEnumerableの先頭から畳み込みを行い、各ステップの結果をIEnumerableとして返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan1``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            IEnumerableの先頭から畳み込みを行い、各ステップの結果をIEnumerableとして返します。
            Scanと異なり、初期値にはIEnumerableの先頭要素が使われます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="T:LangExt.Func">
            <summary>Funcデリゲートに対する関数を提供します。</summary>
        </member>
        <member name="M:LangExt.Func.ToFunctional``3(System.Func{``0,``1,``2})">
            <summary>
            第一引数に操作対象が来るような関数を、カリー化しつつ第一引数を最後の位置に持って行きます。
            これにより、オブジェクト指向スタイルの関数に対する部分適用を容易にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToObjective``3(System.Func{``0,System.Func{``1,``2}})">
            <summary>
            最終引数に操作対象が来るようにカリー化された関数を、アンカリー化しつつ最後の引数を第一引数の位置に持って行きます。
            これにより、C#上でより自然に関数型スタイルの関数を扱えるようにします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToFunctional``4(System.Func{``0,``1,``2,``3})">
            <summary>
            第一引数に操作対象が来るような関数を、カリー化しつつ第一引数を最後の位置に持って行きます。
            これにより、オブジェクト指向スタイルの関数に対する部分適用を容易にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToObjective``4(System.Func{``0,System.Func{``1,System.Func{``2,``3}}})">
            <summary>
            最終引数に操作対象が来るようにカリー化された関数を、アンカリー化しつつ最後の引数を第一引数の位置に持って行きます。
            これにより、C#上でより自然に関数型スタイルの関数を扱えるようにします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToFunctional``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            第一引数に操作対象が来るような関数を、カリー化しつつ第一引数を最後の位置に持って行きます。
            これにより、オブジェクト指向スタイルの関数に対する部分適用を容易にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToObjective``5(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,``4}}}})">
            <summary>
            最終引数に操作対象が来るようにカリー化された関数を、アンカリー化しつつ最後の引数を第一引数の位置に持って行きます。
            これにより、C#上でより自然に関数型スタイルの関数を扱えるようにします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToFunctional``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            第一引数に操作対象が来るような関数を、カリー化しつつ第一引数を最後の位置に持って行きます。
            これにより、オブジェクト指向スタイルの関数に対する部分適用を容易にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToObjective``6(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,``5}}}}})">
            <summary>
            最終引数に操作対象が来るようにカリー化された関数を、アンカリー化しつつ最後の引数を第一引数の位置に持って行きます。
            これにより、C#上でより自然に関数型スタイルの関数を扱えるようにします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToFunctional``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            第一引数に操作対象が来るような関数を、カリー化しつつ第一引数を最後の位置に持って行きます。
            これにより、オブジェクト指向スタイルの関数に対する部分適用を容易にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToObjective``7(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,``6}}}}}})">
            <summary>
            最終引数に操作対象が来るようにカリー化された関数を、アンカリー化しつつ最後の引数を第一引数の位置に持って行きます。
            これにより、C#上でより自然に関数型スタイルの関数を扱えるようにします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToFunctional``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            第一引数に操作対象が来るような関数を、カリー化しつつ第一引数を最後の位置に持って行きます。
            これにより、オブジェクト指向スタイルの関数に対する部分適用を容易にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToObjective``8(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,``7}}}}}}})">
            <summary>
            最終引数に操作対象が来るようにカリー化された関数を、アンカリー化しつつ最後の引数を第一引数の位置に持って行きます。
            これにより、C#上でより自然に関数型スタイルの関数を扱えるようにします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToFunctional``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            第一引数に操作対象が来るような関数を、カリー化しつつ第一引数を最後の位置に持って行きます。
            これにより、オブジェクト指向スタイルの関数に対する部分適用を容易にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToObjective``9(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,``8}}}}}}}})">
            <summary>
            最終引数に操作対象が来るようにカリー化された関数を、アンカリー化しつつ最後の引数を第一引数の位置に持って行きます。
            これにより、C#上でより自然に関数型スタイルの関数を扱えるようにします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToFunctional``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            第一引数に操作対象が来るような関数を、カリー化しつつ第一引数を最後の位置に持って行きます。
            これにより、オブジェクト指向スタイルの関数に対する部分適用を容易にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToObjective``10(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,``9}}}}}}}}})">
            <summary>
            最終引数に操作対象が来るようにカリー化された関数を、アンカリー化しつつ最後の引数を第一引数の位置に持って行きます。
            これにより、C#上でより自然に関数型スタイルの関数を扱えるようにします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToFunctional``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            第一引数に操作対象が来るような関数を、カリー化しつつ第一引数を最後の位置に持って行きます。
            これにより、オブジェクト指向スタイルの関数に対する部分適用を容易にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToObjective``11(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,``10}}}}}}}}}})">
            <summary>
            最終引数に操作対象が来るようにカリー化された関数を、アンカリー化しつつ最後の引数を第一引数の位置に持って行きます。
            これにより、C#上でより自然に関数型スタイルの関数を扱えるようにします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToFunctional``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            第一引数に操作対象が来るような関数を、カリー化しつつ第一引数を最後の位置に持って行きます。
            これにより、オブジェクト指向スタイルの関数に対する部分適用を容易にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToObjective``12(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,``11}}}}}}}}}}})">
            <summary>
            最終引数に操作対象が来るようにカリー化された関数を、アンカリー化しつつ最後の引数を第一引数の位置に持って行きます。
            これにより、C#上でより自然に関数型スタイルの関数を扱えるようにします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToFunctional``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            第一引数に操作対象が来るような関数を、カリー化しつつ第一引数を最後の位置に持って行きます。
            これにより、オブジェクト指向スタイルの関数に対する部分適用を容易にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToObjective``13(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,``12}}}}}}}}}}}})">
            <summary>
            最終引数に操作対象が来るようにカリー化された関数を、アンカリー化しつつ最後の引数を第一引数の位置に持って行きます。
            これにより、C#上でより自然に関数型スタイルの関数を扱えるようにします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToFunctional``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            第一引数に操作対象が来るような関数を、カリー化しつつ第一引数を最後の位置に持って行きます。
            これにより、オブジェクト指向スタイルの関数に対する部分適用を容易にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToObjective``14(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,``13}}}}}}}}}}}}})">
            <summary>
            最終引数に操作対象が来るようにカリー化された関数を、アンカリー化しつつ最後の引数を第一引数の位置に持って行きます。
            これにより、C#上でより自然に関数型スタイルの関数を扱えるようにします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToFunctional``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            第一引数に操作対象が来るような関数を、カリー化しつつ第一引数を最後の位置に持って行きます。
            これにより、オブジェクト指向スタイルの関数に対する部分適用を容易にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToObjective``15(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,``14}}}}}}}}}}}}}})">
            <summary>
            最終引数に操作対象が来るようにカリー化された関数を、アンカリー化しつつ最後の引数を第一引数の位置に持って行きます。
            これにより、C#上でより自然に関数型スタイルの関数を扱えるようにします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToFunctional``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            第一引数に操作対象が来るような関数を、カリー化しつつ第一引数を最後の位置に持って行きます。
            これにより、オブジェクト指向スタイルの関数に対する部分適用を容易にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToObjective``16(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,System.Func{``14,``15}}}}}}}}}}}}}}})">
            <summary>
            最終引数に操作対象が来るようにカリー化された関数を、アンカリー化しつつ最後の引数を第一引数の位置に持って行きます。
            これにより、C#上でより自然に関数型スタイルの関数を扱えるようにします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToFunctional``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            第一引数に操作対象が来るような関数を、カリー化しつつ第一引数を最後の位置に持って行きます。
            これにより、オブジェクト指向スタイルの関数に対する部分適用を容易にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.ToObjective``17(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,System.Func{``14,System.Func{``15,``16}}}}}}}}}}}}}}}})">
            <summary>
            最終引数に操作対象が来るようにカリー化された関数を、アンカリー化しつつ最後の引数を第一引数の位置に持って行きます。
            これにより、C#上でより自然に関数型スタイルの関数を扱えるようにします。
            </summary>
        </member>
        <member name="M:LangExt.Func.Create``1(System.Func{``0})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Func.Create``2(System.Func{``0,``1})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Func.Create``3(System.Func{``0,``1,``2})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Func.Create``4(System.Func{``0,``1,``2,``3})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Func.Create``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Func.Create``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Func.Create``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Func.Create``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Func.Create``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Func.Create``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Func.Create``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Func.Create``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Func.Create``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Func.Create``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Func.Create``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Func.Create``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Func.Create``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            ラムダ式をvarで受け取ることが出来ないことを緩和するための関数です。
            引数にはラムダ式を直接渡すことを想定しています。
            </summary>
        </member>
        <member name="M:LangExt.Func.Id``1(``0)">
            <summary>Id関数です。</summary>
        </member>
        <member name="M:LangExt.Func.Flip``3(System.Func{``0,``1,``2})">
            <summary>2引数関数の引数の順番を入れ替えます。</summary>
        </member>
        <member name="M:LangExt.Func.Flip``3(System.Func{``0,System.Func{``1,``2}})">
            <summary>カリー化関数の引数の順番を入れ替えます。</summary>
        </member>
        <member name="M:LangExt.Func.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Func.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Func.Chain``3(System.Func{``0,``1},System.Func{``1,``2})">
            <summary>
            複数の関数を合成して一つの関数にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.Chain``4(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3})">
            <summary>
            複数の関数を合成して一つの関数にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.Chain``5(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4})">
            <summary>
            複数の関数を合成して一つの関数にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.Chain``6(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Func{``4,``5})">
            <summary>
            複数の関数を合成して一つの関数にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.Chain``7(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Func{``4,``5},System.Func{``5,``6})">
            <summary>
            複数の関数を合成して一つの関数にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.Chain``8(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Func{``4,``5},System.Func{``5,``6},System.Func{``6,``7})">
            <summary>
            複数の関数を合成して一つの関数にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.Chain``9(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Func{``4,``5},System.Func{``5,``6},System.Func{``6,``7},System.Func{``7,``8})">
            <summary>
            複数の関数を合成して一つの関数にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.Chain``10(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Func{``4,``5},System.Func{``5,``6},System.Func{``6,``7},System.Func{``7,``8},System.Func{``8,``9})">
            <summary>
            複数の関数を合成して一つの関数にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.Chain``11(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Func{``4,``5},System.Func{``5,``6},System.Func{``6,``7},System.Func{``7,``8},System.Func{``8,``9},System.Func{``9,``10})">
            <summary>
            複数の関数を合成して一つの関数にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.Chain``12(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Func{``4,``5},System.Func{``5,``6},System.Func{``6,``7},System.Func{``7,``8},System.Func{``8,``9},System.Func{``9,``10},System.Func{``10,``11})">
            <summary>
            複数の関数を合成して一つの関数にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.Chain``13(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Func{``4,``5},System.Func{``5,``6},System.Func{``6,``7},System.Func{``7,``8},System.Func{``8,``9},System.Func{``9,``10},System.Func{``10,``11},System.Func{``11,``12})">
            <summary>
            複数の関数を合成して一つの関数にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.Chain``14(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Func{``4,``5},System.Func{``5,``6},System.Func{``6,``7},System.Func{``7,``8},System.Func{``8,``9},System.Func{``9,``10},System.Func{``10,``11},System.Func{``11,``12},System.Func{``12,``13})">
            <summary>
            複数の関数を合成して一つの関数にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.Chain``15(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Func{``4,``5},System.Func{``5,``6},System.Func{``6,``7},System.Func{``7,``8},System.Func{``8,``9},System.Func{``9,``10},System.Func{``10,``11},System.Func{``11,``12},System.Func{``12,``13},System.Func{``13,``14})">
            <summary>
            複数の関数を合成して一つの関数にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.Chain``16(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Func{``4,``5},System.Func{``5,``6},System.Func{``6,``7},System.Func{``7,``8},System.Func{``8,``9},System.Func{``9,``10},System.Func{``10,``11},System.Func{``11,``12},System.Func{``12,``13},System.Func{``13,``14},System.Func{``14,``15})">
            <summary>
            複数の関数を合成して一つの関数にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.Chain``17(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Func{``4,``5},System.Func{``5,``6},System.Func{``6,``7},System.Func{``7,``8},System.Func{``8,``9},System.Func{``9,``10},System.Func{``10,``11},System.Func{``11,``12},System.Func{``12,``13},System.Func{``13,``14},System.Func{``14,``15},System.Func{``15,``16})">
            <summary>
            複数の関数を合成して一つの関数にします。
            </summary>
        </member>
        <member name="M:LangExt.Func.Curried``3(System.Func{``0,``1,``2})">
            <summary>2つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``3(System.Func{``0,``1,``2})">
            <summary>2つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``3(System.Func{System.Tuple{``0,``1},``2})">
            <summary>2要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``3(System.Func{System.Tuple{``0,``1},``2})">
            <summary>2要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``3(System.Func{``0,``1,``2})">
            <summary>2つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``3(System.Func{``0,``1,``2})">
            <summary>2つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``3(System.Func{``0,System.Func{``1,``2}})">
            <summary>2つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``3(System.Func{``0,System.Func{``1,``2}})">
            <summary>2つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``3(System.Func{System.Tuple{``0,``1},``2})">
            <summary>2要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``3(System.Func{System.Tuple{``0,``1},``2})">
            <summary>2要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``3(System.Func{``0,System.Func{``1,``2}})">
            <summary>2つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``3(System.Func{``0,System.Func{``1,``2}})">
            <summary>2つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``4(System.Func{``0,``1,``2,``3})">
            <summary>3つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``4(System.Func{``0,``1,``2,``3})">
            <summary>3つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``4(System.Func{System.Tuple{``0,``1,``2},``3})">
            <summary>3要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``4(System.Func{System.Tuple{``0,``1,``2},``3})">
            <summary>3要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``4(System.Func{``0,``1,``2,``3})">
            <summary>3つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``4(System.Func{``0,``1,``2,``3})">
            <summary>3つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``4(System.Func{``0,System.Func{``1,System.Func{``2,``3}}})">
            <summary>3つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``4(System.Func{``0,System.Func{``1,System.Func{``2,``3}}})">
            <summary>3つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``4(System.Func{System.Tuple{``0,``1,``2},``3})">
            <summary>3要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``4(System.Func{System.Tuple{``0,``1,``2},``3})">
            <summary>3要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``4(System.Func{``0,System.Func{``1,System.Func{``2,``3}}})">
            <summary>3つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``4(System.Func{``0,System.Func{``1,System.Func{``2,``3}}})">
            <summary>3つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>4つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>4つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``5(System.Func{System.Tuple{``0,``1,``2,``3},``4})">
            <summary>4要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``5(System.Func{System.Tuple{``0,``1,``2,``3},``4})">
            <summary>4要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>4つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>4つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``5(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,``4}}}})">
            <summary>4つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``5(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,``4}}}})">
            <summary>4つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``5(System.Func{System.Tuple{``0,``1,``2,``3},``4})">
            <summary>4要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``5(System.Func{System.Tuple{``0,``1,``2,``3},``4})">
            <summary>4要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``5(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,``4}}}})">
            <summary>4つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``5(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,``4}}}})">
            <summary>4つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>5つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>5つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``6(System.Func{System.Tuple{``0,``1,``2,``3,``4},``5})">
            <summary>5要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``6(System.Func{System.Tuple{``0,``1,``2,``3,``4},``5})">
            <summary>5要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>5つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>5つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``6(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,``5}}}}})">
            <summary>5つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``6(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,``5}}}}})">
            <summary>5つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``6(System.Func{System.Tuple{``0,``1,``2,``3,``4},``5})">
            <summary>5要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``6(System.Func{System.Tuple{``0,``1,``2,``3,``4},``5})">
            <summary>5要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``6(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,``5}}}}})">
            <summary>5つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``6(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,``5}}}}})">
            <summary>5つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>6つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>6つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``7(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5},``6})">
            <summary>6要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``7(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5},``6})">
            <summary>6要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>6つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>6つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``7(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,``6}}}}}})">
            <summary>6つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``7(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,``6}}}}}})">
            <summary>6つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``7(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5},``6})">
            <summary>6要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``7(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5},``6})">
            <summary>6要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``7(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,``6}}}}}})">
            <summary>6つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``7(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,``6}}}}}})">
            <summary>6つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>7つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>7つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``8(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7})">
            <summary>7要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``8(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7})">
            <summary>7要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>7つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>7つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``8(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,``7}}}}}}})">
            <summary>7つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``8(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,``7}}}}}}})">
            <summary>7つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``8(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7})">
            <summary>7要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``8(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7})">
            <summary>7要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``8(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,``7}}}}}}})">
            <summary>7つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``8(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,``7}}}}}}})">
            <summary>7つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>8つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>8つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``9(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8})">
            <summary>8要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``9(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8})">
            <summary>8要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>8つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>8つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``9(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,``8}}}}}}}})">
            <summary>8つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``9(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,``8}}}}}}}})">
            <summary>8つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``9(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8})">
            <summary>8要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``9(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8})">
            <summary>8要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``9(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,``8}}}}}}}})">
            <summary>8つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``9(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,``8}}}}}}}})">
            <summary>8つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>9つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>9つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``10(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9})">
            <summary>9要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``10(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9})">
            <summary>9要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>9つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>9つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``10(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,``9}}}}}}}}})">
            <summary>9つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``10(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,``9}}}}}}}}})">
            <summary>9つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``10(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9})">
            <summary>9要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``10(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9})">
            <summary>9要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``10(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,``9}}}}}}}}})">
            <summary>9つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``10(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,``9}}}}}}}}})">
            <summary>9つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>10つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>10つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``11(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10})">
            <summary>10要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``11(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10})">
            <summary>10要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>10つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>10つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``11(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,``10}}}}}}}}}})">
            <summary>10つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``11(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,``10}}}}}}}}}})">
            <summary>10つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``11(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10})">
            <summary>10要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``11(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10})">
            <summary>10要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``11(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,``10}}}}}}}}}})">
            <summary>10つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``11(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,``10}}}}}}}}}})">
            <summary>10つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>11つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>11つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``12(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11})">
            <summary>11要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``12(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11})">
            <summary>11要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>11つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>11つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``12(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,``11}}}}}}}}}}})">
            <summary>11つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``12(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,``11}}}}}}}}}}})">
            <summary>11つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``12(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11})">
            <summary>11要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``12(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11})">
            <summary>11要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``12(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,``11}}}}}}}}}}})">
            <summary>11つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``12(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,``11}}}}}}}}}}})">
            <summary>11つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>12つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>12つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``13(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12})">
            <summary>12要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``13(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12})">
            <summary>12要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>12つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>12つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``13(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,``12}}}}}}}}}}}})">
            <summary>12つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``13(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,``12}}}}}}}}}}}})">
            <summary>12つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``13(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12})">
            <summary>12要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``13(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12})">
            <summary>12要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``13(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,``12}}}}}}}}}}}})">
            <summary>12つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``13(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,``12}}}}}}}}}}}})">
            <summary>12つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>13つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>13つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``14(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13})">
            <summary>13要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``14(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13})">
            <summary>13要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>13つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>13つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``14(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,``13}}}}}}}}}}}}})">
            <summary>13つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``14(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,``13}}}}}}}}}}}}})">
            <summary>13つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``14(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13})">
            <summary>13要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``14(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13})">
            <summary>13要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``14(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,``13}}}}}}}}}}}}})">
            <summary>13つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``14(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,``13}}}}}}}}}}}}})">
            <summary>13つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>14つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>14つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``15(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14})">
            <summary>14要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``15(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14})">
            <summary>14要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>14つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>14つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``15(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,``14}}}}}}}}}}}}}})">
            <summary>14つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``15(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,``14}}}}}}}}}}}}}})">
            <summary>14つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``15(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14})">
            <summary>14要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``15(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14})">
            <summary>14要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``15(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,``14}}}}}}}}}}}}}})">
            <summary>14つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``15(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,``14}}}}}}}}}}}}}})">
            <summary>14つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>15つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>15つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``16(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15})">
            <summary>15要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``16(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15})">
            <summary>15要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>15つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>15つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``16(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,System.Func{``14,``15}}}}}}}}}}}}}}})">
            <summary>15つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``16(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,System.Func{``14,``15}}}}}}}}}}}}}}})">
            <summary>15つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``16(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15})">
            <summary>15要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``16(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15})">
            <summary>15要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``16(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,System.Func{``14,``15}}}}}}}}}}}}}}})">
            <summary>15つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``16(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,System.Func{``14,``15}}}}}}}}}}}}}}})">
            <summary>15つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>16つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>16つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``17(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``16})">
            <summary>16要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``17(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``16})">
            <summary>16要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>16つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>16つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``17(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,System.Func{``14,System.Func{``15,``16}}}}}}}}}}}}}}}})">
            <summary>16つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``17(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,System.Func{``14,System.Func{``15,``16}}}}}}}}}}}}}}}})">
            <summary>16つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``17(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``16})">
            <summary>16要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``17(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``16})">
            <summary>16要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``17(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,System.Func{``14,System.Func{``15,``16}}}}}}}}}}}}}}}})">
            <summary>16つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``17(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,System.Func{``14,System.Func{``15,``16}}}}}}}}}}}}}}}})">
            <summary>16つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``1(System.Func{``0})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``1(System.Func{``0})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``1(System.Func{System.Nullable{``0}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``1(System.Func{``0})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``1(System.Func{System.Nullable{``0}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``2(System.Func{``0,``1})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``2(System.Func{``0,``1})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``2(System.Func{``0,System.Nullable{``1}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``2(System.Func{``0,``1})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``2(System.Func{``0,System.Nullable{``1}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``3(System.Func{``0,``1,``2})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``3(System.Func{``0,``1,``2})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``3(System.Func{``0,``1,System.Nullable{``2}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``3(System.Func{``0,``1,``2})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``3(System.Func{``0,``1,System.Nullable{``2}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``4(System.Func{``0,``1,``2,``3})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``4(System.Func{``0,``1,``2,``3})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``4(System.Func{``0,``1,``2,System.Nullable{``3}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``4(System.Func{``0,``1,``2,``3})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``4(System.Func{``0,``1,``2,System.Nullable{``3}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``5(System.Func{``0,``1,``2,``3,System.Nullable{``4}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``5(System.Func{``0,``1,``2,``3,System.Nullable{``4}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``6(System.Func{``0,``1,``2,``3,``4,System.Nullable{``5}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``6(System.Func{``0,``1,``2,``3,``4,System.Nullable{``5}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``7(System.Func{``0,``1,``2,``3,``4,``5,System.Nullable{``6}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``7(System.Func{``0,``1,``2,``3,``4,``5,System.Nullable{``6}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Nullable{``7}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Nullable{``7}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Nullable{``8}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Nullable{``8}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Nullable{``9}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Nullable{``9}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Nullable{``10}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Nullable{``10}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Nullable{``11}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Nullable{``11}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Nullable{``12}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Nullable{``12}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Nullable{``13}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Nullable{``13}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Nullable{``14}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Nullable{``14}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Nullable{``15}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Nullable{``15}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Nullable{``16}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Nullable{``16}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``1(System.Func{``0})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``1(System.Func{``0})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``1(System.Func{System.Nullable{``0}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``1(System.Func{``0})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``1(System.Func{System.Nullable{``0}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``2(System.Func{``0,``1})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``2(System.Func{``0,``1})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``2(System.Func{``0,System.Nullable{``1}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``2(System.Func{``0,``1})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``2(System.Func{``0,System.Nullable{``1}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``3(System.Func{``0,``1,``2})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``3(System.Func{``0,``1,``2})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``3(System.Func{``0,``1,System.Nullable{``2}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``3(System.Func{``0,``1,``2})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``3(System.Func{``0,``1,System.Nullable{``2}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``4(System.Func{``0,``1,``2,``3})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``4(System.Func{``0,``1,``2,``3})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``4(System.Func{``0,``1,``2,System.Nullable{``3}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``4(System.Func{``0,``1,``2,``3})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``4(System.Func{``0,``1,``2,System.Nullable{``3}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``5(System.Func{``0,``1,``2,``3,System.Nullable{``4}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``5(System.Func{``0,``1,``2,``3,System.Nullable{``4}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``6(System.Func{``0,``1,``2,``3,``4,System.Nullable{``5}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``6(System.Func{``0,``1,``2,``3,``4,System.Nullable{``5}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``7(System.Func{``0,``1,``2,``3,``4,``5,System.Nullable{``6}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``7(System.Func{``0,``1,``2,``3,``4,``5,System.Nullable{``6}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Nullable{``7}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Nullable{``7}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Nullable{``8}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Nullable{``8}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Nullable{``9}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Nullable{``9}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Nullable{``10}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Nullable{``10}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Nullable{``11}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Nullable{``11}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Nullable{``12}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Nullable{``12}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Nullable{``13}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Nullable{``13}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Nullable{``14}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Nullable{``14}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Nullable{``15}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Nullable{``15}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Nullable{``16}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Nullable{``16}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="T:LangExt.NullResultException">
            <summary>
            関数がnullを返したことを表す例外です。
            この例外は、Func.ToResultの結果としてのみ使用されます。
            </summary>
        </member>
        <member name="M:LangExt.NullResultException.Equals(System.Object)">
            <summary>objがNullResultExceptionであればtrueを返します。</summary>
        </member>
        <member name="M:LangExt.NullResultException.GetHashCode">
            <summary>このオブジェクトのハッシュコードを返します。</summary>
        </member>
        <member name="M:LangExt.NullResultException.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
        </member>
        <member name="M:LangExt.NullResultException.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.NullResultException.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="T:LangExt.Int">
            <summary>intに対する関数を提供します。</summary>
        </member>
        <member name="M:LangExt.Int.WithUnit``1(System.Int32)">
            <summary>
            数値に単位を追加します。
            </summary>
        </member>
        <member name="M:LangExt.Int.WithUnit``1(System.Nullable{System.Int32})">
            <summary>
            数値に単位を追加します。
            </summary>
        </member>
        <member name="M:LangExt.Int.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Int.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="T:LangExt.IntWithUnit`1">
            <summary>
            単位を持ったintです。
            単位を型として表現できるため、より安全に数値演算が可能です。
            例えば、単位が異なる数値を加算しようとした場合に、コンパイルエラーになります。
            この型の型パラメータTは、型パラメータだけに現れます(幽霊型)。
            この型のオブジェクトの演算の結果、値を持たない状態になることがありますが、
            その状態のオブジェクトを明示的に使うのは避けてください。
            </summary>
            <typeparam name="T">単位を表す型パラメータ</typeparam>
        </member>
        <member name="F:LangExt.IntWithUnit`1.HasValue">
            <summary>このオブジェクトが数値を持っているかどうかを表します。基本的には使用しません。</summary>
        </member>
        <member name="F:LangExt.IntWithUnit`1.Value">
            <summary>このオブジェクトの数値を取得します。</summary>
        </member>
        <member name="F:LangExt.IntWithUnit`1.NoValue">
            <summary>
            値を持たないことを表す読み取り専用フィールドです。
            基本的には使用しません。
            </summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.#ctor(System.Int32)">
            <summary>
            単位のない数値から単位を持った数値を生成するコンストラクタです。
            </summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_Explicit(System.Nullable{System.Int32})~LangExt.IntWithUnit{`0}">
            <summary>
            単位のない数値から単位のある数値への明示的な変換演算子です。
            </summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.Equals(LangExt.IntWithUnit{`0})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較する単位付き数値</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.IntWithUnit`1.CompareTo(LangExt.IntWithUnit{`0})">
            <summary>
            現在のオブジェクトとotherの大小関係を比較します。
            通常は、演算子を使い、このメソッドは使いません。
            </summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_Equality(LangExt.IntWithUnit{`0},LangExt.IntWithUnit{`0})">
            <summary>
            2つの単位付き数値の比較を行います。
            </summary>
            <param name="lhs">1つ目の単位付き数値</param>
            <param name="rhs">2つ目の単位付き数値</param>
            <returns>2つの単位付き数値が等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_Inequality(LangExt.IntWithUnit{`0},LangExt.IntWithUnit{`0})">
            <summary>
            2つの単位付き数値の比較を行います。
            </summary>
            <param name="lhs">1つ目の単位付き数値</param>
            <param name="rhs">2つ目の単位付き数値</param>
            <returns>2つの単位付き数値が等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_Equality(LangExt.IntWithUnit{`0},System.Nullable{System.Int32})">
            <summary>単位付き数値と数値の比較を行います。</summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_Inequality(LangExt.IntWithUnit{`0},System.Nullable{System.Int32})">
            <summary>単位付き数値と数値の比較を行います。</summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_Equality(System.Nullable{System.Int32},LangExt.IntWithUnit{`0})">
            <summary>数値と単位付き数値の比較を行います。</summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_Inequality(System.Nullable{System.Int32},LangExt.IntWithUnit{`0})">
            <summary>数値と単位付き数値の比較を行います。</summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_LessThan(LangExt.IntWithUnit{`0},LangExt.IntWithUnit{`0})">
            <summary>
            2つの単位付き数値の一つ目が小さい場合、二つ目(大きい方)を返し、それ以外の場合はNoValueが返されます。
            この挙動により、ある程度自然に比較演算子をチェーン出来ます。
            この演算子の結果として取得したオブジェクトは、他の比較演算子のどちらかの項に使う以外に用いないでください。
            </summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_GreaterThan(LangExt.IntWithUnit{`0},LangExt.IntWithUnit{`0})">
            <summary>
            2つの単位付き数値の一つ目が大きい場合、二つ目(小さい方)を返し、それ以外の場合はNoValueが返されます。
            この挙動により、ある程度自然に比較演算子をチェーン出来ます。
            この演算子の結果として取得したオブジェクトは、他の比較演算子のどちらかの項に使う以外に用いないでください。
            </summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_LessThanOrEqual(LangExt.IntWithUnit{`0},LangExt.IntWithUnit{`0})">
            <summary>
            2つの単位付き数値の一つ目が小さい、もしくは等しい場合、二つ目(大きい方)を返し、それ以外の場合はNoValueが返されます。
            この挙動により、ある程度自然に比較演算子をチェーン出来ます。
            この演算子の結果として取得したオブジェクトは、他の比較演算子のどちらかの項に使う以外に用いないでください。
            </summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_GreaterThanOrEqual(LangExt.IntWithUnit{`0},LangExt.IntWithUnit{`0})">
            <summary>
            2つの単位付き数値の一つ目が大きい、もしくは等しい場合、二つ目(小さい方)を返し、それ以外の場合はNoValueが返されます。
            この挙動により、ある程度自然に比較演算子をチェーン出来ます。
            この演算子の結果として取得したオブジェクトは、他の比較演算子のどちらかの項に使う以外に用いないでください。
            </summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_LessThan(LangExt.IntWithUnit{`0},System.Nullable{System.Int32})">
            <summary>
            単位付き数値と数値の比較を行います。
            この演算子の結果として取得したオブジェクトは、他の比較演算子のどちらかの項に使う以外に用いないでください。
            </summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_LessThan(System.Nullable{System.Int32},LangExt.IntWithUnit{`0})">
            <summary>
            数値と単位付き数値の比較を行います。
            この演算子の結果として取得したオブジェクトは、他の比較演算子のどちらかの項に使う以外に用いないでください。
            </summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_GreaterThan(LangExt.IntWithUnit{`0},System.Nullable{System.Int32})">
            <summary>
            単位付き数値と数値の比較を行います。
            この演算子の結果として取得したオブジェクトは、他の比較演算子のどちらかの項に使う以外に用いないでください。
            </summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_GreaterThan(System.Nullable{System.Int32},LangExt.IntWithUnit{`0})">
            <summary>
            数値と単位付き数値の比較を行います。
            この演算子の結果として取得したオブジェクトは、他の比較演算子のどちらかの項に使う以外に用いないでください。
            </summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_LessThanOrEqual(LangExt.IntWithUnit{`0},System.Nullable{System.Int32})">
            <summary>
            単位付き数値と数値の比較を行います。
            この演算子の結果として取得したオブジェクトは、他の比較演算子のどちらかの項に使う以外に用いないでください。
            </summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_LessThanOrEqual(System.Nullable{System.Int32},LangExt.IntWithUnit{`0})">
            <summary>
            数値と単位付き数値の比較を行います。
            この演算子の結果として取得したオブジェクトは、他の比較演算子のどちらかの項に使う以外に用いないでください。
            </summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_GreaterThanOrEqual(LangExt.IntWithUnit{`0},System.Nullable{System.Int32})">
            <summary>
            単位付き数値と数値の比較を行います。
            この演算子の結果として取得したオブジェクトは、他の比較演算子のどちらかの項に使う以外に用いないでください。
            </summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_GreaterThanOrEqual(System.Nullable{System.Int32},LangExt.IntWithUnit{`0})">
            <summary>
            数値と単位付き数値の比較を行います。
            この演算子の結果として取得したオブジェクトは、他の比較演算子のどちらかの項に使う以外に用いないでください。
            </summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_True(LangExt.IntWithUnit{`0})">
            <summary>オブジェクトが値を持つかどうかを判定します。</summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_False(LangExt.IntWithUnit{`0})">
            <summary>オブジェクトが値を持つかどうかを判定します。</summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_Addition(LangExt.IntWithUnit{`0},LangExt.IntWithUnit{`0})">
            <summary>
            2つの単位付き数値を加算します。
            </summary>
            <param name="lhs">1つ目の単位付き数値</param>
            <param name="rhs">2つ目の単位付き数値</param>
            <returns>2つの単位付き数値を足し合わせた単位付き数値</returns>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_Subtraction(LangExt.IntWithUnit{`0},LangExt.IntWithUnit{`0})">
            <summary>
            2つの単位付き数値を減算します。
            </summary>
            <param name="lhs">1つ目の単位付き数値</param>
            <param name="rhs">2つ目の単位付き数値</param>
            <returns>1つ目の単位付き数値から2つ目の単位付き数値を引いた単位付き数値</returns>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_Multiply(LangExt.IntWithUnit{`0},System.Int32)">
            <summary>
            単位付き数値と数値をかけ合わせます。
            </summary>
            <param name="lhs">単位付き数値</param>
            <param name="rhs">数値</param>
            <returns>単位付き数値に数値をかけた数値</returns>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_Multiply(System.Int32,LangExt.IntWithUnit{`0})">
            <summary>
            数値と単位付き数値をかけ合わせます。
            </summary>
            <param name="lhs">数値</param>
            <param name="rhs">単位付き数値</param>
            <returns>数値に単位付き数値をかけた数値</returns>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_Division(LangExt.IntWithUnit{`0},System.Int32)">
            <summary>
            単位付き数値を数値で割ります。
            </summary>
            <param name="lhs">単位付き数値</param>
            <param name="rhs">数値</param>
            <returns>単位付き数値を数値で割った単位付き数値</returns>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_Division(LangExt.IntWithUnit{`0},LangExt.IntWithUnit{`0})">
            <summary>
            単位付き数値を単位付き数値で割ります。
            </summary>
            <param name="lhs">1つ目の単位付き数値</param>
            <param name="rhs">2つ目の単位付き数値</param>
            <returns>単位付き数値を単位付き数値で割った数値</returns>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_Modulus(LangExt.IntWithUnit{`0},System.Int32)">
            <summary>
            単位付き数値を数値で割った余りを計算します。
            </summary>
            <param name="lhs">単位付き数値</param>
            <param name="rhs">数値</param>
            <returns>単位付き数値を数値で割った余りの単位付き数値</returns>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_Modulus(LangExt.IntWithUnit{`0},LangExt.IntWithUnit{`0})">
            <summary>
            単位付き数値を単位付き数値で割った余りを計算します。
            </summary>
            <param name="lhs">1つ目の単位付き数値</param>
            <param name="rhs">2つ目の単位付き数値</param>
            <returns>単位付き数値を単位付き数値で割った余りの数値</returns>
        </member>
        <member name="M:LangExt.IntWithUnit`1.op_UnaryNegation(LangExt.IntWithUnit{`0})">
            <summary>
            単位付き数値の符号を反転します。
            </summary>
            <param name="value">単位付き数値</param>
            <returns>符号を反転した単位付き数値</returns>
        </member>
        <member name="M:LangExt.IntWithUnit`1.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.IntWithUnit`1.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.IntWithUnit`1.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="M:LangExt.IntWithUnit`1.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.IntWithUnit`1.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="T:LangExt.ObjectModule">
            <summary>
            Objectに対する関数を提供します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``2(System.Tuple{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルの各要素を展開して関数に渡すNoneIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``2(System.Tuple{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルの各要素を展開して関数に渡すFailureIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``3(System.Tuple{``0,``1,``2},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルの各要素を展開して関数に渡すNoneIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``3(System.Tuple{``0,``1,``2},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルの各要素を展開して関数に渡すFailureIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``4(System.Tuple{``0,``1,``2,``3},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルの各要素を展開して関数に渡すNoneIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``4(System.Tuple{``0,``1,``2,``3},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルの各要素を展開して関数に渡すFailureIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``5(System.Tuple{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルの各要素を展開して関数に渡すNoneIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``5(System.Tuple{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルの各要素を展開して関数に渡すFailureIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``6(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルの各要素を展開して関数に渡すNoneIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``6(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルの各要素を展開して関数に渡すFailureIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルの各要素を展開して関数に渡すNoneIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルの各要素を展開して関数に渡すFailureIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルの各要素を展開して関数に渡すNoneIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルの各要素を展開して関数に渡すFailureIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルの各要素を展開して関数に渡すNoneIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルの各要素を展開して関数に渡すFailureIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルの各要素を展開して関数に渡すNoneIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルの各要素を展開して関数に渡すFailureIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルの各要素を展開して関数に渡すNoneIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルの各要素を展開して関数に渡すFailureIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルの各要素を展開して関数に渡すNoneIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルの各要素を展開して関数に渡すFailureIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルの各要素を展開して関数に渡すNoneIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルの各要素を展開して関数に渡すFailureIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルの各要素を展開して関数に渡すNoneIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルの各要素を展開して関数に渡すFailureIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルの各要素を展開して関数に渡すNoneIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルの各要素を展開して関数に渡すFailureIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルの各要素を展開して関数に渡すNoneIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルの各要素を展開して関数に渡すFailureIfです。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Hash(System.Object[])">
            <summary>
            引数に渡されたオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Hash``1(``0)">
            <summary>
            引数に渡されたオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Hash``2(``0,``1)">
            <summary>
            引数に渡されたオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Hash``3(``0,``1,``2)">
            <summary>
            引数に渡されたオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Hash``4(``0,``1,``2,``3)">
            <summary>
            引数に渡されたオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Hash``5(``0,``1,``2,``3,``4)">
            <summary>
            引数に渡されたオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Hash``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            引数に渡されたオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Hash``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            引数に渡されたオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Hash``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            引数に渡されたオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Hash``9(``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            引数に渡されたオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Hash``10(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            引数に渡されたオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Hash``11(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            引数に渡されたオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Hash``12(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            引数に渡されたオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Hash``13(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            引数に渡されたオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Hash``14(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            引数に渡されたオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Hash``15(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            引数に渡されたオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Hash``16(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            引数に渡されたオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.IsNull(System.Object)">
            <summary>
            オブジェクトがnullかどうかを判定します。
            </summary>
            <param name="self">判定の対象</param>
            <returns>オブジェクトがnullの場合true、nullではない場合false</returns>
        </member>
        <member name="M:LangExt.ObjectModule.IsNotNull(System.Object)">
            <summary>
            オブジェクトがnullかどうかを判定します。
            </summary>
            <param name="self">判定の対象</param>
            <returns>オブジェクトがnullの場合false、nullではない場合true</returns>
        </member>
        <member name="M:LangExt.ObjectModule.IsEqualTo(System.Object,System.Object)">
            <summary>
            null安全にEqualsを呼び出します。
            関数を値として使用したい場合は、こちらではなくEqを使用してください。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.IsNotEqualTo(System.Object,System.Object)">
            <summary>
            null安全にEqualsを呼び出し、結果を反転させます。
            関数を値として使用したい場合は、こちらではなくNotEqを使用してください。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Eq(System.Object,System.Object)">
            <summary>
            関数としてnull安全なEqualsの呼び出しを行いたい場合に使用します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NotEq(System.Object,System.Object)">
            <summary>
            関数としてnull安全なEqualsの呼び出しと否定を行いたい場合に使用します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.ToStr(System.Object)">
            <summary>
            null安全にToStringを呼び出します。
            レシーバがnullだった場合、空文字列を返します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.ToStrOr(System.Object,System.String)">
            <summary>
            null安全にToStringを呼び出します。
            レシーバがnullだった場合、defaultStrで指定した文字列を返します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.SomeIf``1(``0,``0)">
            <summary>
            自身がxと等しい場合Someを返し、そうでない場合Noneを返します。
            自身もxもnullだった場合のみ、このメソッドは例外を投げます。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.SomeIf``1(``0,System.Func{System.Boolean})">
            <summary>
            predがtrueを返す場合Noneを返し、falseを返す場合Someを返します。
            自身がnullかつpredがtrueを返した場合は、例外を投げます。
            また、predが例外を投げた場合も例外を投げます。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.SomeIf``1(``0,System.Func{``0,System.Boolean})">
            <summary>
            predがtrueを返す場合Noneを返し、falseを返す場合Someを返します。
            自身がnullかつpredがtrueを返した場合は、例外を投げます。
            また、predが例外を投げた場合も例外を投げます。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``1(``0,``0)">
            <summary>
            自身がxと等しい場合Noneを返し、そうでない場合Someを返します。
            自身がnullかつxがnullではなかったときのみ、このメソッドは例外を投げます。
            自身もxもnullだった場合は、Noneを返します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``1(``0,System.Func{System.Boolean})">
            <summary>
            predがtrueを返す場合Noneを返し、falseを返す場合Someを返します。
            自身がnullかつpredがfalseを返した場合は、例外を投げます。
            また、predが例外を投げた場合も例外を投げます。
            自身がnullでpredがtrueを返した場合は、Noneを返します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``1(``0,System.Func{``0,System.Boolean})">
            <summary>
            predがtrueを返す場合Noneを返し、falseを返す場合Someを返します。
            自身がnullかつpredがfalseを返した場合は、例外を投げます。
            また、predが例外を投げた場合も例外を投げます。
            自身がnullでpredがtrueを返した場合は、Noneを返します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIfNull``1(``0)">
            <summary>
            自身がnullの場合のみNoneを返し、それ以外の場合はSomeを返します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.SuccessIf``1(``0,``0)">
            <summary>
            自身がxと等しい場合Successを返し、そうでない場合Failureを返します。
            自身もxもnullだった場合のみ、このメソッドは例外を投げます。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.SuccessIf``1(``0,System.Func{System.Boolean})">
            <summary>
            predがtrueを返す場合Successを返し、falseを返す場合Failureを返します。
            自身がnullかつpredがtrueを返した場合は、例外を投げます。
            また、predが例外を投げた場合も例外を投げます。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.SuccessIf``1(``0,System.Func{``0,System.Boolean})">
            <summary>
            predがtrueを返す場合Successを返し、falseを返す場合Failureを返します。
            自身がnullかつpredがtrueを返した場合は、例外を投げます。
            また、predが例外を投げた場合も例外を投げます。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``1(``0,``0)">
            <summary>
            自身がxと等しい場合Failureを返し、そうでない場合Successを返します。
            自身がnullかつxがnullではなかったときのみ、このメソッドは例外を投げます。
            自身もxもnullだった場合は、Failureを返します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``1(``0,System.Func{System.Boolean})">
            <summary>
            predがtrueを返す場合Failureを返し、falseを返す場合Successを返します。
            自身がnullかつpredがfalseを返した場合は、例外を投げます。
            また、predが例外を投げた場合も例外を投げます。
            自身がnullでpredがtrueを返した場合は、Failureを返します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``1(``0,System.Func{``0,System.Boolean})">
            <summary>
            predがtrueを返す場合Failureを返し、falseを返す場合Successを返します。
            自身がnullかつpredがfalseを返した場合は、例外を投げます。
            また、predが例外を投げた場合も例外を投げます。
            自身がnullでpredがtrueを返した場合は、Failureを返します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIfNull``1(``0)">
            <summary>
            自身がnullの場合のみFailureを返し、それ以外の場合はSuccessを返します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="T:LangExt.Option">
            <summary>
            Optionに対する関数を提供します。
            例外を投げうる関数は、Unsafe名前空間のSeqモジュールで提供しています。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``3(LangExt.Option{System.Tuple{``0,``1}},System.Func{``0,``1,``2},System.Func{``2})">
            <summary>
            2要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``2(LangExt.Option{System.Tuple{``0,``1}},System.Action{``0,``1},System.Action)">
            <summary>
            2要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Maybe``3(LangExt.Option{System.Tuple{``0,``1}},``2,System.Func{``0,``1,``2})">
            <summary>
            2要素タプルのOptionの各要素を展開して関数に渡すMaybeです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Count``2(LangExt.Option{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのOptionの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Fold``3(LangExt.Option{System.Tuple{``0,``1}},``2,System.Func{``2,``0,``1,``2})">
            <summary>
            2要素タプルのOptionの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Forall``2(LangExt.Option{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのOptionの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Exists``2(LangExt.Option{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのOptionの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Filter``2(LangExt.Option{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのOptionの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Map``3(LangExt.Option{System.Tuple{``0,``1}},System.Func{``0,``1,``2})">
            <summary>
            2要素タプルのOptionの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``2(LangExt.Option{System.Tuple{``0,``1}},System.Action{``0,``1})">
            <summary>
            2要素タプルのOptionの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Bind``3(LangExt.Option{System.Tuple{``0,``1}},System.Func{``0,``1,LangExt.Option{``2}})">
            <summary>
            2要素タプルのOptionの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``4(LangExt.Option{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``3},System.Func{``3})">
            <summary>
            3要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``3(LangExt.Option{System.Tuple{``0,``1,``2}},System.Action{``0,``1,``2},System.Action)">
            <summary>
            3要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Maybe``4(LangExt.Option{System.Tuple{``0,``1,``2}},``3,System.Func{``0,``1,``2,``3})">
            <summary>
            3要素タプルのOptionの各要素を展開して関数に渡すMaybeです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Count``3(LangExt.Option{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのOptionの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Fold``4(LangExt.Option{System.Tuple{``0,``1,``2}},``3,System.Func{``3,``0,``1,``2,``3})">
            <summary>
            3要素タプルのOptionの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Forall``3(LangExt.Option{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのOptionの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Exists``3(LangExt.Option{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのOptionの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Filter``3(LangExt.Option{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのOptionの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Map``4(LangExt.Option{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``3})">
            <summary>
            3要素タプルのOptionの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``3(LangExt.Option{System.Tuple{``0,``1,``2}},System.Action{``0,``1,``2})">
            <summary>
            3要素タプルのOptionの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Bind``4(LangExt.Option{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,LangExt.Option{``3}})">
            <summary>
            3要素タプルのOptionの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``5(LangExt.Option{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``4},System.Func{``4})">
            <summary>
            4要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``4(LangExt.Option{System.Tuple{``0,``1,``2,``3}},System.Action{``0,``1,``2,``3},System.Action)">
            <summary>
            4要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Maybe``5(LangExt.Option{System.Tuple{``0,``1,``2,``3}},``4,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            4要素タプルのOptionの各要素を展開して関数に渡すMaybeです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Count``4(LangExt.Option{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのOptionの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Fold``5(LangExt.Option{System.Tuple{``0,``1,``2,``3}},``4,System.Func{``4,``0,``1,``2,``3,``4})">
            <summary>
            4要素タプルのOptionの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Forall``4(LangExt.Option{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのOptionの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Exists``4(LangExt.Option{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのOptionの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Filter``4(LangExt.Option{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのOptionの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Map``5(LangExt.Option{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            4要素タプルのOptionの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``4(LangExt.Option{System.Tuple{``0,``1,``2,``3}},System.Action{``0,``1,``2,``3})">
            <summary>
            4要素タプルのOptionの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Bind``5(LangExt.Option{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,LangExt.Option{``4}})">
            <summary>
            4要素タプルのOptionの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``6(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``5},System.Func{``5})">
            <summary>
            5要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``5(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4}},System.Action{``0,``1,``2,``3,``4},System.Action)">
            <summary>
            5要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Maybe``6(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4}},``5,System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            5要素タプルのOptionの各要素を展開して関数に渡すMaybeです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Count``5(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのOptionの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Fold``6(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4}},``5,System.Func{``5,``0,``1,``2,``3,``4,``5})">
            <summary>
            5要素タプルのOptionの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Forall``5(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのOptionの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Exists``5(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのOptionの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Filter``5(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのOptionの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Map``6(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            5要素タプルのOptionの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``5(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4}},System.Action{``0,``1,``2,``3,``4})">
            <summary>
            5要素タプルのOptionの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Bind``6(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,LangExt.Option{``5}})">
            <summary>
            5要素タプルのOptionの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``7(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``6},System.Func{``6})">
            <summary>
            6要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``6(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Action{``0,``1,``2,``3,``4,``5},System.Action)">
            <summary>
            6要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Maybe``7(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5}},``6,System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            6要素タプルのOptionの各要素を展開して関数に渡すMaybeです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Count``6(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのOptionの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Fold``7(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5}},``6,System.Func{``6,``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            6要素タプルのOptionの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Forall``6(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのOptionの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Exists``6(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのOptionの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Filter``6(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのOptionの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Map``7(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            6要素タプルのOptionの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``6(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            6要素タプルのOptionの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Bind``7(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,LangExt.Option{``6}})">
            <summary>
            6要素タプルのOptionの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``8(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Func{``7})">
            <summary>
            7要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``7(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Action{``0,``1,``2,``3,``4,``5,``6},System.Action)">
            <summary>
            7要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Maybe``8(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},``7,System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            7要素タプルのOptionの各要素を展開して関数に渡すMaybeです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Count``7(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのOptionの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Fold``8(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},``7,System.Func{``7,``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            7要素タプルのOptionの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Forall``7(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのOptionの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Exists``7(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのOptionの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Filter``7(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのOptionの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Map``8(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            7要素タプルのOptionの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``7(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            7要素タプルのOptionの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Bind``8(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,LangExt.Option{``7}})">
            <summary>
            7要素タプルのOptionの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``9(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Func{``8})">
            <summary>
            8要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``8(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Action)">
            <summary>
            8要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Maybe``9(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},``8,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            8要素タプルのOptionの各要素を展開して関数に渡すMaybeです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Count``8(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのOptionの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Fold``9(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},``8,System.Func{``8,``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            8要素タプルのOptionの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Forall``8(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのOptionの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Exists``8(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのOptionの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Filter``8(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのOptionの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Map``9(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            8要素タプルのOptionの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``8(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            8要素タプルのOptionの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Bind``9(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,LangExt.Option{``8}})">
            <summary>
            8要素タプルのOptionの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``10(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Func{``9})">
            <summary>
            9要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``9(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Action)">
            <summary>
            9要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Maybe``10(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},``9,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            9要素タプルのOptionの各要素を展開して関数に渡すMaybeです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Count``9(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのOptionの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Fold``10(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},``9,System.Func{``9,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            9要素タプルのOptionの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Forall``9(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのOptionの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Exists``9(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのOptionの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Filter``9(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのOptionの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Map``10(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            9要素タプルのOptionの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``9(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            9要素タプルのOptionの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Bind``10(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,LangExt.Option{``9}})">
            <summary>
            9要素タプルのOptionの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``11(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Func{``10})">
            <summary>
            10要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``10(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Action)">
            <summary>
            10要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Maybe``11(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},``10,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            10要素タプルのOptionの各要素を展開して関数に渡すMaybeです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Count``10(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのOptionの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Fold``11(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},``10,System.Func{``10,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            10要素タプルのOptionの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Forall``10(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのOptionの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Exists``10(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのOptionの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Filter``10(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのOptionの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Map``11(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            10要素タプルのOptionの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``10(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            10要素タプルのOptionの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Bind``11(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,LangExt.Option{``10}})">
            <summary>
            10要素タプルのOptionの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``12(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Func{``11})">
            <summary>
            11要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``11(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Action)">
            <summary>
            11要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Maybe``12(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},``11,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            11要素タプルのOptionの各要素を展開して関数に渡すMaybeです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Count``11(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのOptionの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Fold``12(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},``11,System.Func{``11,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            11要素タプルのOptionの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Forall``11(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのOptionの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Exists``11(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのOptionの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Filter``11(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのOptionの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Map``12(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            11要素タプルのOptionの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``11(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            11要素タプルのOptionの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Bind``12(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,LangExt.Option{``11}})">
            <summary>
            11要素タプルのOptionの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``13(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Func{``12})">
            <summary>
            12要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``12(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Action)">
            <summary>
            12要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Maybe``13(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},``12,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            12要素タプルのOptionの各要素を展開して関数に渡すMaybeです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Count``12(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのOptionの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Fold``13(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},``12,System.Func{``12,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            12要素タプルのOptionの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Forall``12(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのOptionの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Exists``12(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのOptionの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Filter``12(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのOptionの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Map``13(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            12要素タプルのOptionの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``12(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            12要素タプルのOptionの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Bind``13(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,LangExt.Option{``12}})">
            <summary>
            12要素タプルのOptionの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``14(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Func{``13})">
            <summary>
            13要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``13(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Action)">
            <summary>
            13要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Maybe``14(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},``13,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            13要素タプルのOptionの各要素を展開して関数に渡すMaybeです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Count``13(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのOptionの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Fold``14(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},``13,System.Func{``13,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            13要素タプルのOptionの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Forall``13(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのOptionの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Exists``13(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのOptionの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Filter``13(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのOptionの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Map``14(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            13要素タプルのOptionの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``13(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            13要素タプルのOptionの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Bind``14(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,LangExt.Option{``13}})">
            <summary>
            13要素タプルのOptionの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``15(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Func{``14})">
            <summary>
            14要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``14(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Action)">
            <summary>
            14要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Maybe``15(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},``14,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            14要素タプルのOptionの各要素を展開して関数に渡すMaybeです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Count``14(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのOptionの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Fold``15(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},``14,System.Func{``14,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            14要素タプルのOptionの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Forall``14(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのOptionの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Exists``14(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのOptionの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Filter``14(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのOptionの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Map``15(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            14要素タプルのOptionの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``14(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            14要素タプルのOptionの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Bind``15(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,LangExt.Option{``14}})">
            <summary>
            14要素タプルのOptionの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``16(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Func{``15})">
            <summary>
            15要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``15(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Action)">
            <summary>
            15要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Maybe``16(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},``15,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            15要素タプルのOptionの各要素を展開して関数に渡すMaybeです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Count``15(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのOptionの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Fold``16(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},``15,System.Func{``15,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            15要素タプルのOptionの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Forall``15(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのOptionの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Exists``15(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのOptionの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Filter``15(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのOptionの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Map``16(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            15要素タプルのOptionの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``15(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            15要素タプルのOptionの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Bind``16(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,LangExt.Option{``15}})">
            <summary>
            15要素タプルのOptionの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``17(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},System.Func{``16})">
            <summary>
            16要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Match``16(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Action)">
            <summary>
            16要素タプルのOptionの各要素を展開して関数に渡すMatchです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Maybe``17(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},``16,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            16要素タプルのOptionの各要素を展開して関数に渡すMaybeです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Count``16(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのOptionの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Forall``16(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのOptionの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Exists``16(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのOptionの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Filter``16(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのOptionの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Map``17(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            16要素タプルのOptionの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``16(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            16要素タプルのOptionの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Bind``17(LangExt.Option{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,LangExt.Option{``16}})">
            <summary>
            16要素タプルのOptionの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Some``2(``0,``1)">
            <summary>
            Option[Tuple[...]]のSomeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Option.Some``3(``0,``1,``2)">
            <summary>
            Option[Tuple[...]]のSomeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Option.Some``4(``0,``1,``2,``3)">
            <summary>
            Option[Tuple[...]]のSomeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Option.Some``5(``0,``1,``2,``3,``4)">
            <summary>
            Option[Tuple[...]]のSomeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Option.Some``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            Option[Tuple[...]]のSomeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Option.Some``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Option[Tuple[...]]のSomeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Option.Some``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Option[Tuple[...]]のSomeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Option.Some``9(``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Option[Tuple[...]]のSomeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Option.Some``10(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Option[Tuple[...]]のSomeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Option.Some``11(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Option[Tuple[...]]のSomeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Option.Some``12(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Option[Tuple[...]]のSomeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Option.Some``13(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Option[Tuple[...]]のSomeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Option.Some``14(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Option[Tuple[...]]のSomeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Option.Some``15(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Option[Tuple[...]]のSomeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Option.Some``16(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Option[Tuple[...]]のSomeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Option.Create``1(``0)">
            <summary>
            valueがnullでない場合はOption.Some(value)と、
            valueがnullの場合はOption.Noneと同じオブジェクトを返します。
            </summary>
            <typeparam name="T">生成するOptionの要素の型</typeparam>
            <param name="value">値</param>
            <returns>valueがnullの場合None、そうでない場合Some</returns>
        </member>
        <member name="M:LangExt.Option.Create``1(System.Nullable{``0})">
            <summary>
            valueがnullでない場合はOption.Some(value.Value)と、
            valueがnullの場合はOption.Noneと同じオブジェクトを返します。
            </summary>
            <typeparam name="T">生成するOptionの要素の型</typeparam>
            <param name="value">値</param>
            <returns>valueがnullの場合None、そうでない場合Some</returns>
        </member>
        <member name="M:LangExt.Option.Some``1(``0)">
            <summary>
            valueを格納するOptionを生成します。
            valueとしてnullを格納することは出来ません。
            </summary>
            <typeparam name="T">Someに保持する値の型</typeparam>
            <param name="value">Someに保持する値</param>
            <returns>Some(value)</returns>
        </member>
        <member name="M:LangExt.Option.Some">
            <summary>
            Unitを格納するOptionを生成します。
            </summary>
            <returns>Some(Unit._)</returns>
        </member>
        <member name="M:LangExt.Option.FromFunc``1(System.Func{``0})">
            <summary>
            失敗しうる無引数関数からOptionを生成します。
            この関数は、例外を使用するAPIとOptionを使ったAPIの橋渡しをします。
            </summary>
            <typeparam name="T">関数が成功した場合の型(戻り値の型)</typeparam>
            <param name="f">実行する関数</param>
            <returns>関数が成功した場合、結果をSomeで包んだ値。失敗した場合、None。</returns>
        </member>
        <member name="M:LangExt.Option.IsSome``1(LangExt.Option{``0})">
            <summary>
            値を持つかどうかを取得する関数が必要な時に使います。
            Option[T]がプロパティとしてIsSomeを持つため、拡張メソッドにはしていません。
            </summary>
        </member>
        <member name="M:LangExt.Option.IsNone``1(LangExt.Option{``0})">
            <summary>
            値を持たないかどうかを取得する関数が必要な時に使います。
            Option[T]がプロパティとしてIsNoneを持つため、拡張メソッドにはしていません。
            </summary>
        </member>
        <member name="M:LangExt.Option.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Option.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Option.CompareTo``1(LangExt.Option{``0},LangExt.Option{``0})">
            <summary>
            Option[T] → CompareResult
            </summary>
        </member>
        <member name="M:LangExt.Option.Comparer``1">
            <summary>
            () → IComparer[Option[T]]
            </summary>
        </member>
        <member name="M:LangExt.Option.Empty``1">
            <summary>
            () → Option[T]
            </summary>
        </member>
        <member name="M:LangExt.Option.Maybe``2(LangExt.Option{``0},``1,System.Func{``0,``1})">
            <summary>
            (Option[T], U, T → U) → U
            </summary>
        </member>
        <member name="M:LangExt.Option.Fold``2(LangExt.Option{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            (Option[T], U, ((U, T) → U)) → U
            </summary>
        </member>
        <member name="M:LangExt.Option.Filter``1(LangExt.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Option[T], (T → bool)) → Option[T]
            </summary>
        </member>
        <member name="M:LangExt.Option.Map``2(LangExt.Option{``0},System.Func{``0,``1})">
            <summary>
            (Option[T], (T → U)) → Option[U]
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``1(LangExt.Option{``0},System.Action{``0})">
            <summary>
            (Option[T], (T → void)) → void
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``1(LangExt.Option{``0},System.Func{``0,LangExt.Unit})">
            <summary>
            (Option[T], (T → Unit)) → Unit
            </summary>
        </member>
        <member name="M:LangExt.Option.IsEmpty``1(LangExt.Option{``0})">
            <summary>
            Option[T] → bool
            </summary>
        </member>
        <member name="M:LangExt.Option.IsNotEmpty``1(LangExt.Option{``0})">
            <summary>
            Option[T] → bool
            </summary>
        </member>
        <member name="M:LangExt.Option.Exists``1(LangExt.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Option[T], (T → bool)) → bool
            </summary>
        </member>
        <member name="M:LangExt.Option.Forall``1(LangExt.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Option[T], (T → bool)) → bool
            </summary>
        </member>
        <member name="M:LangExt.Option.Size``1(LangExt.Option{``0})">
            <summary>
            Option[T] → int
            </summary>
        </member>
        <member name="M:LangExt.Option.Len``1(LangExt.Option{``0})">
            <summary>
            Option[T] → int
            </summary>
        </member>
        <member name="M:LangExt.Option.Count``1(LangExt.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Option[T], (T → bool)) → int
            </summary>
        </member>
        <member name="M:LangExt.Option.ToArray``1(LangExt.Option{``0})">
            <summary>
            Option[T] → T[]
            </summary>
        </member>
        <member name="M:LangExt.Option.ToSeq``1(LangExt.Option{``0})">
            <summary>
            Option[T] → Seq[T]
            </summary>
        </member>
        <member name="M:LangExt.Option.ToResult``1(LangExt.Option{``0})">
            <summary>
            Option[T] → Result[T, Unit]
            </summary>
        </member>
        <member name="M:LangExt.Option.Select``2(LangExt.Option{``0},System.Func{``0,``1})">
            <summary>
            クエリ式でOptionを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Where``1(LangExt.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
            クエリ式でOptionを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Option.SelectMany``3(LangExt.Option{``0},System.Func{``0,LangExt.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            クエリ式でOptionを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Cast``1(LangExt.Option{LangExt.Placeholder})">
            <summary>
            クエリ式でOptionを扱うためのメソッドです。
            </summary>
        </member>
        <member name="P:LangExt.Option.None">
            <summary>
            値がないことを表すOption型の値(None)を取得します。 
            </summary>
        </member>
        <member name="T:LangExt.IOrderedSeq`1">
            <summary>
            要素Tの並び替えられたシーケンスを表すインターフェイスです。
            </summary>
            <typeparam name="T">要素の型</typeparam>
        </member>
        <member name="T:LangExt.OrderedSeq`1">
            <summary>
            要素Tの並び替えられたシーケンスを表すインターフェイスです。
            </summary>
            <typeparam name="T">要素の型</typeparam>
        </member>
        <member name="T:LangExt.OrderedSeq">
            <summary>
            並び替えられたシーケンスに対する関数を提供します。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.ThenBy``2(LangExt.IOrderedSeq{``0},System.Func{``0,``1})">
            <summary>
            並び替えられたシーケンスをさらに別のキーで安定ソートします。
            標準クエリ演算子のThenByに対応します。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.RevThenBy``2(LangExt.IOrderedSeq{``0},System.Func{``0,``1})">
            <summary>
            並び替えられたシーケンスをさらに別のキーで安定ソートします。
            標準クエリ演算子のThenByDescendingに対応します。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.ThenBy``3(LangExt.IOrderedSeq{System.Tuple{``0,``1}},System.Func{``0,``1,``2})">
            <summary>
            2要素タプルの各要素を展開して関数に渡すThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.RevThenBy``3(LangExt.IOrderedSeq{System.Tuple{``0,``1}},System.Func{``0,``1,``2})">
            <summary>
            2要素タプルの各要素を展開して関数に渡すRevThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.ThenBy``4(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``3})">
            <summary>
            3要素タプルの各要素を展開して関数に渡すThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.RevThenBy``4(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``3})">
            <summary>
            3要素タプルの各要素を展開して関数に渡すRevThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.ThenBy``5(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            4要素タプルの各要素を展開して関数に渡すThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.RevThenBy``5(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            4要素タプルの各要素を展開して関数に渡すRevThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.ThenBy``6(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            5要素タプルの各要素を展開して関数に渡すThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.RevThenBy``6(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            5要素タプルの各要素を展開して関数に渡すRevThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.ThenBy``7(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            6要素タプルの各要素を展開して関数に渡すThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.RevThenBy``7(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            6要素タプルの各要素を展開して関数に渡すRevThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.ThenBy``8(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            7要素タプルの各要素を展開して関数に渡すThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.RevThenBy``8(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            7要素タプルの各要素を展開して関数に渡すRevThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.ThenBy``9(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            8要素タプルの各要素を展開して関数に渡すThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.RevThenBy``9(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            8要素タプルの各要素を展開して関数に渡すRevThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.ThenBy``10(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            9要素タプルの各要素を展開して関数に渡すThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.RevThenBy``10(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            9要素タプルの各要素を展開して関数に渡すRevThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.ThenBy``11(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            10要素タプルの各要素を展開して関数に渡すThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.RevThenBy``11(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            10要素タプルの各要素を展開して関数に渡すRevThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.ThenBy``12(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            11要素タプルの各要素を展開して関数に渡すThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.RevThenBy``12(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            11要素タプルの各要素を展開して関数に渡すRevThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.ThenBy``13(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            12要素タプルの各要素を展開して関数に渡すThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.RevThenBy``13(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            12要素タプルの各要素を展開して関数に渡すRevThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.ThenBy``14(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            13要素タプルの各要素を展開して関数に渡すThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.RevThenBy``14(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            13要素タプルの各要素を展開して関数に渡すRevThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.ThenBy``15(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            14要素タプルの各要素を展開して関数に渡すThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.RevThenBy``15(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            14要素タプルの各要素を展開して関数に渡すRevThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.ThenBy``16(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            15要素タプルの各要素を展開して関数に渡すThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.RevThenBy``16(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            15要素タプルの各要素を展開して関数に渡すRevThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.ThenBy``17(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            16要素タプルの各要素を展開して関数に渡すThenByです。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.RevThenBy``17(LangExt.IOrderedSeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            16要素タプルの各要素を展開して関数に渡すRevThenByです。
            </summary>
        </member>
        <member name="T:LangExt.Properties.Resources">
            <summary>
              ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。
            </summary>
        </member>
        <member name="P:LangExt.Properties.Resources.ResourceManager">
            <summary>
              このクラスで使用されているキャッシュされた ResourceManager インスタンスを返します。
            </summary>
        </member>
        <member name="P:LangExt.Properties.Resources.Culture">
            <summary>
              厳密に型指定されたこのリソース クラスを使用して、すべての検索リソースに対し、
              現在のスレッドの CurrentUICulture プロパティをオーバーライドします。
            </summary>
        </member>
        <member name="P:LangExt.Properties.Resources.ExMsgElementNotFound">
            <summary>
              element not found in {0}. に類似しているローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:LangExt.Properties.Resources.ExMsgInvalidCast">
            <summary>
              invalid cast (from {0} to {1}). に類似しているローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:LangExt.Properties.Resources.ExMsgInvalidValue">
            <summary>
              {0} is invalid value. に類似しているローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:LangExt.Properties.Resources.ExMsgSeqIsEmpty">
            <summary>
              require non empty sequence but {0} is empty. に類似しているローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:LangExt.Properties.Resources.ExMsgTooBig">
            <summary>
              {0} must be less than or equal to {1} but {2}. に類似しているローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:LangExt.Properties.Resources.ExMsgTooBig2">
            <summary>
              {0} must be less than {1} but {2}. に類似しているローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:LangExt.Properties.Resources.ExMsgTooSmall">
            <summary>
              {0} must be greater than or equal to {1} but {2}. に類似しているローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:LangExt.Properties.Resources.ExMsgTooSmall2">
            <summary>
              {0} must be greater than {1} but {2}. に類似しているローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="T:LangExt.RangeUnit.Length">
            <summary>Rangeの長さを表す単位クラスです。</summary>
        </member>
        <member name="T:LangExt.IUnit">
            <summary>
            単位を表すマーカーインターフェイスです。
            このインターフェイスはIntWithUnit[T]などの型パラメータの制約のためだけに使われます。
            </summary>
        </member>
        <member name="M:LangExt.RangeUnit.Length.Equals(System.Object,System.Object)">
            <summary>使用しません。</summary>
        </member>
        <member name="M:LangExt.RangeUnit.Length.ReferenceEquals(System.Object,System.Object)">
            <summary>使用しません。</summary>
        </member>
        <member name="T:LangExt.RangeUnit.Index">
            <summary>Rangeで終点の位置を表す単位クラスです。</summary>
        </member>
        <member name="M:LangExt.RangeUnit.Index.Equals(System.Object,System.Object)">
            <summary>使用しません。</summary>
        </member>
        <member name="M:LangExt.RangeUnit.Index.ReferenceEquals(System.Object,System.Object)">
            <summary>使用しません。</summary>
        </member>
        <member name="T:LangExt.RangeUnit.Int">
            <summary>
            intに単位を扱う操作を追加するための拡張メソッドを提供します。
            </summary>
        </member>
        <member name="M:LangExt.RangeUnit.Int.ToLen(System.Int32)">
            <summary>数値を長さを表す数値に変換します。</summary>
        </member>
        <member name="M:LangExt.RangeUnit.Int.ToIdx(System.Int32)">
            <summary>数値を位置を表す数値に変換します。</summary>
        </member>
        <member name="T:LangExt.Range">
            <summary>
            範囲を表すクラスです。
            </summary>
        </member>
        <member name="F:LangExt.Range.Begin">
            <summary>
            範囲の開始位置を表すインデックスです。。
            </summary>
        </member>
        <member name="F:LangExt.Range.End">
            <summary>
            範囲の終了地点の直前を表すインデックスです。
            </summary>
        </member>
        <member name="M:LangExt.Range.Create(LangExt.IntWithUnit{LangExt.RangeUnit.Length})">
            <summary>
            指定された長さを持つ、0から始まるRangeを生成します。
            長さに負の数を指定することはできません。
            </summary>
        </member>
        <member name="M:LangExt.Range.Create(System.Int32,LangExt.IntWithUnit{LangExt.RangeUnit.Length})">
            <summary>
            指定された開始位置と長さを持つRangeを生成します。
            長さに負の数を指定することはできません。
            </summary>
        </member>
        <member name="M:LangExt.Range.Create(LangExt.IntWithUnit{LangExt.RangeUnit.Index})">
            <summary>
            指定された終了位置(自身は含まない)を持つ、0から始まるRangeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Range.Create(System.Int32,LangExt.IntWithUnit{LangExt.RangeUnit.Index})">
            <summary>
            指定された開始位置と終了位置(自身は含まない)を持つRangeを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Range.FromTo(System.Int32,System.Int32)">
            <summary>
            指定された開始位置と終了位置(自身を含む)を持つRangeを生成します。
            </summary>
            <param name="from">生成する範囲の開始位置</param>
            <param name="to">生成する範囲の終了位置(自身を含む)</param>
        </member>
        <member name="M:LangExt.Range.FromUntil(System.Int32,System.Int32)">
            <summary>
            指定された開始位置と終了位置(自身を含まない)を持つRangeを生成します。
            </summary>
            <param name="from">生成する範囲の開始位置</param>
            <param name="until">生成する範囲の終了位置(自身を含まない)</param>
        </member>
        <member name="M:LangExt.Range.ToSeq">
            <summary>
            範囲をシーケンスに変換します。
            </summary>
        </member>
        <member name="M:LangExt.Range.ToSeq(System.Int32)">
            <summary>
            stepを指定して範囲をシーケンスに変換します。
            </summary>
        </member>
        <member name="M:LangExt.Range.Equals(LangExt.Range)">
            <summary>
            現在のオブジェクトと、同じ型の別のオブジェクトが等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するRange</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Range.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Range.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Range.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="M:LangExt.Range.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Range.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="P:LangExt.Range.Last">
            <summary>
            範囲の終了位置を表すインデックスを取得します。
            </summary>
        </member>
        <member name="P:LangExt.Range.Length">
            <summary>
            範囲の長さを表す数値を取得します。
            </summary>
        </member>
        <member name="P:LangExt.Range.Increasing">
            <summary>
            BeginからEndへ値が増えていくRangeかどうかを取得します。
            </summary>
        </member>
        <member name="P:LangExt.Range.Decreasing">
            <summary>
            BeginからEndへ値が減っていくRangeかどうかを取得します。
            </summary>
        </member>
        <member name="T:LangExt.Result">
            <summary>
            Resultに対する関数を提供します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Create``1(``0)">
            <summary>
            valueがnullでない場合はResult.Success(value)と、
            valueがnullの場合はResult.Failure(Unit._)と同じオブジェクトを返します。
            </summary>
            <typeparam name="T">生成するResultのSuccess側の要素の型</typeparam>
            <param name="value">値</param>
            <returns>valueがnullの場合Failure、そうでない場合Success</returns>
        </member>
        <member name="M:LangExt.Result.Create``1(System.Nullable{``0})">
            <summary>
            valueがnullでない場合はResult.Success(value.Value)と、
            valueがnullの場合はResult.Failure(Unit._)と同じオブジェクトを返します。
            </summary>
            <typeparam name="T">生成するResultのSuccess側の要素の型</typeparam>
            <param name="value">値</param>
            <returns>valueがnullの場合Failure、そうでない場合Success</returns>
        </member>
        <member name="M:LangExt.Result.NewSuccess``2(``0)">
            <summary>
            成功した結果としてvalueを格納するResultを生成します。
            通常は、NewSuccessではなく、Successを使用します。
            このメソッドは、失敗側の型も指定したい場合に使用します。
            </summary>
            <typeparam name="TSuccess">Resultに保持する成功の型</typeparam>
            <typeparam name="TFailure">Resultに保持する失敗の型</typeparam>
            <param name="value">Resultに保持する成功を表す値</param>
            <returns>Success(value)</returns>
        </member>
        <member name="M:LangExt.Result.NewSuccess``1">
            <summary>
            成功した結果としてUnitを格納するResultを生成します。
            通常は、NewSuccessではなく、Successを使用します。
            このメソッドは、失敗側の型も指定したい場合に使用します。
            </summary>
            <typeparam name="TFailure">Resultに保持する失敗の型</typeparam>
            <returns>Success(Unit._)</returns>
        </member>
        <member name="M:LangExt.Result.Success``1(``0)">
            <summary>
            成功した結果としてvalueを格納するResultを生成します。
            </summary>
            <typeparam name="TSuccess">Resultに保持する成功の型</typeparam>
            <param name="value">Resultに保持する成功を表す値</param>
            <returns>Success(value)</returns>
        </member>
        <member name="M:LangExt.Result.Success">
            <summary>
            成功した結果としてUnitを格納するResultを生成します。
            </summary>
            <returns>Success(Unit._)</returns>
        </member>
        <member name="M:LangExt.Result.NewFailure``2(``1)">
            <summary>
            失敗した結果としてvalueを格納するResultを生成します。
            通常は、NewFailureではなく、Failureを使用します。
            このメソッドは、成功側の型も指定したい場合に使用します。
            </summary>
            <typeparam name="TSuccess">Resultに保持する成功の型</typeparam>
            <typeparam name="TFailure">Resultに保持する失敗の型</typeparam>
            <param name="value">Resultに保持する失敗を表す値</param>
            <returns>Failure(value)</returns>
        </member>
        <member name="M:LangExt.Result.NewFailure``1">
            <summary>
            失敗した結果としてUnitを格納するResultを生成します。
            通常は、NewFailureではなく、Failureを使用します。
            このメソッドは、成功側の型も指定したい場合に使用します。
            </summary>
            <typeparam name="TSuccess">Resultに保持する成功の型</typeparam>
            <returns>Failure(Unit._)</returns>
        </member>
        <member name="M:LangExt.Result.Failure``1(``0)">
            <summary>
            失敗した結果としてvalueを格納するResultを生成します。
            </summary>
            <typeparam name="TFailure">Resultに格納する失敗の型</typeparam>
            <param name="value">Resultに保持する失敗を表す値</param>
            <returns>Failure(value)</returns>
        </member>
        <member name="M:LangExt.Result.Failure">
            <summary>
            失敗した結果としてUnitを格納するResultを生成します。
            </summary>
            <returns>Failure(Unit._)</returns>
        </member>
        <member name="M:LangExt.Result.FromFunc``1(System.Func{``0})">
            <summary>
            失敗しうる無引数関数からResultを生成します。
            この関数は、例外を使用するAPIとResultを使ったAPIの橋渡しをします。
            </summary>
            <typeparam name="TSuccess">関数が成功した場合の型(戻り値の型)</typeparam>
            <param name="f">実行する関数</param>
            <returns>関数が成功した場合、結果をSuccessで包んだ値。失敗した場合、例外をFailureで包んだ値。</returns>
        </member>
        <member name="M:LangExt.Result.IsSuccess``2(LangExt.Result{``0,``1})">
            <summary>
            成功かどうかを判断する関数が必要な時に使います。
            Result[TSuccess, TFailure]がプロパティとしてIsSuccessを持つため、拡張メソッドにはしていません。
            </summary>
        </member>
        <member name="M:LangExt.Result.IsFailure``2(LangExt.Result{``0,``1})">
            <summary>
            失敗かどうかを判断する関数が必要な時に使います。
            Result[TSuccess, TFailure]がプロパティとしてIsFailureを持つため、拡張メソッドにはしていません。
            </summary>
        </member>
        <member name="M:LangExt.Result.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Result.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Result.Match``4(LangExt.Result{``0,System.Tuple{``1,``2}},System.Func{``0,``3},System.Func{``1,``2,``3})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``5(LangExt.Result{``0,System.Tuple{``1,``2,``3}},System.Func{``0,``4},System.Func{``1,``2,``3,``4})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``6(LangExt.Result{``0,System.Tuple{``1,``2,``3,``4}},System.Func{``0,``5},System.Func{``1,``2,``3,``4,``5})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``7(LangExt.Result{``0,System.Tuple{``1,``2,``3,``4,``5}},System.Func{``0,``6},System.Func{``1,``2,``3,``4,``5,``6})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``8(LangExt.Result{``0,System.Tuple{``1,``2,``3,``4,``5,``6}},System.Func{``0,``7},System.Func{``1,``2,``3,``4,``5,``6,``7})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``9(LangExt.Result{``0,System.Tuple{``1,``2,``3,``4,``5,``6,``7}},System.Func{``0,``8},System.Func{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``10(LangExt.Result{``0,System.Tuple{``1,``2,``3,``4,``5,``6,``7,System.Tuple{``8}}},System.Func{``0,``9},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``11(LangExt.Result{``0,System.Tuple{``1,``2,``3,``4,``5,``6,``7,System.Tuple{``8,``9}}},System.Func{``0,``10},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``12(LangExt.Result{``0,System.Tuple{``1,``2,``3,``4,``5,``6,``7,System.Tuple{``8,``9,``10}}},System.Func{``0,``11},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``13(LangExt.Result{``0,System.Tuple{``1,``2,``3,``4,``5,``6,``7,System.Tuple{``8,``9,``10,``11}}},System.Func{``0,``12},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``14(LangExt.Result{``0,System.Tuple{``1,``2,``3,``4,``5,``6,``7,System.Tuple{``8,``9,``10,``11,``12}}},System.Func{``0,``13},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``15(LangExt.Result{``0,System.Tuple{``1,``2,``3,``4,``5,``6,``7,System.Tuple{``8,``9,``10,``11,``12,``13}}},System.Func{``0,``14},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``16(LangExt.Result{``0,System.Tuple{``1,``2,``3,``4,``5,``6,``7,System.Tuple{``8,``9,``10,``11,``12,``13,``14}}},System.Func{``0,``15},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``17(LangExt.Result{``0,System.Tuple{``1,``2,``3,``4,``5,``6,``7,System.Tuple{``8,``9,``10,``11,``12,``13,``14,System.Tuple{``15}}}},System.Func{``0,``16},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``18(LangExt.Result{``0,System.Tuple{``1,``2,``3,``4,``5,``6,``7,System.Tuple{``8,``9,``10,``11,``12,``13,``14,System.Tuple{``15,``16}}}},System.Func{``0,``17},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``4(LangExt.Result{System.Tuple{``0,``1},``2},System.Func{``0,``1,``3},System.Func{``2,``3})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``5(LangExt.Result{System.Tuple{``0,``1},System.Tuple{``2,``3}},System.Func{``0,``1,``4},System.Func{``2,``3,``4})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``6(LangExt.Result{System.Tuple{``0,``1},System.Tuple{``2,``3,``4}},System.Func{``0,``1,``5},System.Func{``2,``3,``4,``5})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``7(LangExt.Result{System.Tuple{``0,``1},System.Tuple{``2,``3,``4,``5}},System.Func{``0,``1,``6},System.Func{``2,``3,``4,``5,``6})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``8(LangExt.Result{System.Tuple{``0,``1},System.Tuple{``2,``3,``4,``5,``6}},System.Func{``0,``1,``7},System.Func{``2,``3,``4,``5,``6,``7})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``9(LangExt.Result{System.Tuple{``0,``1},System.Tuple{``2,``3,``4,``5,``6,``7}},System.Func{``0,``1,``8},System.Func{``2,``3,``4,``5,``6,``7,``8})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``10(LangExt.Result{System.Tuple{``0,``1},System.Tuple{``2,``3,``4,``5,``6,``7,``8}},System.Func{``0,``1,``9},System.Func{``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``11(LangExt.Result{System.Tuple{``0,``1},System.Tuple{``2,``3,``4,``5,``6,``7,``8,System.Tuple{``9}}},System.Func{``0,``1,``10},System.Func{``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``12(LangExt.Result{System.Tuple{``0,``1},System.Tuple{``2,``3,``4,``5,``6,``7,``8,System.Tuple{``9,``10}}},System.Func{``0,``1,``11},System.Func{``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``13(LangExt.Result{System.Tuple{``0,``1},System.Tuple{``2,``3,``4,``5,``6,``7,``8,System.Tuple{``9,``10,``11}}},System.Func{``0,``1,``12},System.Func{``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``14(LangExt.Result{System.Tuple{``0,``1},System.Tuple{``2,``3,``4,``5,``6,``7,``8,System.Tuple{``9,``10,``11,``12}}},System.Func{``0,``1,``13},System.Func{``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``15(LangExt.Result{System.Tuple{``0,``1},System.Tuple{``2,``3,``4,``5,``6,``7,``8,System.Tuple{``9,``10,``11,``12,``13}}},System.Func{``0,``1,``14},System.Func{``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``16(LangExt.Result{System.Tuple{``0,``1},System.Tuple{``2,``3,``4,``5,``6,``7,``8,System.Tuple{``9,``10,``11,``12,``13,``14}}},System.Func{``0,``1,``15},System.Func{``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``17(LangExt.Result{System.Tuple{``0,``1},System.Tuple{``2,``3,``4,``5,``6,``7,``8,System.Tuple{``9,``10,``11,``12,``13,``14,``15}}},System.Func{``0,``1,``16},System.Func{``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``18(LangExt.Result{System.Tuple{``0,``1},System.Tuple{``2,``3,``4,``5,``6,``7,``8,System.Tuple{``9,``10,``11,``12,``13,``14,``15,System.Tuple{``16}}}},System.Func{``0,``1,``17},System.Func{``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``19(LangExt.Result{System.Tuple{``0,``1},System.Tuple{``2,``3,``4,``5,``6,``7,``8,System.Tuple{``9,``10,``11,``12,``13,``14,``15,System.Tuple{``16,``17}}}},System.Func{``0,``1,``18},System.Func{``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``5(LangExt.Result{System.Tuple{``0,``1,``2},``3},System.Func{``0,``1,``2,``4},System.Func{``3,``4})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``6(LangExt.Result{System.Tuple{``0,``1,``2},System.Tuple{``3,``4}},System.Func{``0,``1,``2,``5},System.Func{``3,``4,``5})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``7(LangExt.Result{System.Tuple{``0,``1,``2},System.Tuple{``3,``4,``5}},System.Func{``0,``1,``2,``6},System.Func{``3,``4,``5,``6})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``8(LangExt.Result{System.Tuple{``0,``1,``2},System.Tuple{``3,``4,``5,``6}},System.Func{``0,``1,``2,``7},System.Func{``3,``4,``5,``6,``7})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``9(LangExt.Result{System.Tuple{``0,``1,``2},System.Tuple{``3,``4,``5,``6,``7}},System.Func{``0,``1,``2,``8},System.Func{``3,``4,``5,``6,``7,``8})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``10(LangExt.Result{System.Tuple{``0,``1,``2},System.Tuple{``3,``4,``5,``6,``7,``8}},System.Func{``0,``1,``2,``9},System.Func{``3,``4,``5,``6,``7,``8,``9})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``11(LangExt.Result{System.Tuple{``0,``1,``2},System.Tuple{``3,``4,``5,``6,``7,``8,``9}},System.Func{``0,``1,``2,``10},System.Func{``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``12(LangExt.Result{System.Tuple{``0,``1,``2},System.Tuple{``3,``4,``5,``6,``7,``8,``9,System.Tuple{``10}}},System.Func{``0,``1,``2,``11},System.Func{``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``13(LangExt.Result{System.Tuple{``0,``1,``2},System.Tuple{``3,``4,``5,``6,``7,``8,``9,System.Tuple{``10,``11}}},System.Func{``0,``1,``2,``12},System.Func{``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``14(LangExt.Result{System.Tuple{``0,``1,``2},System.Tuple{``3,``4,``5,``6,``7,``8,``9,System.Tuple{``10,``11,``12}}},System.Func{``0,``1,``2,``13},System.Func{``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``15(LangExt.Result{System.Tuple{``0,``1,``2},System.Tuple{``3,``4,``5,``6,``7,``8,``9,System.Tuple{``10,``11,``12,``13}}},System.Func{``0,``1,``2,``14},System.Func{``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``16(LangExt.Result{System.Tuple{``0,``1,``2},System.Tuple{``3,``4,``5,``6,``7,``8,``9,System.Tuple{``10,``11,``12,``13,``14}}},System.Func{``0,``1,``2,``15},System.Func{``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``17(LangExt.Result{System.Tuple{``0,``1,``2},System.Tuple{``3,``4,``5,``6,``7,``8,``9,System.Tuple{``10,``11,``12,``13,``14,``15}}},System.Func{``0,``1,``2,``16},System.Func{``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``18(LangExt.Result{System.Tuple{``0,``1,``2},System.Tuple{``3,``4,``5,``6,``7,``8,``9,System.Tuple{``10,``11,``12,``13,``14,``15,``16}}},System.Func{``0,``1,``2,``17},System.Func{``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``19(LangExt.Result{System.Tuple{``0,``1,``2},System.Tuple{``3,``4,``5,``6,``7,``8,``9,System.Tuple{``10,``11,``12,``13,``14,``15,``16,System.Tuple{``17}}}},System.Func{``0,``1,``2,``18},System.Func{``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``20(LangExt.Result{System.Tuple{``0,``1,``2},System.Tuple{``3,``4,``5,``6,``7,``8,``9,System.Tuple{``10,``11,``12,``13,``14,``15,``16,System.Tuple{``17,``18}}}},System.Func{``0,``1,``2,``19},System.Func{``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``6(LangExt.Result{System.Tuple{``0,``1,``2,``3},``4},System.Func{``0,``1,``2,``3,``5},System.Func{``4,``5})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``7(LangExt.Result{System.Tuple{``0,``1,``2,``3},System.Tuple{``4,``5}},System.Func{``0,``1,``2,``3,``6},System.Func{``4,``5,``6})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``8(LangExt.Result{System.Tuple{``0,``1,``2,``3},System.Tuple{``4,``5,``6}},System.Func{``0,``1,``2,``3,``7},System.Func{``4,``5,``6,``7})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``9(LangExt.Result{System.Tuple{``0,``1,``2,``3},System.Tuple{``4,``5,``6,``7}},System.Func{``0,``1,``2,``3,``8},System.Func{``4,``5,``6,``7,``8})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``10(LangExt.Result{System.Tuple{``0,``1,``2,``3},System.Tuple{``4,``5,``6,``7,``8}},System.Func{``0,``1,``2,``3,``9},System.Func{``4,``5,``6,``7,``8,``9})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``11(LangExt.Result{System.Tuple{``0,``1,``2,``3},System.Tuple{``4,``5,``6,``7,``8,``9}},System.Func{``0,``1,``2,``3,``10},System.Func{``4,``5,``6,``7,``8,``9,``10})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``12(LangExt.Result{System.Tuple{``0,``1,``2,``3},System.Tuple{``4,``5,``6,``7,``8,``9,``10}},System.Func{``0,``1,``2,``3,``11},System.Func{``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``13(LangExt.Result{System.Tuple{``0,``1,``2,``3},System.Tuple{``4,``5,``6,``7,``8,``9,``10,System.Tuple{``11}}},System.Func{``0,``1,``2,``3,``12},System.Func{``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``14(LangExt.Result{System.Tuple{``0,``1,``2,``3},System.Tuple{``4,``5,``6,``7,``8,``9,``10,System.Tuple{``11,``12}}},System.Func{``0,``1,``2,``3,``13},System.Func{``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``15(LangExt.Result{System.Tuple{``0,``1,``2,``3},System.Tuple{``4,``5,``6,``7,``8,``9,``10,System.Tuple{``11,``12,``13}}},System.Func{``0,``1,``2,``3,``14},System.Func{``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``16(LangExt.Result{System.Tuple{``0,``1,``2,``3},System.Tuple{``4,``5,``6,``7,``8,``9,``10,System.Tuple{``11,``12,``13,``14}}},System.Func{``0,``1,``2,``3,``15},System.Func{``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``17(LangExt.Result{System.Tuple{``0,``1,``2,``3},System.Tuple{``4,``5,``6,``7,``8,``9,``10,System.Tuple{``11,``12,``13,``14,``15}}},System.Func{``0,``1,``2,``3,``16},System.Func{``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``18(LangExt.Result{System.Tuple{``0,``1,``2,``3},System.Tuple{``4,``5,``6,``7,``8,``9,``10,System.Tuple{``11,``12,``13,``14,``15,``16}}},System.Func{``0,``1,``2,``3,``17},System.Func{``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``19(LangExt.Result{System.Tuple{``0,``1,``2,``3},System.Tuple{``4,``5,``6,``7,``8,``9,``10,System.Tuple{``11,``12,``13,``14,``15,``16,``17}}},System.Func{``0,``1,``2,``3,``18},System.Func{``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``20(LangExt.Result{System.Tuple{``0,``1,``2,``3},System.Tuple{``4,``5,``6,``7,``8,``9,``10,System.Tuple{``11,``12,``13,``14,``15,``16,``17,System.Tuple{``18}}}},System.Func{``0,``1,``2,``3,``19},System.Func{``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``21(LangExt.Result{System.Tuple{``0,``1,``2,``3},System.Tuple{``4,``5,``6,``7,``8,``9,``10,System.Tuple{``11,``12,``13,``14,``15,``16,``17,System.Tuple{``18,``19}}}},System.Func{``0,``1,``2,``3,``20},System.Func{``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``7(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},``5},System.Func{``0,``1,``2,``3,``4,``6},System.Func{``5,``6})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``8(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},System.Tuple{``5,``6}},System.Func{``0,``1,``2,``3,``4,``7},System.Func{``5,``6,``7})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``9(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},System.Tuple{``5,``6,``7}},System.Func{``0,``1,``2,``3,``4,``8},System.Func{``5,``6,``7,``8})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``10(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},System.Tuple{``5,``6,``7,``8}},System.Func{``0,``1,``2,``3,``4,``9},System.Func{``5,``6,``7,``8,``9})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``11(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},System.Tuple{``5,``6,``7,``8,``9}},System.Func{``0,``1,``2,``3,``4,``10},System.Func{``5,``6,``7,``8,``9,``10})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``12(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},System.Tuple{``5,``6,``7,``8,``9,``10}},System.Func{``0,``1,``2,``3,``4,``11},System.Func{``5,``6,``7,``8,``9,``10,``11})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``13(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},System.Tuple{``5,``6,``7,``8,``9,``10,``11}},System.Func{``0,``1,``2,``3,``4,``12},System.Func{``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``14(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},System.Tuple{``5,``6,``7,``8,``9,``10,``11,System.Tuple{``12}}},System.Func{``0,``1,``2,``3,``4,``13},System.Func{``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``15(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},System.Tuple{``5,``6,``7,``8,``9,``10,``11,System.Tuple{``12,``13}}},System.Func{``0,``1,``2,``3,``4,``14},System.Func{``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``16(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},System.Tuple{``5,``6,``7,``8,``9,``10,``11,System.Tuple{``12,``13,``14}}},System.Func{``0,``1,``2,``3,``4,``15},System.Func{``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},System.Tuple{``5,``6,``7,``8,``9,``10,``11,System.Tuple{``12,``13,``14,``15}}},System.Func{``0,``1,``2,``3,``4,``16},System.Func{``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``18(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},System.Tuple{``5,``6,``7,``8,``9,``10,``11,System.Tuple{``12,``13,``14,``15,``16}}},System.Func{``0,``1,``2,``3,``4,``17},System.Func{``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``19(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},System.Tuple{``5,``6,``7,``8,``9,``10,``11,System.Tuple{``12,``13,``14,``15,``16,``17}}},System.Func{``0,``1,``2,``3,``4,``18},System.Func{``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``20(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},System.Tuple{``5,``6,``7,``8,``9,``10,``11,System.Tuple{``12,``13,``14,``15,``16,``17,``18}}},System.Func{``0,``1,``2,``3,``4,``19},System.Func{``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``21(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},System.Tuple{``5,``6,``7,``8,``9,``10,``11,System.Tuple{``12,``13,``14,``15,``16,``17,``18,System.Tuple{``19}}}},System.Func{``0,``1,``2,``3,``4,``20},System.Func{``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``22(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},System.Tuple{``5,``6,``7,``8,``9,``10,``11,System.Tuple{``12,``13,``14,``15,``16,``17,``18,System.Tuple{``19,``20}}}},System.Func{``0,``1,``2,``3,``4,``21},System.Func{``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``8(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},``6},System.Func{``0,``1,``2,``3,``4,``5,``7},System.Func{``6,``7})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``9(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},System.Tuple{``6,``7}},System.Func{``0,``1,``2,``3,``4,``5,``8},System.Func{``6,``7,``8})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``10(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},System.Tuple{``6,``7,``8}},System.Func{``0,``1,``2,``3,``4,``5,``9},System.Func{``6,``7,``8,``9})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``11(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},System.Tuple{``6,``7,``8,``9}},System.Func{``0,``1,``2,``3,``4,``5,``10},System.Func{``6,``7,``8,``9,``10})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``12(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},System.Tuple{``6,``7,``8,``9,``10}},System.Func{``0,``1,``2,``3,``4,``5,``11},System.Func{``6,``7,``8,``9,``10,``11})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``13(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},System.Tuple{``6,``7,``8,``9,``10,``11}},System.Func{``0,``1,``2,``3,``4,``5,``12},System.Func{``6,``7,``8,``9,``10,``11,``12})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``14(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},System.Tuple{``6,``7,``8,``9,``10,``11,``12}},System.Func{``0,``1,``2,``3,``4,``5,``13},System.Func{``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``15(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},System.Tuple{``6,``7,``8,``9,``10,``11,``12,System.Tuple{``13}}},System.Func{``0,``1,``2,``3,``4,``5,``14},System.Func{``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``16(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},System.Tuple{``6,``7,``8,``9,``10,``11,``12,System.Tuple{``13,``14}}},System.Func{``0,``1,``2,``3,``4,``5,``15},System.Func{``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},System.Tuple{``6,``7,``8,``9,``10,``11,``12,System.Tuple{``13,``14,``15}}},System.Func{``0,``1,``2,``3,``4,``5,``16},System.Func{``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``18(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},System.Tuple{``6,``7,``8,``9,``10,``11,``12,System.Tuple{``13,``14,``15,``16}}},System.Func{``0,``1,``2,``3,``4,``5,``17},System.Func{``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``19(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},System.Tuple{``6,``7,``8,``9,``10,``11,``12,System.Tuple{``13,``14,``15,``16,``17}}},System.Func{``0,``1,``2,``3,``4,``5,``18},System.Func{``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``20(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},System.Tuple{``6,``7,``8,``9,``10,``11,``12,System.Tuple{``13,``14,``15,``16,``17,``18}}},System.Func{``0,``1,``2,``3,``4,``5,``19},System.Func{``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``21(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},System.Tuple{``6,``7,``8,``9,``10,``11,``12,System.Tuple{``13,``14,``15,``16,``17,``18,``19}}},System.Func{``0,``1,``2,``3,``4,``5,``20},System.Func{``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``22(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},System.Tuple{``6,``7,``8,``9,``10,``11,``12,System.Tuple{``13,``14,``15,``16,``17,``18,``19,System.Tuple{``20}}}},System.Func{``0,``1,``2,``3,``4,``5,``21},System.Func{``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``23(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},System.Tuple{``6,``7,``8,``9,``10,``11,``12,System.Tuple{``13,``14,``15,``16,``17,``18,``19,System.Tuple{``20,``21}}}},System.Func{``0,``1,``2,``3,``4,``5,``22},System.Func{``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``9(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7},System.Func{``0,``1,``2,``3,``4,``5,``6,``8},System.Func{``7,``8})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``10(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Tuple{``7,``8}},System.Func{``0,``1,``2,``3,``4,``5,``6,``9},System.Func{``7,``8,``9})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``11(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Tuple{``7,``8,``9}},System.Func{``0,``1,``2,``3,``4,``5,``6,``10},System.Func{``7,``8,``9,``10})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``12(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Tuple{``7,``8,``9,``10}},System.Func{``0,``1,``2,``3,``4,``5,``6,``11},System.Func{``7,``8,``9,``10,``11})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``13(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Tuple{``7,``8,``9,``10,``11}},System.Func{``0,``1,``2,``3,``4,``5,``6,``12},System.Func{``7,``8,``9,``10,``11,``12})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``14(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``0,``1,``2,``3,``4,``5,``6,``13},System.Func{``7,``8,``9,``10,``11,``12,``13})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``15(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``0,``1,``2,``3,``4,``5,``6,``14},System.Func{``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``16(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``15},System.Func{``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``16},System.Func{``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``18(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``17},System.Func{``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``19(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``18},System.Func{``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``20(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``19},System.Func{``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``21(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``20},System.Func{``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``22(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19,``20}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``21},System.Func{``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``23(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19,``20,System.Tuple{``21}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``22},System.Func{``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``24(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19,``20,System.Tuple{``21,``22}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``23},System.Func{``7,``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``10(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``9},System.Func{``8,``9})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``11(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Tuple{``8,``9}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``10},System.Func{``8,``9,``10})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``12(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Tuple{``8,``9,``10}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``11},System.Func{``8,``9,``10,``11})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``13(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Tuple{``8,``9,``10,``11}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``12},System.Func{``8,``9,``10,``11,``12})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``14(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Tuple{``8,``9,``10,``11,``12}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``13},System.Func{``8,``9,``10,``11,``12,``13})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``15(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Tuple{``8,``9,``10,``11,``12,``13}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``14},System.Func{``8,``9,``10,``11,``12,``13,``14})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``16(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Tuple{``8,``9,``10,``11,``12,``13,``14}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``15},System.Func{``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Tuple{``8,``9,``10,``11,``12,``13,``14,System.Tuple{``15}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``16},System.Func{``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``18(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Tuple{``8,``9,``10,``11,``12,``13,``14,System.Tuple{``15,``16}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``17},System.Func{``8,``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``19(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Tuple{``8,``9,``10,``11,``12,``13,``14,System.Tuple{``15,``16,``17}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``18},System.Func{``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``20(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Tuple{``8,``9,``10,``11,``12,``13,``14,System.Tuple{``15,``16,``17,``18}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``19},System.Func{``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``21(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Tuple{``8,``9,``10,``11,``12,``13,``14,System.Tuple{``15,``16,``17,``18,``19}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``20},System.Func{``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``22(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Tuple{``8,``9,``10,``11,``12,``13,``14,System.Tuple{``15,``16,``17,``18,``19,``20}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``21},System.Func{``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``23(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Tuple{``8,``9,``10,``11,``12,``13,``14,System.Tuple{``15,``16,``17,``18,``19,``20,``21}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``22},System.Func{``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``24(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Tuple{``8,``9,``10,``11,``12,``13,``14,System.Tuple{``15,``16,``17,``18,``19,``20,``21,System.Tuple{``22}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``23},System.Func{``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``25(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Tuple{``8,``9,``10,``11,``12,``13,``14,System.Tuple{``15,``16,``17,``18,``19,``20,``21,System.Tuple{``22,``23}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``24},System.Func{``8,``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``11(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``10},System.Func{``9,``10})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``12(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Tuple{``9,``10}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``11},System.Func{``9,``10,``11})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``13(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Tuple{``9,``10,``11}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``12},System.Func{``9,``10,``11,``12})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``14(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Tuple{``9,``10,``11,``12}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``13},System.Func{``9,``10,``11,``12,``13})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``15(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Tuple{``9,``10,``11,``12,``13}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``14},System.Func{``9,``10,``11,``12,``13,``14})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``16(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Tuple{``9,``10,``11,``12,``13,``14}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``15},System.Func{``9,``10,``11,``12,``13,``14,``15})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Tuple{``9,``10,``11,``12,``13,``14,``15}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``16},System.Func{``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``18(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Tuple{``9,``10,``11,``12,``13,``14,``15,System.Tuple{``16}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``17},System.Func{``9,``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``19(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Tuple{``9,``10,``11,``12,``13,``14,``15,System.Tuple{``16,``17}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``18},System.Func{``9,``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``20(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Tuple{``9,``10,``11,``12,``13,``14,``15,System.Tuple{``16,``17,``18}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``19},System.Func{``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``21(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Tuple{``9,``10,``11,``12,``13,``14,``15,System.Tuple{``16,``17,``18,``19}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``20},System.Func{``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``22(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Tuple{``9,``10,``11,``12,``13,``14,``15,System.Tuple{``16,``17,``18,``19,``20}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``21},System.Func{``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``23(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Tuple{``9,``10,``11,``12,``13,``14,``15,System.Tuple{``16,``17,``18,``19,``20,``21}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``22},System.Func{``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``24(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Tuple{``9,``10,``11,``12,``13,``14,``15,System.Tuple{``16,``17,``18,``19,``20,``21,``22}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``23},System.Func{``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``25(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Tuple{``9,``10,``11,``12,``13,``14,``15,System.Tuple{``16,``17,``18,``19,``20,``21,``22,System.Tuple{``23}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``24},System.Func{``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``26(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Tuple{``9,``10,``11,``12,``13,``14,``15,System.Tuple{``16,``17,``18,``19,``20,``21,``22,System.Tuple{``23,``24}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``25},System.Func{``9,``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``12(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``11},System.Func{``10,``11})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``13(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Tuple{``10,``11}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``12},System.Func{``10,``11,``12})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``14(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Tuple{``10,``11,``12}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``13},System.Func{``10,``11,``12,``13})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``15(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Tuple{``10,``11,``12,``13}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``14},System.Func{``10,``11,``12,``13,``14})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``16(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Tuple{``10,``11,``12,``13,``14}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``15},System.Func{``10,``11,``12,``13,``14,``15})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Tuple{``10,``11,``12,``13,``14,``15}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``16},System.Func{``10,``11,``12,``13,``14,``15,``16})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``18(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Tuple{``10,``11,``12,``13,``14,``15,``16}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``17},System.Func{``10,``11,``12,``13,``14,``15,``16,``17})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``19(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Tuple{``10,``11,``12,``13,``14,``15,``16,System.Tuple{``17}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``18},System.Func{``10,``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``20(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Tuple{``10,``11,``12,``13,``14,``15,``16,System.Tuple{``17,``18}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``19},System.Func{``10,``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``21(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Tuple{``10,``11,``12,``13,``14,``15,``16,System.Tuple{``17,``18,``19}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``20},System.Func{``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``22(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Tuple{``10,``11,``12,``13,``14,``15,``16,System.Tuple{``17,``18,``19,``20}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``21},System.Func{``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``23(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Tuple{``10,``11,``12,``13,``14,``15,``16,System.Tuple{``17,``18,``19,``20,``21}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``22},System.Func{``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``24(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Tuple{``10,``11,``12,``13,``14,``15,``16,System.Tuple{``17,``18,``19,``20,``21,``22}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``23},System.Func{``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``25(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Tuple{``10,``11,``12,``13,``14,``15,``16,System.Tuple{``17,``18,``19,``20,``21,``22,``23}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``24},System.Func{``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``26(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Tuple{``10,``11,``12,``13,``14,``15,``16,System.Tuple{``17,``18,``19,``20,``21,``22,``23,System.Tuple{``24}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``25},System.Func{``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``27(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Tuple{``10,``11,``12,``13,``14,``15,``16,System.Tuple{``17,``18,``19,``20,``21,``22,``23,System.Tuple{``24,``25}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``26},System.Func{``10,``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``13(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``12},System.Func{``11,``12})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``14(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Tuple{``11,``12}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``13},System.Func{``11,``12,``13})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``15(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Tuple{``11,``12,``13}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``14},System.Func{``11,``12,``13,``14})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``16(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Tuple{``11,``12,``13,``14}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``15},System.Func{``11,``12,``13,``14,``15})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Tuple{``11,``12,``13,``14,``15}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``16},System.Func{``11,``12,``13,``14,``15,``16})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``18(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Tuple{``11,``12,``13,``14,``15,``16}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``17},System.Func{``11,``12,``13,``14,``15,``16,``17})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``19(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Tuple{``11,``12,``13,``14,``15,``16,``17}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``18},System.Func{``11,``12,``13,``14,``15,``16,``17,``18})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``20(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Tuple{``11,``12,``13,``14,``15,``16,``17,System.Tuple{``18}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``19},System.Func{``11,``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``21(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Tuple{``11,``12,``13,``14,``15,``16,``17,System.Tuple{``18,``19}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``20},System.Func{``11,``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``22(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Tuple{``11,``12,``13,``14,``15,``16,``17,System.Tuple{``18,``19,``20}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``21},System.Func{``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``23(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Tuple{``11,``12,``13,``14,``15,``16,``17,System.Tuple{``18,``19,``20,``21}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``22},System.Func{``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``24(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Tuple{``11,``12,``13,``14,``15,``16,``17,System.Tuple{``18,``19,``20,``21,``22}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``23},System.Func{``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``25(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Tuple{``11,``12,``13,``14,``15,``16,``17,System.Tuple{``18,``19,``20,``21,``22,``23}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``24},System.Func{``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``26(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Tuple{``11,``12,``13,``14,``15,``16,``17,System.Tuple{``18,``19,``20,``21,``22,``23,``24}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``25},System.Func{``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``27(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Tuple{``11,``12,``13,``14,``15,``16,``17,System.Tuple{``18,``19,``20,``21,``22,``23,``24,System.Tuple{``25}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``26},System.Func{``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``28(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Tuple{``11,``12,``13,``14,``15,``16,``17,System.Tuple{``18,``19,``20,``21,``22,``23,``24,System.Tuple{``25,``26}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``27},System.Func{``11,``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``14(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``13},System.Func{``12,``13})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``15(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Tuple{``12,``13}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``14},System.Func{``12,``13,``14})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``16(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Tuple{``12,``13,``14}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``15},System.Func{``12,``13,``14,``15})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Tuple{``12,``13,``14,``15}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``16},System.Func{``12,``13,``14,``15,``16})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``18(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Tuple{``12,``13,``14,``15,``16}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``17},System.Func{``12,``13,``14,``15,``16,``17})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``19(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Tuple{``12,``13,``14,``15,``16,``17}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``18},System.Func{``12,``13,``14,``15,``16,``17,``18})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``20(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Tuple{``12,``13,``14,``15,``16,``17,``18}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``19},System.Func{``12,``13,``14,``15,``16,``17,``18,``19})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``21(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Tuple{``12,``13,``14,``15,``16,``17,``18,System.Tuple{``19}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``20},System.Func{``12,``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``22(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Tuple{``12,``13,``14,``15,``16,``17,``18,System.Tuple{``19,``20}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``21},System.Func{``12,``13,``14,``15,``16,``17,``18,``19,``20,``21})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``23(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Tuple{``12,``13,``14,``15,``16,``17,``18,System.Tuple{``19,``20,``21}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``22},System.Func{``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``24(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Tuple{``12,``13,``14,``15,``16,``17,``18,System.Tuple{``19,``20,``21,``22}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``23},System.Func{``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``25(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Tuple{``12,``13,``14,``15,``16,``17,``18,System.Tuple{``19,``20,``21,``22,``23}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``24},System.Func{``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``26(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Tuple{``12,``13,``14,``15,``16,``17,``18,System.Tuple{``19,``20,``21,``22,``23,``24}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``25},System.Func{``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``27(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Tuple{``12,``13,``14,``15,``16,``17,``18,System.Tuple{``19,``20,``21,``22,``23,``24,``25}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``26},System.Func{``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``28(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Tuple{``12,``13,``14,``15,``16,``17,``18,System.Tuple{``19,``20,``21,``22,``23,``24,``25,System.Tuple{``26}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``27},System.Func{``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``29(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Tuple{``12,``13,``14,``15,``16,``17,``18,System.Tuple{``19,``20,``21,``22,``23,``24,``25,System.Tuple{``26,``27}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``28},System.Func{``12,``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27,``28})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``15(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``14},System.Func{``13,``14})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``16(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Tuple{``13,``14}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``15},System.Func{``13,``14,``15})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Tuple{``13,``14,``15}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``16},System.Func{``13,``14,``15,``16})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``18(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Tuple{``13,``14,``15,``16}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``17},System.Func{``13,``14,``15,``16,``17})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``19(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Tuple{``13,``14,``15,``16,``17}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``18},System.Func{``13,``14,``15,``16,``17,``18})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``20(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Tuple{``13,``14,``15,``16,``17,``18}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``19},System.Func{``13,``14,``15,``16,``17,``18,``19})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``21(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Tuple{``13,``14,``15,``16,``17,``18,``19}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``20},System.Func{``13,``14,``15,``16,``17,``18,``19,``20})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``22(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Tuple{``13,``14,``15,``16,``17,``18,``19,System.Tuple{``20}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``21},System.Func{``13,``14,``15,``16,``17,``18,``19,``20,``21})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``23(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Tuple{``13,``14,``15,``16,``17,``18,``19,System.Tuple{``20,``21}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``22},System.Func{``13,``14,``15,``16,``17,``18,``19,``20,``21,``22})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``24(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Tuple{``13,``14,``15,``16,``17,``18,``19,System.Tuple{``20,``21,``22}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``23},System.Func{``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``25(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Tuple{``13,``14,``15,``16,``17,``18,``19,System.Tuple{``20,``21,``22,``23}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``24},System.Func{``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``26(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Tuple{``13,``14,``15,``16,``17,``18,``19,System.Tuple{``20,``21,``22,``23,``24}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``25},System.Func{``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``27(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Tuple{``13,``14,``15,``16,``17,``18,``19,System.Tuple{``20,``21,``22,``23,``24,``25}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``26},System.Func{``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``28(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Tuple{``13,``14,``15,``16,``17,``18,``19,System.Tuple{``20,``21,``22,``23,``24,``25,``26}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``27},System.Func{``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``29(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Tuple{``13,``14,``15,``16,``17,``18,``19,System.Tuple{``20,``21,``22,``23,``24,``25,``26,System.Tuple{``27}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``28},System.Func{``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27,``28})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``30(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Tuple{``13,``14,``15,``16,``17,``18,``19,System.Tuple{``20,``21,``22,``23,``24,``25,``26,System.Tuple{``27,``28}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``29},System.Func{``13,``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27,``28,``29})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``16(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``15},System.Func{``14,``15})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Tuple{``14,``15}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``16},System.Func{``14,``15,``16})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``18(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Tuple{``14,``15,``16}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``17},System.Func{``14,``15,``16,``17})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``19(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Tuple{``14,``15,``16,``17}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``18},System.Func{``14,``15,``16,``17,``18})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``20(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Tuple{``14,``15,``16,``17,``18}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``19},System.Func{``14,``15,``16,``17,``18,``19})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``21(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Tuple{``14,``15,``16,``17,``18,``19}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``20},System.Func{``14,``15,``16,``17,``18,``19,``20})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``22(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Tuple{``14,``15,``16,``17,``18,``19,``20}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``21},System.Func{``14,``15,``16,``17,``18,``19,``20,``21})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``23(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Tuple{``14,``15,``16,``17,``18,``19,``20,System.Tuple{``21}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``22},System.Func{``14,``15,``16,``17,``18,``19,``20,``21,``22})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``24(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Tuple{``14,``15,``16,``17,``18,``19,``20,System.Tuple{``21,``22}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``23},System.Func{``14,``15,``16,``17,``18,``19,``20,``21,``22,``23})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``25(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Tuple{``14,``15,``16,``17,``18,``19,``20,System.Tuple{``21,``22,``23}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``24},System.Func{``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``26(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Tuple{``14,``15,``16,``17,``18,``19,``20,System.Tuple{``21,``22,``23,``24}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``25},System.Func{``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``27(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Tuple{``14,``15,``16,``17,``18,``19,``20,System.Tuple{``21,``22,``23,``24,``25}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``26},System.Func{``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``28(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Tuple{``14,``15,``16,``17,``18,``19,``20,System.Tuple{``21,``22,``23,``24,``25,``26}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``27},System.Func{``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``29(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Tuple{``14,``15,``16,``17,``18,``19,``20,System.Tuple{``21,``22,``23,``24,``25,``26,``27}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``28},System.Func{``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27,``28})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``30(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Tuple{``14,``15,``16,``17,``18,``19,``20,System.Tuple{``21,``22,``23,``24,``25,``26,``27,System.Tuple{``28}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``29},System.Func{``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27,``28,``29})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``31(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Tuple{``14,``15,``16,``17,``18,``19,``20,System.Tuple{``21,``22,``23,``24,``25,``26,``27,System.Tuple{``28,``29}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``30},System.Func{``14,``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27,``28,``29,``30})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``16},System.Func{``15,``16})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``18(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Tuple{``15,``16}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``17},System.Func{``15,``16,``17})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``19(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Tuple{``15,``16,``17}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``18},System.Func{``15,``16,``17,``18})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``20(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Tuple{``15,``16,``17,``18}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``19},System.Func{``15,``16,``17,``18,``19})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``21(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Tuple{``15,``16,``17,``18,``19}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``20},System.Func{``15,``16,``17,``18,``19,``20})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``22(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Tuple{``15,``16,``17,``18,``19,``20}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``21},System.Func{``15,``16,``17,``18,``19,``20,``21})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``23(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Tuple{``15,``16,``17,``18,``19,``20,``21}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``22},System.Func{``15,``16,``17,``18,``19,``20,``21,``22})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``24(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Tuple{``15,``16,``17,``18,``19,``20,``21,System.Tuple{``22}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``23},System.Func{``15,``16,``17,``18,``19,``20,``21,``22,``23})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``25(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Tuple{``15,``16,``17,``18,``19,``20,``21,System.Tuple{``22,``23}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``24},System.Func{``15,``16,``17,``18,``19,``20,``21,``22,``23,``24})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``26(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Tuple{``15,``16,``17,``18,``19,``20,``21,System.Tuple{``22,``23,``24}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``25},System.Func{``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``27(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Tuple{``15,``16,``17,``18,``19,``20,``21,System.Tuple{``22,``23,``24,``25}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``26},System.Func{``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``28(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Tuple{``15,``16,``17,``18,``19,``20,``21,System.Tuple{``22,``23,``24,``25,``26}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``27},System.Func{``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``29(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Tuple{``15,``16,``17,``18,``19,``20,``21,System.Tuple{``22,``23,``24,``25,``26,``27}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``28},System.Func{``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27,``28})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``30(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Tuple{``15,``16,``17,``18,``19,``20,``21,System.Tuple{``22,``23,``24,``25,``26,``27,``28}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``29},System.Func{``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27,``28,``29})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``31(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Tuple{``15,``16,``17,``18,``19,``20,``21,System.Tuple{``22,``23,``24,``25,``26,``27,``28,System.Tuple{``29}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``30},System.Func{``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27,``28,``29,``30})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``32(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Tuple{``15,``16,``17,``18,``19,``20,``21,System.Tuple{``22,``23,``24,``25,``26,``27,``28,System.Tuple{``29,``30}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``31},System.Func{``15,``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27,``28,``29,``30,``31})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``18(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``16},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``17},System.Func{``16,``17})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``19(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Tuple{``16,``17}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``18},System.Func{``16,``17,``18})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``20(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Tuple{``16,``17,``18}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``19},System.Func{``16,``17,``18,``19})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``21(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Tuple{``16,``17,``18,``19}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``20},System.Func{``16,``17,``18,``19,``20})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``22(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Tuple{``16,``17,``18,``19,``20}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``21},System.Func{``16,``17,``18,``19,``20,``21})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``23(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Tuple{``16,``17,``18,``19,``20,``21}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``22},System.Func{``16,``17,``18,``19,``20,``21,``22})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``24(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Tuple{``16,``17,``18,``19,``20,``21,``22}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``23},System.Func{``16,``17,``18,``19,``20,``21,``22,``23})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``25(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Tuple{``16,``17,``18,``19,``20,``21,``22,System.Tuple{``23}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``24},System.Func{``16,``17,``18,``19,``20,``21,``22,``23,``24})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``26(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Tuple{``16,``17,``18,``19,``20,``21,``22,System.Tuple{``23,``24}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``25},System.Func{``16,``17,``18,``19,``20,``21,``22,``23,``24,``25})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``27(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Tuple{``16,``17,``18,``19,``20,``21,``22,System.Tuple{``23,``24,``25}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``26},System.Func{``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``28(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Tuple{``16,``17,``18,``19,``20,``21,``22,System.Tuple{``23,``24,``25,``26}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``27},System.Func{``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``29(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Tuple{``16,``17,``18,``19,``20,``21,``22,System.Tuple{``23,``24,``25,``26,``27}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``28},System.Func{``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27,``28})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``30(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Tuple{``16,``17,``18,``19,``20,``21,``22,System.Tuple{``23,``24,``25,``26,``27,``28}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``29},System.Func{``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27,``28,``29})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``31(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Tuple{``16,``17,``18,``19,``20,``21,``22,System.Tuple{``23,``24,``25,``26,``27,``28,``29}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``30},System.Func{``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27,``28,``29,``30})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``32(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Tuple{``16,``17,``18,``19,``20,``21,``22,System.Tuple{``23,``24,``25,``26,``27,``28,``29,System.Tuple{``30}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``31},System.Func{``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27,``28,``29,``30,``31})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.Match``33(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Tuple{``16,``17,``18,``19,``20,``21,``22,System.Tuple{``23,``24,``25,``26,``27,``28,``29,System.Tuple{``30,``31}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``32},System.Func{``16,``17,``18,``19,``20,``21,``22,``23,``24,``25,``26,``27,``28,``29,``30,``31,``32})">
            <summary>タプルの要素を展開して関数に渡すMatchです。</summary>
        </member>
        <member name="M:LangExt.Result.SafeCast``4(LangExt.Result{System.Tuple{``0,``1},``2},System.Func{``0,``1,``3})">
            <summary>
            2要素タプルのResultの各要素を展開して関数に渡すSafeCastです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Count``3(LangExt.Result{System.Tuple{``0,``1},``2},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのResultの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Fold``4(LangExt.Result{System.Tuple{``0,``1},``2},``3,System.Func{``3,``0,``1,``3})">
            <summary>
            2要素タプルのResultの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Forall``3(LangExt.Result{System.Tuple{``0,``1},``2},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのResultの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Exists``3(LangExt.Result{System.Tuple{``0,``1},``2},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのResultの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Map``4(LangExt.Result{System.Tuple{``0,``1},``2},System.Func{``0,``1,``3})">
            <summary>
            2要素タプルのResultの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``3(LangExt.Result{System.Tuple{``0,``1},``2},System.Action{``0,``1})">
            <summary>
            2要素タプルのResultの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Bind``4(LangExt.Result{System.Tuple{``0,``1},``2},System.Func{``0,``1,LangExt.Result{``3,``2}})">
            <summary>
            2要素タプルのResultの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCast``5(LangExt.Result{System.Tuple{``0,``1,``2},``3},System.Func{``0,``1,``2,``4})">
            <summary>
            3要素タプルのResultの各要素を展開して関数に渡すSafeCastです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Count``4(LangExt.Result{System.Tuple{``0,``1,``2},``3},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのResultの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Fold``5(LangExt.Result{System.Tuple{``0,``1,``2},``3},``4,System.Func{``4,``0,``1,``2,``4})">
            <summary>
            3要素タプルのResultの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Forall``4(LangExt.Result{System.Tuple{``0,``1,``2},``3},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのResultの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Exists``4(LangExt.Result{System.Tuple{``0,``1,``2},``3},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのResultの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Map``5(LangExt.Result{System.Tuple{``0,``1,``2},``3},System.Func{``0,``1,``2,``4})">
            <summary>
            3要素タプルのResultの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``4(LangExt.Result{System.Tuple{``0,``1,``2},``3},System.Action{``0,``1,``2})">
            <summary>
            3要素タプルのResultの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Bind``5(LangExt.Result{System.Tuple{``0,``1,``2},``3},System.Func{``0,``1,``2,LangExt.Result{``4,``3}})">
            <summary>
            3要素タプルのResultの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCast``6(LangExt.Result{System.Tuple{``0,``1,``2,``3},``4},System.Func{``0,``1,``2,``3,``5})">
            <summary>
            4要素タプルのResultの各要素を展開して関数に渡すSafeCastです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Count``5(LangExt.Result{System.Tuple{``0,``1,``2,``3},``4},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのResultの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Fold``6(LangExt.Result{System.Tuple{``0,``1,``2,``3},``4},``5,System.Func{``5,``0,``1,``2,``3,``5})">
            <summary>
            4要素タプルのResultの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Forall``5(LangExt.Result{System.Tuple{``0,``1,``2,``3},``4},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのResultの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Exists``5(LangExt.Result{System.Tuple{``0,``1,``2,``3},``4},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのResultの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Map``6(LangExt.Result{System.Tuple{``0,``1,``2,``3},``4},System.Func{``0,``1,``2,``3,``5})">
            <summary>
            4要素タプルのResultの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``5(LangExt.Result{System.Tuple{``0,``1,``2,``3},``4},System.Action{``0,``1,``2,``3})">
            <summary>
            4要素タプルのResultの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Bind``6(LangExt.Result{System.Tuple{``0,``1,``2,``3},``4},System.Func{``0,``1,``2,``3,LangExt.Result{``5,``4}})">
            <summary>
            4要素タプルのResultの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCast``7(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},``5},System.Func{``0,``1,``2,``3,``4,``6})">
            <summary>
            5要素タプルのResultの各要素を展開して関数に渡すSafeCastです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Count``6(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},``5},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのResultの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Fold``7(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},``5},``6,System.Func{``6,``0,``1,``2,``3,``4,``6})">
            <summary>
            5要素タプルのResultの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Forall``6(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},``5},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのResultの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Exists``6(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},``5},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのResultの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Map``7(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},``5},System.Func{``0,``1,``2,``3,``4,``6})">
            <summary>
            5要素タプルのResultの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``6(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},``5},System.Action{``0,``1,``2,``3,``4})">
            <summary>
            5要素タプルのResultの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Bind``7(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4},``5},System.Func{``0,``1,``2,``3,``4,LangExt.Result{``6,``5}})">
            <summary>
            5要素タプルのResultの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCast``8(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},``6},System.Func{``0,``1,``2,``3,``4,``5,``7})">
            <summary>
            6要素タプルのResultの各要素を展開して関数に渡すSafeCastです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Count``7(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},``6},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのResultの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Fold``8(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},``6},``7,System.Func{``7,``0,``1,``2,``3,``4,``5,``7})">
            <summary>
            6要素タプルのResultの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Forall``7(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},``6},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのResultの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Exists``7(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},``6},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのResultの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Map``8(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},``6},System.Func{``0,``1,``2,``3,``4,``5,``7})">
            <summary>
            6要素タプルのResultの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``7(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},``6},System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            6要素タプルのResultの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Bind``8(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5},``6},System.Func{``0,``1,``2,``3,``4,``5,LangExt.Result{``7,``6}})">
            <summary>
            6要素タプルのResultの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCast``9(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7},System.Func{``0,``1,``2,``3,``4,``5,``6,``8})">
            <summary>
            7要素タプルのResultの各要素を展開して関数に渡すSafeCastです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Count``8(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのResultの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Fold``9(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7},``8,System.Func{``8,``0,``1,``2,``3,``4,``5,``6,``8})">
            <summary>
            7要素タプルのResultの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Forall``8(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのResultの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Exists``8(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのResultの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Map``9(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7},System.Func{``0,``1,``2,``3,``4,``5,``6,``8})">
            <summary>
            7要素タプルのResultの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``8(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7},System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            7要素タプルのResultの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Bind``9(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7},System.Func{``0,``1,``2,``3,``4,``5,``6,LangExt.Result{``8,``7}})">
            <summary>
            7要素タプルのResultの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCast``10(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``9})">
            <summary>
            8要素タプルのResultの各要素を展開して関数に渡すSafeCastです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Count``9(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのResultの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Fold``10(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8},``9,System.Func{``9,``0,``1,``2,``3,``4,``5,``6,``7,``9})">
            <summary>
            8要素タプルのResultの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Forall``9(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのResultの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Exists``9(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのResultの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Map``10(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``9})">
            <summary>
            8要素タプルのResultの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``9(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8},System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            8要素タプルのResultの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Bind``10(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,LangExt.Result{``9,``8}})">
            <summary>
            8要素タプルのResultの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCast``11(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``10})">
            <summary>
            9要素タプルのResultの各要素を展開して関数に渡すSafeCastです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Count``10(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのResultの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Fold``11(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9},``10,System.Func{``10,``0,``1,``2,``3,``4,``5,``6,``7,``8,``10})">
            <summary>
            9要素タプルのResultの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Forall``10(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのResultの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Exists``10(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのResultの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Map``11(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``10})">
            <summary>
            9要素タプルのResultの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``10(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            9要素タプルのResultの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Bind``11(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,LangExt.Result{``10,``9}})">
            <summary>
            9要素タプルのResultの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCast``12(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``11})">
            <summary>
            10要素タプルのResultの各要素を展開して関数に渡すSafeCastです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Count``11(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのResultの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Fold``12(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10},``11,System.Func{``11,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``11})">
            <summary>
            10要素タプルのResultの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Forall``11(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのResultの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Exists``11(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのResultの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Map``12(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``11})">
            <summary>
            10要素タプルのResultの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``11(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            10要素タプルのResultの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Bind``12(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,LangExt.Result{``11,``10}})">
            <summary>
            10要素タプルのResultの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCast``13(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``12})">
            <summary>
            11要素タプルのResultの各要素を展開して関数に渡すSafeCastです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Count``12(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのResultの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Fold``13(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11},``12,System.Func{``12,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``12})">
            <summary>
            11要素タプルのResultの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Forall``12(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのResultの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Exists``12(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのResultの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Map``13(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``12})">
            <summary>
            11要素タプルのResultの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``12(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            11要素タプルのResultの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Bind``13(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,LangExt.Result{``12,``11}})">
            <summary>
            11要素タプルのResultの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCast``14(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``13})">
            <summary>
            12要素タプルのResultの各要素を展開して関数に渡すSafeCastです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Count``13(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのResultの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Fold``14(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12},``13,System.Func{``13,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``13})">
            <summary>
            12要素タプルのResultの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Forall``13(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのResultの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Exists``13(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのResultの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Map``14(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``13})">
            <summary>
            12要素タプルのResultの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``13(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            12要素タプルのResultの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Bind``14(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,LangExt.Result{``13,``12}})">
            <summary>
            12要素タプルのResultの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCast``15(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``14})">
            <summary>
            13要素タプルのResultの各要素を展開して関数に渡すSafeCastです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Count``14(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのResultの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Fold``15(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13},``14,System.Func{``14,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``14})">
            <summary>
            13要素タプルのResultの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Forall``14(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのResultの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Exists``14(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのResultの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Map``15(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``14})">
            <summary>
            13要素タプルのResultの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``14(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            13要素タプルのResultの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Bind``15(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,LangExt.Result{``14,``13}})">
            <summary>
            13要素タプルのResultの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCast``16(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``15})">
            <summary>
            14要素タプルのResultの各要素を展開して関数に渡すSafeCastです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Count``15(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのResultの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Fold``16(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14},``15,System.Func{``15,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``15})">
            <summary>
            14要素タプルのResultの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Forall``15(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのResultの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Exists``15(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのResultの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Map``16(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``15})">
            <summary>
            14要素タプルのResultの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``15(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            14要素タプルのResultの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Bind``16(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,LangExt.Result{``15,``14}})">
            <summary>
            14要素タプルのResultの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCast``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``16})">
            <summary>
            15要素タプルのResultの各要素を展開して関数に渡すSafeCastです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Count``16(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのResultの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Fold``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15},``16,System.Func{``16,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``16})">
            <summary>
            15要素タプルのResultの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Forall``16(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのResultの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Exists``16(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのResultの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Map``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``16})">
            <summary>
            15要素タプルのResultの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``16(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            15要素タプルのResultの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Bind``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,LangExt.Result{``16,``15}})">
            <summary>
            15要素タプルのResultの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCast``18(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``16},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``17})">
            <summary>
            16要素タプルのResultの各要素を展開して関数に渡すSafeCastです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Count``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``16},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのResultの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Forall``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``16},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのResultの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Exists``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``16},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのResultの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Map``18(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``16},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``17})">
            <summary>
            16要素タプルのResultの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``17(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``16},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            16要素タプルのResultの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Bind``18(LangExt.Result{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``16},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,LangExt.Result{``17,``16}})">
            <summary>
            16要素タプルのResultの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCastFailure``4(LangExt.Result{``2,System.Tuple{``0,``1}},System.Func{``0,``1,``3})">
            <summary>
            2要素タプルのResultの各要素を展開して関数に渡すSafeCastFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.CountFailure``3(LangExt.Result{``2,System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのResultの各要素を展開して関数に渡すCountFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.FoldFailure``4(LangExt.Result{``2,System.Tuple{``0,``1}},``3,System.Func{``3,``0,``1,``3})">
            <summary>
            2要素タプルのResultの各要素を展開して関数に渡すFoldFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ForallFailure``3(LangExt.Result{``2,System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのResultの各要素を展開して関数に渡すForallFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ExistsFailure``3(LangExt.Result{``2,System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのResultの各要素を展開して関数に渡すExistsFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.MapFailure``4(LangExt.Result{``2,System.Tuple{``0,``1}},System.Func{``0,``1,``3})">
            <summary>
            2要素タプルのResultの各要素を展開して関数に渡すMapFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``3(LangExt.Result{``2,System.Tuple{``0,``1}},System.Action{``0,``1})">
            <summary>
            2要素タプルのResultの各要素を展開して関数に渡すIterFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.BindFailure``4(LangExt.Result{``2,System.Tuple{``0,``1}},System.Func{``0,``1,LangExt.Result{``2,``3}})">
            <summary>
            2要素タプルのResultの各要素を展開して関数に渡すBindFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCastFailure``5(LangExt.Result{``3,System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``4})">
            <summary>
            3要素タプルのResultの各要素を展開して関数に渡すSafeCastFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.CountFailure``4(LangExt.Result{``3,System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのResultの各要素を展開して関数に渡すCountFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.FoldFailure``5(LangExt.Result{``3,System.Tuple{``0,``1,``2}},``4,System.Func{``4,``0,``1,``2,``4})">
            <summary>
            3要素タプルのResultの各要素を展開して関数に渡すFoldFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ForallFailure``4(LangExt.Result{``3,System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのResultの各要素を展開して関数に渡すForallFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ExistsFailure``4(LangExt.Result{``3,System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのResultの各要素を展開して関数に渡すExistsFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.MapFailure``5(LangExt.Result{``3,System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``4})">
            <summary>
            3要素タプルのResultの各要素を展開して関数に渡すMapFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``4(LangExt.Result{``3,System.Tuple{``0,``1,``2}},System.Action{``0,``1,``2})">
            <summary>
            3要素タプルのResultの各要素を展開して関数に渡すIterFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.BindFailure``5(LangExt.Result{``3,System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,LangExt.Result{``3,``4}})">
            <summary>
            3要素タプルのResultの各要素を展開して関数に渡すBindFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCastFailure``6(LangExt.Result{``4,System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``5})">
            <summary>
            4要素タプルのResultの各要素を展開して関数に渡すSafeCastFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.CountFailure``5(LangExt.Result{``4,System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのResultの各要素を展開して関数に渡すCountFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.FoldFailure``6(LangExt.Result{``4,System.Tuple{``0,``1,``2,``3}},``5,System.Func{``5,``0,``1,``2,``3,``5})">
            <summary>
            4要素タプルのResultの各要素を展開して関数に渡すFoldFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ForallFailure``5(LangExt.Result{``4,System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのResultの各要素を展開して関数に渡すForallFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ExistsFailure``5(LangExt.Result{``4,System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのResultの各要素を展開して関数に渡すExistsFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.MapFailure``6(LangExt.Result{``4,System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``5})">
            <summary>
            4要素タプルのResultの各要素を展開して関数に渡すMapFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``5(LangExt.Result{``4,System.Tuple{``0,``1,``2,``3}},System.Action{``0,``1,``2,``3})">
            <summary>
            4要素タプルのResultの各要素を展開して関数に渡すIterFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.BindFailure``6(LangExt.Result{``4,System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,LangExt.Result{``4,``5}})">
            <summary>
            4要素タプルのResultの各要素を展開して関数に渡すBindFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCastFailure``7(LangExt.Result{``5,System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``6})">
            <summary>
            5要素タプルのResultの各要素を展開して関数に渡すSafeCastFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.CountFailure``6(LangExt.Result{``5,System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのResultの各要素を展開して関数に渡すCountFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.FoldFailure``7(LangExt.Result{``5,System.Tuple{``0,``1,``2,``3,``4}},``6,System.Func{``6,``0,``1,``2,``3,``4,``6})">
            <summary>
            5要素タプルのResultの各要素を展開して関数に渡すFoldFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ForallFailure``6(LangExt.Result{``5,System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのResultの各要素を展開して関数に渡すForallFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ExistsFailure``6(LangExt.Result{``5,System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのResultの各要素を展開して関数に渡すExistsFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.MapFailure``7(LangExt.Result{``5,System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``6})">
            <summary>
            5要素タプルのResultの各要素を展開して関数に渡すMapFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``6(LangExt.Result{``5,System.Tuple{``0,``1,``2,``3,``4}},System.Action{``0,``1,``2,``3,``4})">
            <summary>
            5要素タプルのResultの各要素を展開して関数に渡すIterFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.BindFailure``7(LangExt.Result{``5,System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,LangExt.Result{``5,``6}})">
            <summary>
            5要素タプルのResultの各要素を展開して関数に渡すBindFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCastFailure``8(LangExt.Result{``6,System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``7})">
            <summary>
            6要素タプルのResultの各要素を展開して関数に渡すSafeCastFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.CountFailure``7(LangExt.Result{``6,System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのResultの各要素を展開して関数に渡すCountFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.FoldFailure``8(LangExt.Result{``6,System.Tuple{``0,``1,``2,``3,``4,``5}},``7,System.Func{``7,``0,``1,``2,``3,``4,``5,``7})">
            <summary>
            6要素タプルのResultの各要素を展開して関数に渡すFoldFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ForallFailure``7(LangExt.Result{``6,System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのResultの各要素を展開して関数に渡すForallFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ExistsFailure``7(LangExt.Result{``6,System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのResultの各要素を展開して関数に渡すExistsFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.MapFailure``8(LangExt.Result{``6,System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``7})">
            <summary>
            6要素タプルのResultの各要素を展開して関数に渡すMapFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``7(LangExt.Result{``6,System.Tuple{``0,``1,``2,``3,``4,``5}},System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            6要素タプルのResultの各要素を展開して関数に渡すIterFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.BindFailure``8(LangExt.Result{``6,System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,LangExt.Result{``6,``7}})">
            <summary>
            6要素タプルのResultの各要素を展開して関数に渡すBindFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCastFailure``9(LangExt.Result{``7,System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``8})">
            <summary>
            7要素タプルのResultの各要素を展開して関数に渡すSafeCastFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.CountFailure``8(LangExt.Result{``7,System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのResultの各要素を展開して関数に渡すCountFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.FoldFailure``9(LangExt.Result{``7,System.Tuple{``0,``1,``2,``3,``4,``5,``6}},``8,System.Func{``8,``0,``1,``2,``3,``4,``5,``6,``8})">
            <summary>
            7要素タプルのResultの各要素を展開して関数に渡すFoldFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ForallFailure``8(LangExt.Result{``7,System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのResultの各要素を展開して関数に渡すForallFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ExistsFailure``8(LangExt.Result{``7,System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのResultの各要素を展開して関数に渡すExistsFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.MapFailure``9(LangExt.Result{``7,System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``8})">
            <summary>
            7要素タプルのResultの各要素を展開して関数に渡すMapFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``8(LangExt.Result{``7,System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            7要素タプルのResultの各要素を展開して関数に渡すIterFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.BindFailure``9(LangExt.Result{``7,System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,LangExt.Result{``7,``8}})">
            <summary>
            7要素タプルのResultの各要素を展開して関数に渡すBindFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCastFailure``10(LangExt.Result{``8,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``9})">
            <summary>
            8要素タプルのResultの各要素を展開して関数に渡すSafeCastFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.CountFailure``9(LangExt.Result{``8,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのResultの各要素を展開して関数に渡すCountFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.FoldFailure``10(LangExt.Result{``8,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},``9,System.Func{``9,``0,``1,``2,``3,``4,``5,``6,``7,``9})">
            <summary>
            8要素タプルのResultの各要素を展開して関数に渡すFoldFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ForallFailure``9(LangExt.Result{``8,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのResultの各要素を展開して関数に渡すForallFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ExistsFailure``9(LangExt.Result{``8,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのResultの各要素を展開して関数に渡すExistsFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.MapFailure``10(LangExt.Result{``8,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``9})">
            <summary>
            8要素タプルのResultの各要素を展開して関数に渡すMapFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``9(LangExt.Result{``8,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            8要素タプルのResultの各要素を展開して関数に渡すIterFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.BindFailure``10(LangExt.Result{``8,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,LangExt.Result{``8,``9}})">
            <summary>
            8要素タプルのResultの各要素を展開して関数に渡すBindFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCastFailure``11(LangExt.Result{``9,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``10})">
            <summary>
            9要素タプルのResultの各要素を展開して関数に渡すSafeCastFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.CountFailure``10(LangExt.Result{``9,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのResultの各要素を展開して関数に渡すCountFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.FoldFailure``11(LangExt.Result{``9,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},``10,System.Func{``10,``0,``1,``2,``3,``4,``5,``6,``7,``8,``10})">
            <summary>
            9要素タプルのResultの各要素を展開して関数に渡すFoldFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ForallFailure``10(LangExt.Result{``9,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのResultの各要素を展開して関数に渡すForallFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ExistsFailure``10(LangExt.Result{``9,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのResultの各要素を展開して関数に渡すExistsFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.MapFailure``11(LangExt.Result{``9,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``10})">
            <summary>
            9要素タプルのResultの各要素を展開して関数に渡すMapFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``10(LangExt.Result{``9,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            9要素タプルのResultの各要素を展開して関数に渡すIterFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.BindFailure``11(LangExt.Result{``9,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,LangExt.Result{``9,``10}})">
            <summary>
            9要素タプルのResultの各要素を展開して関数に渡すBindFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCastFailure``12(LangExt.Result{``10,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``11})">
            <summary>
            10要素タプルのResultの各要素を展開して関数に渡すSafeCastFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.CountFailure``11(LangExt.Result{``10,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのResultの各要素を展開して関数に渡すCountFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.FoldFailure``12(LangExt.Result{``10,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},``11,System.Func{``11,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``11})">
            <summary>
            10要素タプルのResultの各要素を展開して関数に渡すFoldFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ForallFailure``11(LangExt.Result{``10,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのResultの各要素を展開して関数に渡すForallFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ExistsFailure``11(LangExt.Result{``10,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのResultの各要素を展開して関数に渡すExistsFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.MapFailure``12(LangExt.Result{``10,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``11})">
            <summary>
            10要素タプルのResultの各要素を展開して関数に渡すMapFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``11(LangExt.Result{``10,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            10要素タプルのResultの各要素を展開して関数に渡すIterFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.BindFailure``12(LangExt.Result{``10,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,LangExt.Result{``10,``11}})">
            <summary>
            10要素タプルのResultの各要素を展開して関数に渡すBindFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCastFailure``13(LangExt.Result{``11,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``12})">
            <summary>
            11要素タプルのResultの各要素を展開して関数に渡すSafeCastFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.CountFailure``12(LangExt.Result{``11,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのResultの各要素を展開して関数に渡すCountFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.FoldFailure``13(LangExt.Result{``11,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},``12,System.Func{``12,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``12})">
            <summary>
            11要素タプルのResultの各要素を展開して関数に渡すFoldFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ForallFailure``12(LangExt.Result{``11,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのResultの各要素を展開して関数に渡すForallFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ExistsFailure``12(LangExt.Result{``11,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのResultの各要素を展開して関数に渡すExistsFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.MapFailure``13(LangExt.Result{``11,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``12})">
            <summary>
            11要素タプルのResultの各要素を展開して関数に渡すMapFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``12(LangExt.Result{``11,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            11要素タプルのResultの各要素を展開して関数に渡すIterFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.BindFailure``13(LangExt.Result{``11,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,LangExt.Result{``11,``12}})">
            <summary>
            11要素タプルのResultの各要素を展開して関数に渡すBindFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCastFailure``14(LangExt.Result{``12,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``13})">
            <summary>
            12要素タプルのResultの各要素を展開して関数に渡すSafeCastFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.CountFailure``13(LangExt.Result{``12,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのResultの各要素を展開して関数に渡すCountFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.FoldFailure``14(LangExt.Result{``12,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},``13,System.Func{``13,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``13})">
            <summary>
            12要素タプルのResultの各要素を展開して関数に渡すFoldFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ForallFailure``13(LangExt.Result{``12,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのResultの各要素を展開して関数に渡すForallFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ExistsFailure``13(LangExt.Result{``12,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのResultの各要素を展開して関数に渡すExistsFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.MapFailure``14(LangExt.Result{``12,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``13})">
            <summary>
            12要素タプルのResultの各要素を展開して関数に渡すMapFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``13(LangExt.Result{``12,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            12要素タプルのResultの各要素を展開して関数に渡すIterFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.BindFailure``14(LangExt.Result{``12,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,LangExt.Result{``12,``13}})">
            <summary>
            12要素タプルのResultの各要素を展開して関数に渡すBindFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCastFailure``15(LangExt.Result{``13,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``14})">
            <summary>
            13要素タプルのResultの各要素を展開して関数に渡すSafeCastFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.CountFailure``14(LangExt.Result{``13,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのResultの各要素を展開して関数に渡すCountFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.FoldFailure``15(LangExt.Result{``13,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},``14,System.Func{``14,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``14})">
            <summary>
            13要素タプルのResultの各要素を展開して関数に渡すFoldFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ForallFailure``14(LangExt.Result{``13,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのResultの各要素を展開して関数に渡すForallFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ExistsFailure``14(LangExt.Result{``13,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのResultの各要素を展開して関数に渡すExistsFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.MapFailure``15(LangExt.Result{``13,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``14})">
            <summary>
            13要素タプルのResultの各要素を展開して関数に渡すMapFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``14(LangExt.Result{``13,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            13要素タプルのResultの各要素を展開して関数に渡すIterFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.BindFailure``15(LangExt.Result{``13,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,LangExt.Result{``13,``14}})">
            <summary>
            13要素タプルのResultの各要素を展開して関数に渡すBindFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCastFailure``16(LangExt.Result{``14,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``15})">
            <summary>
            14要素タプルのResultの各要素を展開して関数に渡すSafeCastFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.CountFailure``15(LangExt.Result{``14,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのResultの各要素を展開して関数に渡すCountFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.FoldFailure``16(LangExt.Result{``14,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},``15,System.Func{``15,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``15})">
            <summary>
            14要素タプルのResultの各要素を展開して関数に渡すFoldFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ForallFailure``15(LangExt.Result{``14,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのResultの各要素を展開して関数に渡すForallFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ExistsFailure``15(LangExt.Result{``14,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのResultの各要素を展開して関数に渡すExistsFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.MapFailure``16(LangExt.Result{``14,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``15})">
            <summary>
            14要素タプルのResultの各要素を展開して関数に渡すMapFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``15(LangExt.Result{``14,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            14要素タプルのResultの各要素を展開して関数に渡すIterFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.BindFailure``16(LangExt.Result{``14,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,LangExt.Result{``14,``15}})">
            <summary>
            14要素タプルのResultの各要素を展開して関数に渡すBindFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCastFailure``17(LangExt.Result{``15,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``16})">
            <summary>
            15要素タプルのResultの各要素を展開して関数に渡すSafeCastFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.CountFailure``16(LangExt.Result{``15,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのResultの各要素を展開して関数に渡すCountFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.FoldFailure``17(LangExt.Result{``15,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},``16,System.Func{``16,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``16})">
            <summary>
            15要素タプルのResultの各要素を展開して関数に渡すFoldFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ForallFailure``16(LangExt.Result{``15,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのResultの各要素を展開して関数に渡すForallFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ExistsFailure``16(LangExt.Result{``15,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのResultの各要素を展開して関数に渡すExistsFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.MapFailure``17(LangExt.Result{``15,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``16})">
            <summary>
            15要素タプルのResultの各要素を展開して関数に渡すMapFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``16(LangExt.Result{``15,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            15要素タプルのResultの各要素を展開して関数に渡すIterFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.BindFailure``17(LangExt.Result{``15,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,LangExt.Result{``15,``16}})">
            <summary>
            15要素タプルのResultの各要素を展開して関数に渡すBindFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SafeCastFailure``18(LangExt.Result{``16,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``17})">
            <summary>
            16要素タプルのResultの各要素を展開して関数に渡すSafeCastFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.CountFailure``17(LangExt.Result{``16,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのResultの各要素を展開して関数に渡すCountFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ForallFailure``17(LangExt.Result{``16,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのResultの各要素を展開して関数に渡すForallFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.ExistsFailure``17(LangExt.Result{``16,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのResultの各要素を展開して関数に渡すExistsFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.MapFailure``18(LangExt.Result{``16,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``17})">
            <summary>
            16要素タプルのResultの各要素を展開して関数に渡すMapFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``17(LangExt.Result{``16,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            16要素タプルのResultの各要素を展開して関数に渡すIterFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.BindFailure``18(LangExt.Result{``16,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,LangExt.Result{``16,``17}})">
            <summary>
            16要素タプルのResultの各要素を展開して関数に渡すBindFailureです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Fold``3(LangExt.Result{``0,``1},``2,System.Func{``2,``0,``2})">
            <summary>
            (Result[T, _], U, ((U, T) → U)) → U
            </summary>
        </member>
        <member name="M:LangExt.Result.FoldFailure``3(LangExt.Result{``0,``1},``2,System.Func{``2,``1,``2})">
            <summary>
            (Result[_, T], U, ((U, T) → U)) → U
            </summary>
        </member>
        <member name="M:LangExt.Result.Map``3(LangExt.Result{``0,``1},System.Func{``0,``2})">
            <summary>
            (Result[T, _], (T → U)) → Result[U, _]
            </summary>
        </member>
        <member name="M:LangExt.Result.MapFailure``3(LangExt.Result{``0,``1},System.Func{``1,``2})">
            <summary>
            (Result[_, T], (T → U)) → Result[_, U]
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``2(LangExt.Result{``0,``1},System.Action{``0})">
            <summary>
            (Result[T, _], (T → void)) → void
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``2(LangExt.Result{``0,``1},System.Func{``0,LangExt.Unit})">
            <summary>
            (Result[T, _], (T → Unit)) → Unit
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``2(LangExt.Result{``0,``1},System.Action{``1})">
            <summary>
            (Result[_, T], (T → void)) → void
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``2(LangExt.Result{``0,``1},System.Func{``1,LangExt.Unit})">
            <summary>
            (Result[_, T], (T → Unit)) → Unit
            </summary>
        </member>
        <member name="M:LangExt.Result.Exists``2(LangExt.Result{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            (Result[T, _], (T → bool)) → bool
            </summary>
        </member>
        <member name="M:LangExt.Result.ExistsFailure``2(LangExt.Result{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            (Result[_, T], (T → bool)) → bool
            </summary>
        </member>
        <member name="M:LangExt.Result.Forall``2(LangExt.Result{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            (Result[T, _], (T → bool)) → bool
            </summary>
        </member>
        <member name="M:LangExt.Result.ForallFailure``2(LangExt.Result{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            (Result[_, T], (T → bool)) → bool
            </summary>
        </member>
        <member name="M:LangExt.Result.Size``2(LangExt.Result{``0,``1})">
            <summary>
            Result[T, U] → int
            </summary>
        </member>
        <member name="M:LangExt.Result.SizeFailure``2(LangExt.Result{``0,``1})">
            <summary>
            Result[T, U] → int
            </summary>
        </member>
        <member name="M:LangExt.Result.Len``2(LangExt.Result{``0,``1})">
            <summary>
            Result[T, U] → int
            </summary>
        </member>
        <member name="M:LangExt.Result.LenFailure``2(LangExt.Result{``0,``1})">
            <summary>
            Result[T, U] → int
            </summary>
        </member>
        <member name="M:LangExt.Result.Count``2(LangExt.Result{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            (Result[T, _], (T → bool)) → int
            </summary>
        </member>
        <member name="M:LangExt.Result.CountFailure``2(LangExt.Result{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            (Result[_, T], (T → bool)) → int
            </summary>
        </member>
        <member name="M:LangExt.Result.ToArray``2(LangExt.Result{``0,``1})">
            <summary>
            Result[T, _] → T[]
            </summary>
        </member>
        <member name="M:LangExt.Result.ToArrayFailure``2(LangExt.Result{``0,``1})">
            <summary>
            Result[_, T] → T[]
            </summary>
        </member>
        <member name="M:LangExt.Result.ToSeq``2(LangExt.Result{``0,``1})">
            <summary>
            Result[T, _] → Seq[T]
            </summary>
        </member>
        <member name="M:LangExt.Result.ToSeqFailure``2(LangExt.Result{``0,``1})">
            <summary>
            Result[_, T] → Seq[T]
            </summary>
        </member>
        <member name="M:LangExt.Result.ToOption``2(LangExt.Result{``0,``1})">
            <summary>
            Result[T, _] → Option[T]
            </summary>
        </member>
        <member name="M:LangExt.Result.ToOptionFailure``2(LangExt.Result{``0,``1})">
            <summary>
            Result[_, T] → Option[T]
            </summary>
        </member>
        <member name="M:LangExt.Result.SwapResult``2(LangExt.Result{``0,``1})">
            <summary>
            Result[TSuccess, TFailure] → Result[TFailure, TSuccess]
            </summary>
        </member>
        <member name="M:LangExt.Result.Select``3(LangExt.Result{``0,``1},System.Func{``0,``2})">
            <summary>
            クエリ式でResultを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SelectMany``4(LangExt.Result{``0,``1},System.Func{``0,LangExt.Result{``2,``1}},System.Func{``0,``2,``3})">
            <summary>
            クエリ式でResultを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Result.Success``2(``0,``1)">
            <summary>
            Result[Tuple[...], Placeholder]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Success``3(``0,``1,``2)">
            <summary>
            Result[Tuple[...], Placeholder]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Success``4(``0,``1,``2,``3)">
            <summary>
            Result[Tuple[...], Placeholder]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Success``5(``0,``1,``2,``3,``4)">
            <summary>
            Result[Tuple[...], Placeholder]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Success``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            Result[Tuple[...], Placeholder]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Success``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Result[Tuple[...], Placeholder]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Success``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Result[Tuple[...], Placeholder]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Success``9(``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Result[Tuple[...], Placeholder]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Success``10(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Result[Tuple[...], Placeholder]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Success``11(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Result[Tuple[...], Placeholder]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Success``12(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Result[Tuple[...], Placeholder]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Success``13(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Result[Tuple[...], Placeholder]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Success``14(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Result[Tuple[...], Placeholder]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Success``15(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Result[Tuple[...], Placeholder]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Success``16(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Result[Tuple[...], Placeholder]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Failure``2(``0,``1)">
            <summary>
            Result[Placeholder, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Failure``3(``0,``1,``2)">
            <summary>
            Result[Placeholder, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Failure``4(``0,``1,``2,``3)">
            <summary>
            Result[Placeholder, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Failure``5(``0,``1,``2,``3,``4)">
            <summary>
            Result[Placeholder, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Failure``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            Result[Placeholder, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Failure``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Result[Placeholder, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Failure``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Result[Placeholder, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Failure``9(``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Result[Placeholder, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Failure``10(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Result[Placeholder, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Failure``11(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Result[Placeholder, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Failure``12(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Result[Placeholder, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Failure``13(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Result[Placeholder, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Failure``14(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Result[Placeholder, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Failure``15(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Result[Placeholder, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Failure``16(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Result[Placeholder, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``3(``0,``1)">
            <summary>
            Result[Tuple[...], TFailure]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``4(``0,``1,``2)">
            <summary>
            Result[Tuple[...], TFailure]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``5(``0,``1,``2,``3)">
            <summary>
            Result[Tuple[...], TFailure]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``6(``0,``1,``2,``3,``4)">
            <summary>
            Result[Tuple[...], TFailure]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``7(``0,``1,``2,``3,``4,``5)">
            <summary>
            Result[Tuple[...], TFailure]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``8(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Result[Tuple[...], TFailure]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``9(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Result[Tuple[...], TFailure]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``10(``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Result[Tuple[...], TFailure]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``11(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Result[Tuple[...], TFailure]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``12(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Result[Tuple[...], TFailure]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``13(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Result[Tuple[...], TFailure]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``14(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Result[Tuple[...], TFailure]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``15(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Result[Tuple[...], TFailure]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``16(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Result[Tuple[...], TFailure]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``17(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Result[Tuple[...], TFailure]のSuccessを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``4(``1,``2)">
            <summary>
            Result[TSuccess, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``5(``1,``2,``3)">
            <summary>
            Result[TSuccess, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``6(``1,``2,``3,``4)">
            <summary>
            Result[TSuccess, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``7(``1,``2,``3,``4,``5)">
            <summary>
            Result[TSuccess, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``8(``1,``2,``3,``4,``5,``6)">
            <summary>
            Result[TSuccess, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``9(``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Result[TSuccess, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``10(``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Result[TSuccess, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``11(``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Result[TSuccess, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``12(``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Result[TSuccess, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``13(``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Result[TSuccess, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``14(``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Result[TSuccess, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``15(``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Result[TSuccess, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``16(``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Result[TSuccess, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``17(``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Result[TSuccess, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Result.NewSuccess``18(``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16)">
            <summary>
            Result[TSuccess, Tuple[...]]のFailureを生成します。
            </summary>
        </member>
        <member name="T:LangExt.Result`2">
            <summary>
            Option[T]に加え、失敗時の原因も表すことのできるデータ型です。
            </summary>
            <remarks>
            この型は成功を表す「Success」と、失敗を表す「Failure」のどちらかとなります。
            </remarks>
            <typeparam name="TSuccess">成功したときの値の型</typeparam>
            <typeparam name="TFailure">失敗したときの値の型</typeparam>
        </member>
        <member name="M:LangExt.Result`2.GetOr(`0)">
            <summary>
            Successの場合、保持された値を取り出します。
            Failureの場合、引数に指定した値を返します。
            </summary>
            <param name="defaultValue">Failureの場合の戻り値</param>
            <returns>Successの場合保持している値。Failureの場合引数で指定した値</returns>
        </member>
        <member name="M:LangExt.Result`2.GetFailureOr(`1)">
            <summary>
            Failureの場合、保持された値を取り出します。
            Successの場合、引数に指定した値を返します。
            </summary>
            <param name="defaultValue">Successの場合の戻り値</param>
            <returns>Failureの場合保持している値。Successの場合引数で指定した値</returns>
        </member>
        <member name="M:LangExt.Result`2.GetOrElse(System.Func{`0})">
            <summary>
            Successの場合、保持された値を取り出します。
            Failureの場合、引数に指定した関数の実行結果を返します。
            </summary>
            <param name="defaultF">Failureの場合の戻り値を返す関数</param>
            <returns>Successの場合保持している値。Failureの場合引数で指定した関数が返す値</returns>
        </member>
        <member name="M:LangExt.Result`2.GetFailureOrElse(System.Func{`1})">
            <summary>
            Failureの場合、保持された値を取り出します。
            Successの場合、引数に指定した関数の実行結果を返します。
            </summary>
            <param name="defaultF">Successの場合の戻り値を返す関数</param>
            <returns>Failureの場合保持している値。Successの場合引数で指定した関数が返す値</returns>
        </member>
        <member name="M:LangExt.Result`2.op_Implicit(LangExt.Result{`0,LangExt.Placeholder})~LangExt.Result{`0,`1}">
            <summary>
            Result.Successで取得したオブジェクトを、任意のTFailureのSuccessに暗黙変換します。
            </summary>
            <param name="r">Result.Success</param>
            <returns>任意のTFailureのSuccess</returns>
        </member>
        <member name="M:LangExt.Result`2.op_Implicit(LangExt.Result{`0,LangExt.Unit})~LangExt.Result{`0,`1}">
            <summary>
            Result[TSuccess, Unit]を、Result[TSuccess, TFailure]に暗黙変換します。
            </summary>
        </member>
        <member name="M:LangExt.Result`2.op_Implicit(LangExt.Result{LangExt.Placeholder,`1})~LangExt.Result{`0,`1}">
            <summary>
            Result.Failureで取得したオブジェクトを、任意のTSuccessのFailureに暗黙変換します。
            </summary>
            <param name="r">Result.Failure</param>
            <returns>任意のTSuccessのFailure</returns>
        </member>
        <member name="M:LangExt.Result`2.op_Implicit(LangExt.Result{LangExt.Unit,`1})~LangExt.Result{`0,`1}">
            <summary>
            Result[Unit, TFailure]を、Result[TSuccess, TFailure]に暗黙変換します。
            </summary>
        </member>
        <member name="M:LangExt.Result`2.Cast``1">
            <summary>
            Result[TSuccess, TFailure]型のFailureを、Result[TSuccess2, TFailure]に変換します。
            オブジェクトがSuccessの場合、InvalidOperationExceptionが投げられます。
            このメソッドは拡張メソッドでは提供不可能なため、例外を投げる可能性があるにもかかわらず、Unsafe名前空間で定義されていません。
            このメソッドを使用する場合は、注意して使用してください。
            可能であれば、Successの場合の処理を指定できるSafeCastを使用してください。
            </summary>
        </member>
        <member name="M:LangExt.Result`2.SafeCast``1(System.Func{`0,``0})">
            <summary>
            Result[TSuccess, TFailure]型を、Result[TSuccess2, TFailure]に変換します。
            オブジェクトがSuccessの場合、casterの結果が返ります。
            </summary>
        </member>
        <member name="M:LangExt.Result`2.CastFailure``1">
            <summary>
            Result[TSuccess, TFailure]型のFailureを、Result[TSuccess, TFailure2]に変換します。
            オブジェクトがFailureの場合、InvalidOperationExceptionが投げられます。
            このメソッドは拡張メソッドでは提供不可能なため、例外を投げる可能性があるにもかかわらず、Unsafe名前空間で定義されていません。
            このメソッドを使用する場合は、注意して使用してください。
            可能であれば、Failureの場合の処理を指定できるSafeCastFailureを使用してください。
            </summary>
        </member>
        <member name="M:LangExt.Result`2.SafeCastFailure``1(System.Func{`1,``0})">
            <summary>
            Result[TSuccess, TFailure]型を、Result[TSuccess, TFailure2]に変換します。
            オブジェクトがFailureの場合、casterの結果が返ります。
            </summary>
        </member>
        <member name="M:LangExt.Result`2.Match``1(System.Func{`0,``0},System.Func{`1,``0})">
            <summary>
            擬似的にパターンマッチを行います。
            成功の場合と失敗の場合の両方で何らかの処理を行う必要がある際に使用します。
            </summary>
            <typeparam name="T">パターンマッチが返す処理の型</typeparam>
            <param name="Success">Successの場合の処理</param>
            <param name="Failure">Failureの場合の処理</param>
            <returns>処理が返した値</returns>
        </member>
        <member name="M:LangExt.Result`2.Match(System.Action{`0},System.Action{`1})">
            <summary>
            擬似的にパターンマッチを行います。
            成功の場合と失敗の場合の両方で何らかの処理を行う必要がある際に使用します。
            </summary>
            <param name="Success">Successの場合の処理</param>
            <param name="Failure">Failureの場合の処理</param>
        </member>
        <member name="M:LangExt.Result`2.Bind``1(System.Func{`0,LangExt.Result{``0,`1}})">
            <summary>
            Result[TSuccess, TFailure]をResult[TSuccess2, TFailure]型に変換します。
            Successの場合のみに変換を適用します。
            変換は、TSuccess型を受け取りResult[TSuccess2, TFailure]を返す関数として指定します。
            </summary>
            <typeparam name="TSuccess2">変換先の型</typeparam>
            <param name="f">変換に用いる関数</param>
            <returns>変換した値</returns>
        </member>
        <member name="M:LangExt.Result`2.BindFailure``1(System.Func{`1,LangExt.Result{`0,``0}})">
            <summary>
            Result[TSuccess, TFailure]をResult[TSuccess, TFailure2]型に変換します。
            Failureの場合のみに変換を適用します。
            変換は、TFailure型を受け取りResult[TSuccess, TFailure2]を返す関数として指定します。
            </summary>
            <typeparam name="TFailure2">変換先の型</typeparam>
            <param name="f">変換に用いる関数</param>
            <returns>変換した値</returns>
        </member>
        <member name="M:LangExt.Result`2.Equals(LangExt.Result{`0,`1})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するResult</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Result`2.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Result`2.op_Equality(LangExt.Result{`0,`1},LangExt.Result{`0,`1})">
            <summary>
            2つのResultの比較を行います。 
            </summary>
            <param name="a">1つ目のResult</param>
            <param name="b">2つ目のResult</param>
            <returns>2つのResultが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Result`2.op_Inequality(LangExt.Result{`0,`1},LangExt.Result{`0,`1})">
            <summary>
            2つのResultの比較を行います。 
            </summary>
            <param name="a">1つ目のResult</param>
            <param name="b">2つ目のResult</param>
            <returns>2つのResultが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Result`2.op_True(LangExt.Result{`0,`1})">
            <summary>
            Resultが成功かどうかを判定します。
            </summary>
            <param name="x">判定の対象</param>
            <returns>Successの場合はtrue、Failureの場合はfalse</returns>
        </member>
        <member name="M:LangExt.Result`2.op_False(LangExt.Result{`0,`1})">
            <summary>
            Resultが失敗かどうかを判定します。
            </summary>
            <param name="x">判定の対象</param>
            <returns>Successの場合はfalse、Failureの場合はtrue</returns>
        </member>
        <member name="M:LangExt.Result`2.OrElse(System.Func{LangExt.Result{`0,`1}})">
            <summary>
            自身が値を持つ場合は自身を、そうでない場合はelsePartの結果を返します。
            Resultは短絡のor演算子を提供しているため、そちらを使用したほうが効率的です。
            </summary>
            <param name="elsePart">自身が値を持たなかった場合の値を返す関数</param>
            <returns>自身が値を持つ場合は自身、値を持たない場合はelsePartの結果</returns>
        </member>
        <member name="M:LangExt.Result`2.AndThen``1(System.Func{LangExt.Result{``0,`1}})">
            <summary>
            自身とthenPartの結果の両方が値を持つ場合はthenPartの結果を、
            そうでない場合はFailure(自身がFailureの場合は自身、そうでない場合はthenPartの結果のFailure)を返します。
            Resultは短絡のand演算子を提供しているため、そちらを使用したほうが効率的です。
            </summary>
            <param name="thenPart">自身が値を持つ場合の値を返す関数</param>
            <returns>
            自身とthenPartの結果の両方が値を持つ場合はthenPartの結果、
            どちらか一方でも値を持たなかった場合はFailure
            (自身がFailureの場合は自身、そうでない場合はthenPartの結果のFailure)
            </returns>
        </member>
        <member name="M:LangExt.Result`2.op_BitwiseOr(LangExt.Result{`0,`1},LangExt.Result{`0,`1})">
            <summary>
            左辺のResultがSuccessの場合は左辺を、そうでない場合は右辺を返します。
            通常、直接使用せず、短絡演算子として使用します。
            </summary>
            <param name="a">1つ目のResult</param>
            <param name="b">2つ目のResult</param>
            <returns>左辺のResultがSuccessの場合は左辺、それ以外の場合は右辺</returns>
        </member>
        <member name="M:LangExt.Result`2.op_BitwiseAnd(LangExt.Result{`0,`1},LangExt.Result{`0,`1})">
            <summary>
            両辺のResultがSuccessの場合右辺を、そうでない場合はFailure(左辺がFailureの場合は左辺、そうでない場合はthenPartの結果のFailure)を返します。
            通常、直接使用せず、短絡演算子として使用します。
            </summary>
            <param name="a">1つ目のResult</param>
            <param name="b">2つ目のResult</param>
            <returns>
            両辺のResultがSuccessの場合は右辺を、
            一方でも値を持たない場合はFailure
            (左辺がFailureの場合は左辺、そうでない場合はthenPartの結果のFailure)
            </returns>
        </member>
        <member name="M:LangExt.Result`2.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Result`2.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="M:LangExt.Result`2.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Result`2.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="P:LangExt.Result`2.IsSuccess">
            <summary>
            このオブジェクトが成功を表すかどうかを返します。
            制御構文内でboolが必要な場所に対しては、IsSuccessやIsFailureではなく、Resultオブジェクトをそのまま使用することも可能です。
            </summary>
        </member>
        <member name="P:LangExt.Result`2.IsFailure">
            <summary>
            このオブジェクトが失敗を表すかどうかを返します。
            制御構文内でboolが必要な場所に対しては、IsSuccessやIsFailureではなく、Resultオブジェクトをそのまま使用することも可能です。
            </summary>
        </member>
        <member name="T:LangExt.Seq">
            <summary>
            シーケンスに対する関数を提供します。
            シーケンスの状態と引数によって例外を投げうる関数は、Unsafe名前空間のSeqモジュールで提供しています。
            Initなどの、シーケンスの状態によらず、他の引数のみによって例外を投げうる関数はこのモジュールに定義しています。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Empty``1">
            <summary>
            空のシーケンスを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Create``1(``0[])">
            <summary>
            引数を要素として含むシーケンスを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.InitInfinite``1(System.Func{System.Int32,``0})">
            <summary>
            fを元に無限に続くシーケンスを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Init``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
            fを元にn要素のシーケンスを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RepeatInfinite``1(``0)">
            <summary>
            指定した要素を含む無限に続くシーケンスを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Repeat``1(System.Int32,``0)">
            <summary>
            指定した要素を含むn要素のシーケンスを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Singleton``1(``0)">
            <summary>
            指定した要素のみを含む1要素のシーケンスを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Unfold``2(``0,System.Func{``0,LangExt.Option{System.Tuple{``1,``0}}})">
            <summary>
            初期状態からfによって計算されたシーケンスを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Size``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスの長さを求めます。
            標準クエリ演算子のCountに対応します。
            </summary>
            <remarks>
            Sizeは、Lenよりもより広範囲の対象に通用する名前です。
            例えば、集合の要素数を考えたとき(集合がシーケンスかどうかは置いておいたとして)に、
            Lenは名前としては適しませんが、
            Sizeは集合の要素数として使っても問題ない名前です。
            そのため、Sizeを使うとより統一性を持ったコーディングが可能なので、
            LenでもSizeでも問題ない場合はSizeを使うようにしてください。
            </remarks>
        </member>
        <member name="M:LangExt.Seq.Len``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスの長さを求めます。
            標準クエリ演算子のCountに対応します。
            </summary>
            <remarks>
            Sizeは、Lenよりもより広範囲の対象に通用する名前です。
            例えば、集合の要素数を考えたとき(集合がシーケンスかどうかは置いておいたとして)に、
            Lenは名前としては適しませんが、
            Sizeは集合の要素数として使っても問題ない名前です。
            そのため、Sizeを使うとより統一性を持ったコーディングが可能なので、
            LenでもSizeでも問題ない場合はSizeを使うようにしてください。
            </remarks>
        </member>
        <member name="M:LangExt.Seq.LongLen``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスの長さを求めます。
            標準クエリ演算子のLongCountに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Count``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            predに合致する要素の個数を求めます。
            標準クエリ演算子のCountに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongCount``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            predに合致する要素の個数を求めます。
            標準クエリ演算子のLongCountに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Sum(LangExt.ISeq{System.Int32})">
            <summary>
            intのシーケンスの総和を求めます。
            標準クエリ演算子のSumに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSum(LangExt.ISeq{System.Int64})">
            <summary>
            longのシーケンスの総和を求めます。
            標準クエリ演算子のSumに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Sum``1(LangExt.ISeq{``0},LangExt.ISumStrategy{``0})">
            <summary>
            任意の型のシーケンスの総和を求めます。
            対応する標準クエリ演算子はありません。
            </summary>
            <param name="self">レシーバ</param>
            <param name="strategy">総和を求める戦略を表すオブジェクト</param>
        </member>
        <member name="M:LangExt.Seq.SumBy``1(LangExt.ISeq{``0},System.Func{``0,System.Int32})">
            <summary>
            任意の型のシーケンスの総和をintとして求めます。
            標準クエリ演算子のSumに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSumBy``1(LangExt.ISeq{``0},System.Func{``0,System.Int64})">
            <summary>
            任意の型のシーケンスの総和をlongとして求めます。
            標準クエリ演算子のSumに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``2(LangExt.ISeq{``0},System.Func{``0,``1},LangExt.ISumStrategy{``1})">
            <summary>
            任意の型のシーケンスの総和を求めます。
            対応する標準クエリ演算子はありません。
            </summary>
            <param name="self">レシーバ</param>
            <param name="f">加算対象のオブジェクトへの変換関数</param>
            <param name="strategy">総和を求める戦略を表すオブジェクト</param>
        </member>
        <member name="M:LangExt.Seq.TryMax``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスの最大値を求めます。
            シーケンスに要素が含まれなかった場合、Noneを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxWith``1(LangExt.ISeq{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            任意の型のシーケンスの最大値を求めます。
            シーケンスに要素が含まれなかった場合、Noneを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxBy``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            任意の型のシーケンスの最大値を求めます。
            シーケンスに要素が含まれなかった場合、Noneを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMin``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスの最小値を求めます。
            シーケンスに要素が含まれなかった場合、Noneを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinWith``1(LangExt.ISeq{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            任意の型のシーケンスの最小値を求めます。
            シーケンスに要素が含まれなかった場合、Noneを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinBy``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            任意の型のシーケンスの最小値を求めます。
            シーケンスに要素が含まれなかった場合、Noneを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Fold``2(LangExt.ISeq{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            シーケンスを先頭から畳み込みます。
            標準クエリ演算子のAggregateに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryReduce``1(LangExt.ISeq{``0},System.Func{``0,``0,``0})">
            <summary>
            シーケンスを先頭から畳み込みます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FoldBack``2(LangExt.ISeq{``0},``1,System.Func{``0,``1,``1})">
            <summary>
            シーケンスを末尾から畳み込みます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryReduceBack``1(LangExt.ISeq{``0},System.Func{``0,``0,``0})">
            <summary>
            シーケンスを末尾から畳み込みます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan``2(LangExt.ISeq{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            シーケンスの先頭から畳み込みを行い、各ステップの結果をシーケンスとして返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack``2(LangExt.ISeq{``0},``1,System.Func{``0,``1,``1})">
            <summary>
            シーケンスの末尾から畳み込みを行い、各ステップの結果をシーケンスとして返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan1``1(LangExt.ISeq{``0},System.Func{``0,``0,``0})">
            <summary>
            シーケンスの先頭から畳み込みを行い、各ステップの結果をシーケンスとして返します。
            Scanと異なり、初期値にはシーケンスの先頭要素が使われます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack1``1(LangExt.ISeq{``0},System.Func{``0,``0,``0})">
            <summary>
            シーケンスの末尾から畳み込みを行い、各ステップの結果をシーケンスとして返します。
            Scanと異なり、初期値にはシーケンスの末尾要素が使われます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryFind``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            シーケンスから、predを満たす最初の要素を探索します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryPick``2(LangExt.ISeq{``0},System.Func{``0,LangExt.Option{``1}})">
            <summary>
            シーケンスから、fがSomeを返す最初の要素を探索します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IsEmpty``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスが空かどうかを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IsNotEmpty``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスに要素が含まれるかどうかを返します。
            標準クエリ演算子のAnyに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Forall``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            シーケンスのすべての要素がpredを満たすかどうかを返します。
            標準クエリ演算子のAllに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Exists``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            シーケンスの要素のうち一つでもpredを満たす要素があるかどうかを返します。
            標準クエリ演算子のAnyに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Filter``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            シーケンスから、predを満たす要素のみを含むシーケンスを生成して返します。
            標準クエリ演算子のWhereに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FilterWithIndex``1(LangExt.ISeq{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            シーケンスから、predを満たす要素のみを含むシーケンスを生成して返します。
            predには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のWhereに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Map``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            シーケンスのすべての要素に対してfを適用したシーケンスを生成して返します。
            標準クエリ演算子のSelectに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapWithIndex``2(LangExt.ISeq{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            シーケンスのすべての要素に対してfを適用したシーケンスを生成して返します。
            fには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のSelectに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Iter``1(LangExt.ISeq{``0},System.Action{``0})">
            <summary>
            シーケンスのすべての要素に対してactを実行します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterF``1(LangExt.ISeq{``0},System.Func{``0,LangExt.Unit})">
            <summary>
            シーケンスのすべての要素に対してactを実行します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterWithIndex``1(LangExt.ISeq{``0},System.Action{``0,System.Int32})">
            <summary>
            シーケンスのすべての要素に対してactを実行します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterFWithIndex``1(LangExt.ISeq{``0},System.Func{``0,System.Int32,LangExt.Unit})">
            <summary>
            シーケンスのすべての要素に対してactを実行します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Bind``2(LangExt.ISeq{``0},System.Func{``0,LangExt.Seq{``1}})">
            <summary>
            シーケンスの各要素を順番にfの引数に対して渡し、fから返された各シーケンスを平坦化したシーケンスを生成して返します。
            標準クエリ演算子のSelectManyに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.BindWithIndex``2(LangExt.ISeq{``0},System.Func{``0,System.Int32,LangExt.Seq{``1}})">
            <summary>
            シーケンスの各要素を順番にfの引数に対して渡し、fから返された各シーケンスを平坦化したシーケンスを生成して返します。
            fには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のSelectManyに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Collect``3(LangExt.ISeq{``0},System.Func{``0,``2})">
            <summary>
            シーケンスの各要素を順番にfの引数に対して渡し、fから返された各シーケンスを平坦化したシーケンスを生成して返します。
            標準クエリ演算子のSelectManyに似ていますが、渡す関数の戻り値の型がより広いものを受け入れます。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Choose``2(LangExt.ISeq{``0},System.Func{``0,LangExt.Option{``1}})">
            <summary>
            シーケンスのすべての要素に対してfを適用し、Someを返した要素のみを集めたシーケンスを生成して返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ChooseWithIndex``2(LangExt.ISeq{``0},System.Func{``0,System.Int32,LangExt.Option{``1}})">
            <summary>
            シーケンスのすべての要素に対してfを適用し、Someを返した要素のみを集めたシーケンスを生成して返します。
            fには、要素のほかに要素のインデックスも渡されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Skip``1(LangExt.ISeq{``0},System.Int32)">
            <summary>
            シーケンスの先頭からn個の要素をスキップしたシーケンスを生成して返します。
            nが0以下の場合、入力のシーケンスがそのまま返されます。
            nがシーケンスの要素の個数よりも大きい場合、空のシーケンスが返されます。
            標準クエリ演算子のSkipに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Take``1(LangExt.ISeq{``0},System.Int32)">
            <summary>
            シーケンスの先頭からn個の要素を取り出したシーケンスを生成して返します。
            nが0以下の場合、空のシーケンスが返されます。
            nがシーケンスの要素の個数よりも大きい場合、入力のシーケンスがそのまま返されます。
            標準クエリ演算子のTakeに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhile``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            シーケンスの先頭からpredを満たす要素をスキップしたシーケンスを生成して返します。
            標準クエリ演算子のSkipWhileに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhileWithIndex``1(LangExt.ISeq{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            シーケンスの先頭からpredを満たす要素をスキップしたシーケンスを生成して返します。
            predには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のSkipWhileに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhile``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            シーケンスの先頭からpredを満たす要素を取り出したシーケンスを生成して返します。
            標準クエリ演算子のTakeWhileに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhileWithIndex``1(LangExt.ISeq{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            シーケンスの先頭からpredを満たす要素を取り出したシーケンスを生成して返します。
            predには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のTakeWhileに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Partition``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            predを満たす要素と満たさない要素にシーケンスを分割します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SplitAt``1(LangExt.ISeq{``0},System.Int32)">
            <summary>
            指定した位置シーケンスを分割します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Span``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            TakeWhileの結果とSkipWhileの結果の両方を同時に取得します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Break``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            TakeWhileの結果とSkipWhileの結果の両方を同時に取得します。
            Spanと異なり、predの否定が渡されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Windowed``1(LangExt.ISeq{``0},System.Int32)">
            <summary>
            シーケンスから取得された要素のスライド式ウィンドウを生成するシーケンスを返します。
            各ウィンドウは、新しい配列として返されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Windowed3``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスから取得された要素のサイズ3のスライド式ウィンドウを生成するシーケンスを返します。
            各ウィンドウは、3要素のタプルとして返されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Pairwise``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスから取得された要素のサイズ2のスライド式ウィンドウを生成するシーケンスを返します。
            各ウィンドウは、2要素のタプルとして返されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Sort``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスをソートします。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSort``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスを逆順にソートします。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SortBy``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            シーケンスをソートします。
            標準クエリ演算子のOrderByに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSortBy``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            シーケンスを逆順にソートします。
            標準クエリ演算子のOrderByDescendingに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ToString``1(LangExt.ISeq{``0},System.String,System.String,System.String)">
            <summary>
            指定されたセパレータでシーケンスを連結し、文字列化します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ToString``1(LangExt.ISeq{``0},System.String)">
            <summary>
            指定されたセパレータでシーケンスを連結し、文字列化します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ToArray``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスを配列に変換します。
            標準クエリ演算子のToArrayに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryGet``1(LangExt.ISeq{``0},System.Int32)">
            <summary>
            シーケンスの指定番目の要素を返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Append``1(LangExt.ISeq{``0},LangExt.ISeq{``0})">
            <summary>
            シーケンスに別のシーケンスを連結したシーケンスを生成して返します。
            標準クエリ演算子のConcatに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Concat``2(LangExt.ISeq{``1})">
            <summary>
            ネストしたシーケンスのネストを一段取り除きます。
            例えば、ISeq[ISeq[T]]をISeq[T]に変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Cache``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスを、走査した要素をキャッシュするシーケンスに変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Reverse``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスを反転させたシーケンスを生成します。
            標準クエリ演算子のReverseに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Sequence``1(LangExt.ISeq{LangExt.Option{``0}})">
            <summary>
            Option[T]のシーケンスすべてがSomeだった場合は値を取り出したシーケンスをSomeに包んで返し、
            一つでもNoneが存在した場合はNoneを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SequenceSuccess``2(LangExt.ISeq{LangExt.Result{``0,``1}})">
            <summary>
            Result[TSuccess, TFailure]のシーケンスすべてがSuccessだった場合は値を取り出したシーケンスをSuccessに包んで返し、
            一つでもFailureが存在した場合はFailureを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SequenceFailure``2(LangExt.ISeq{LangExt.Result{``0,``1}})">
            <summary>
            Result[TSuccess, TFailure]のシーケンスすべてがFailureだった場合は値を取り出したシーケンスをSuccessに包んで返し、
            一つでもFailureが存在した場合はFailureを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.OnlySome``1(LangExt.ISeq{LangExt.Option{``0}})">
            <summary>
            Option[T]のシーケンスからSomeの要素のみを抜き出し、その値を取り出したシーケンスに変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.OnlySuccess``2(LangExt.ISeq{LangExt.Result{``0,``1}})">
            <summary>
            Result[T, _]のシーケンスからSuccessの要素のみを抜き出し、その値を取り出したシーケンスに変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.OnlyFailure``2(LangExt.ISeq{LangExt.Result{``0,``1}})">
            <summary>
            Result[_, T]のシーケンスからFailureの要素のみを抜き出し、その値を取り出したシーケンスに変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapOption``1(LangExt.ISeq{``0})">
            <summary>
            nullを含みうるシーケンスから、Optionのシーケンスに変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapOption``1(LangExt.ISeq{System.Nullable{``0}})">
            <summary>
            nullを含みうるシーケンスから、Optionのシーケンスに変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapResult``1(LangExt.ISeq{``0})">
            <summary>
            nullを含みうるシーケンスから、Resultのシーケンスに変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapResult``1(LangExt.ISeq{System.Nullable{``0}})">
            <summary>
            nullを含みうるシーケンスから、Resultのシーケンスに変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Unfold``3(System.Tuple{``0,``1},System.Func{``0,``1,LangExt.Option{System.Tuple{``2,``0,``1}}})">
            <summary>
            2要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Count``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongCount``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すLongCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Int32})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSumBy``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Int64})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すLongSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``3(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,``2},LangExt.ISumStrategy{``2})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxBy``3(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,``2})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すTryMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinBy``3(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,``2})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すTryMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Fold``3(LangExt.ISeq{System.Tuple{``0,``1}},``2,System.Func{``2,``0,``1,``2})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryReduce``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,``0,``1,System.Tuple{``0,``1}})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すTryReduceです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FoldBack``3(LangExt.ISeq{System.Tuple{``0,``1}},``2,System.Func{``0,``1,``2,``2})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すFoldBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryReduceBack``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,``0,``1,System.Tuple{``0,``1}})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すTryReduceBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan``3(LangExt.ISeq{System.Tuple{``0,``1}},``2,System.Func{``2,``0,``1,``2})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack``3(LangExt.ISeq{System.Tuple{``0,``1}},``2,System.Func{``0,``1,``2,``2})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すScanBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan1``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,``0,``1,System.Tuple{``0,``1}})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すScan1です。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack1``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,``0,``1,System.Tuple{``0,``1}})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すScanBack1です。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryFind``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すTryFindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryPick``3(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,LangExt.Option{``2}})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すTryPickです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Forall``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Exists``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Filter``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FilterWithIndex``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Int32,System.Boolean})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すFilterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Map``3(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,``2})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapWithIndex``3(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Int32,``2})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Iter``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Action{``0,``1})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterWithIndex``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Action{``0,``1,System.Int32})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Bind``3(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,LangExt.Seq{``2}})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.BindWithIndex``3(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Int32,LangExt.Seq{``2}})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Choose``3(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,LangExt.Option{``2}})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すChooseです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ChooseWithIndex``3(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Int32,LangExt.Option{``2}})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すChooseWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhile``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhile``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhileWithIndex``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Int32,System.Boolean})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhileWithIndex``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Int32,System.Boolean})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Partition``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すPartitionです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Span``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Break``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SortBy``3(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,``2})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSortBy``3(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,``2})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すRevSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Unfold``4(System.Tuple{``0,``1,``2},System.Func{``0,``1,``2,LangExt.Option{System.Tuple{``3,``0,``1,``2}}})">
            <summary>
            3要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Count``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongCount``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すLongCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Int32})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSumBy``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Int64})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すLongSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``4(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``3},LangExt.ISumStrategy{``3})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxBy``4(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``3})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すTryMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinBy``4(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``3})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すTryMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Fold``4(LangExt.ISeq{System.Tuple{``0,``1,``2}},``3,System.Func{``3,``0,``1,``2,``3})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryReduce``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``0,``1,``2,System.Tuple{``0,``1,``2}})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すTryReduceです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FoldBack``4(LangExt.ISeq{System.Tuple{``0,``1,``2}},``3,System.Func{``0,``1,``2,``3,``3})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すFoldBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryReduceBack``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``0,``1,``2,System.Tuple{``0,``1,``2}})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すTryReduceBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan``4(LangExt.ISeq{System.Tuple{``0,``1,``2}},``3,System.Func{``3,``0,``1,``2,``3})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack``4(LangExt.ISeq{System.Tuple{``0,``1,``2}},``3,System.Func{``0,``1,``2,``3,``3})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すScanBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan1``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``0,``1,``2,System.Tuple{``0,``1,``2}})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すScan1です。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack1``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``0,``1,``2,System.Tuple{``0,``1,``2}})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すScanBack1です。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryFind``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すTryFindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryPick``4(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,LangExt.Option{``3}})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すTryPickです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Forall``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Exists``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Filter``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FilterWithIndex``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Int32,System.Boolean})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すFilterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Map``4(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``3})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapWithIndex``4(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Int32,``3})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Iter``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Action{``0,``1,``2})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterWithIndex``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Action{``0,``1,``2,System.Int32})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Bind``4(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,LangExt.Seq{``3}})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.BindWithIndex``4(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Int32,LangExt.Seq{``3}})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Choose``4(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,LangExt.Option{``3}})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すChooseです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ChooseWithIndex``4(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Int32,LangExt.Option{``3}})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すChooseWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhile``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhile``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhileWithIndex``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Int32,System.Boolean})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhileWithIndex``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Int32,System.Boolean})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Partition``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すPartitionです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Span``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Break``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SortBy``4(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``3})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSortBy``4(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``3})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すRevSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Unfold``5(System.Tuple{``0,``1,``2,``3},System.Func{``0,``1,``2,``3,LangExt.Option{System.Tuple{``4,``0,``1,``2,``3}}})">
            <summary>
            4要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Count``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongCount``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すLongCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Int32})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSumBy``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Int64})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すLongSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``4},LangExt.ISumStrategy{``4})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxBy``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すTryMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinBy``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すTryMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Fold``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},``4,System.Func{``4,``0,``1,``2,``3,``4})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryReduce``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``0,``1,``2,``3,System.Tuple{``0,``1,``2,``3}})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すTryReduceです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FoldBack``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},``4,System.Func{``0,``1,``2,``3,``4,``4})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すFoldBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryReduceBack``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``0,``1,``2,``3,System.Tuple{``0,``1,``2,``3}})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すTryReduceBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},``4,System.Func{``4,``0,``1,``2,``3,``4})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},``4,System.Func{``0,``1,``2,``3,``4,``4})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すScanBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan1``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``0,``1,``2,``3,System.Tuple{``0,``1,``2,``3}})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すScan1です。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack1``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``0,``1,``2,``3,System.Tuple{``0,``1,``2,``3}})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すScanBack1です。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryFind``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すTryFindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryPick``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,LangExt.Option{``4}})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すTryPickです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Forall``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Exists``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Filter``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FilterWithIndex``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Int32,System.Boolean})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すFilterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Map``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapWithIndex``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Int32,``4})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Iter``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Action{``0,``1,``2,``3})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterWithIndex``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Action{``0,``1,``2,``3,System.Int32})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Bind``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,LangExt.Seq{``4}})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.BindWithIndex``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Int32,LangExt.Seq{``4}})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Choose``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,LangExt.Option{``4}})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すChooseです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ChooseWithIndex``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Int32,LangExt.Option{``4}})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すChooseWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhile``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhile``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhileWithIndex``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Int32,System.Boolean})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhileWithIndex``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Int32,System.Boolean})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Partition``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すPartitionです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Span``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Break``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SortBy``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSortBy``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すRevSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Unfold``6(System.Tuple{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,``4,LangExt.Option{System.Tuple{``5,``0,``1,``2,``3,``4}}})">
            <summary>
            5要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Count``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongCount``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すLongCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Int32})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSumBy``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Int64})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すLongSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``5},LangExt.ISumStrategy{``5})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxBy``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すTryMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinBy``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すTryMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Fold``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},``5,System.Func{``5,``0,``1,``2,``3,``4,``5})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryReduce``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``0,``1,``2,``3,``4,System.Tuple{``0,``1,``2,``3,``4}})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すTryReduceです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FoldBack``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},``5,System.Func{``0,``1,``2,``3,``4,``5,``5})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すFoldBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryReduceBack``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``0,``1,``2,``3,``4,System.Tuple{``0,``1,``2,``3,``4}})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すTryReduceBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},``5,System.Func{``5,``0,``1,``2,``3,``4,``5})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},``5,System.Func{``0,``1,``2,``3,``4,``5,``5})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すScanBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan1``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``0,``1,``2,``3,``4,System.Tuple{``0,``1,``2,``3,``4}})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すScan1です。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack1``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``0,``1,``2,``3,``4,System.Tuple{``0,``1,``2,``3,``4}})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すScanBack1です。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryFind``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すTryFindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryPick``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,LangExt.Option{``5}})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すTryPickです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Forall``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Exists``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Filter``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FilterWithIndex``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Int32,System.Boolean})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すFilterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Map``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapWithIndex``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Int32,``5})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Iter``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Action{``0,``1,``2,``3,``4})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterWithIndex``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Action{``0,``1,``2,``3,``4,System.Int32})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Bind``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,LangExt.Seq{``5}})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.BindWithIndex``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Int32,LangExt.Seq{``5}})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Choose``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,LangExt.Option{``5}})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すChooseです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ChooseWithIndex``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Int32,LangExt.Option{``5}})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すChooseWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhile``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhile``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhileWithIndex``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Int32,System.Boolean})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhileWithIndex``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Int32,System.Boolean})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Partition``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すPartitionです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Span``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Break``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SortBy``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSortBy``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すRevSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Unfold``7(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``0,``1,``2,``3,``4,``5,LangExt.Option{System.Tuple{``6,``0,``1,``2,``3,``4,``5}}})">
            <summary>
            6要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Count``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongCount``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すLongCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Int32})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSumBy``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Int64})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すLongSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``6},LangExt.ISumStrategy{``6})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxBy``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すTryMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinBy``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すTryMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Fold``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},``6,System.Func{``6,``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryReduce``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``0,``1,``2,``3,``4,``5,System.Tuple{``0,``1,``2,``3,``4,``5}})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すTryReduceです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FoldBack``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},``6,System.Func{``0,``1,``2,``3,``4,``5,``6,``6})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すFoldBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryReduceBack``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``0,``1,``2,``3,``4,``5,System.Tuple{``0,``1,``2,``3,``4,``5}})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すTryReduceBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},``6,System.Func{``6,``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},``6,System.Func{``0,``1,``2,``3,``4,``5,``6,``6})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すScanBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan1``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``0,``1,``2,``3,``4,``5,System.Tuple{``0,``1,``2,``3,``4,``5}})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すScan1です。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack1``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``0,``1,``2,``3,``4,``5,System.Tuple{``0,``1,``2,``3,``4,``5}})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すScanBack1です。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryFind``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すTryFindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryPick``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,LangExt.Option{``6}})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すTryPickです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Forall``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Exists``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Filter``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FilterWithIndex``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Int32,System.Boolean})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すFilterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Map``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapWithIndex``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Int32,``6})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Iter``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterWithIndex``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Action{``0,``1,``2,``3,``4,``5,System.Int32})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Bind``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,LangExt.Seq{``6}})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.BindWithIndex``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Int32,LangExt.Seq{``6}})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Choose``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,LangExt.Option{``6}})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すChooseです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ChooseWithIndex``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Int32,LangExt.Option{``6}})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すChooseWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhile``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhile``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhileWithIndex``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Int32,System.Boolean})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhileWithIndex``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Int32,System.Boolean})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Partition``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すPartitionです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Span``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Break``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SortBy``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSortBy``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すRevSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Unfold``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``1,``2,``3,``4,``5,``6,LangExt.Option{System.Tuple{``7,``0,``1,``2,``3,``4,``5,System.Tuple{``6}}}})">
            <summary>
            7要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Count``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongCount``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すLongCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Int32})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSumBy``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Int64})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すLongSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7},LangExt.ISumStrategy{``7})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxBy``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すTryMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinBy``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すTryMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Fold``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},``7,System.Func{``7,``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryReduce``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``0,``1,``2,``3,``4,``5,``6,System.Tuple{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すTryReduceです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FoldBack``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},``7,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``7})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すFoldBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryReduceBack``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``0,``1,``2,``3,``4,``5,``6,System.Tuple{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すTryReduceBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},``7,System.Func{``7,``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},``7,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``7})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すScanBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan1``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``0,``1,``2,``3,``4,``5,``6,System.Tuple{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すScan1です。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack1``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``0,``1,``2,``3,``4,``5,``6,System.Tuple{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すScanBack1です。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryFind``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すTryFindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryPick``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,LangExt.Option{``7}})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すTryPickです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Forall``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Exists``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Filter``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FilterWithIndex``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Int32,System.Boolean})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すFilterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Map``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapWithIndex``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Int32,``7})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Iter``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterWithIndex``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Action{``0,``1,``2,``3,``4,``5,``6,System.Int32})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Bind``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,LangExt.Seq{``7}})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.BindWithIndex``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Int32,LangExt.Seq{``7}})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Choose``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,LangExt.Option{``7}})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すChooseです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ChooseWithIndex``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Int32,LangExt.Option{``7}})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すChooseWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhile``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhile``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhileWithIndex``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Int32,System.Boolean})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhileWithIndex``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Int32,System.Boolean})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Partition``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すPartitionです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Span``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Break``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SortBy``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSortBy``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すRevSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Unfold``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,LangExt.Option{System.Tuple{``8,``0,``1,``2,``3,``4,``5,System.Tuple{``6,``7}}}})">
            <summary>
            8要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Count``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongCount``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すLongCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Int32})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSumBy``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Int64})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すLongSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},LangExt.ISumStrategy{``8})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxBy``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すTryMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinBy``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すTryMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Fold``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},``8,System.Func{``8,``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryReduce``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``0,``1,``2,``3,``4,``5,``6,``7,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すTryReduceです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FoldBack``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},``8,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``8})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すFoldBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryReduceBack``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``0,``1,``2,``3,``4,``5,``6,``7,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すTryReduceBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},``8,System.Func{``8,``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},``8,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``8})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すScanBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan1``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``0,``1,``2,``3,``4,``5,``6,``7,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すScan1です。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack1``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``0,``1,``2,``3,``4,``5,``6,``7,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すScanBack1です。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryFind``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すTryFindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryPick``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,LangExt.Option{``8}})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すTryPickです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Forall``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Exists``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Filter``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FilterWithIndex``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Int32,System.Boolean})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すFilterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Map``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapWithIndex``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Int32,``8})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Iter``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterWithIndex``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,System.Int32})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Bind``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,LangExt.Seq{``8}})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.BindWithIndex``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Int32,LangExt.Seq{``8}})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Choose``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,LangExt.Option{``8}})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すChooseです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ChooseWithIndex``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Int32,LangExt.Option{``8}})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すChooseWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhile``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhile``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhileWithIndex``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Int32,System.Boolean})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhileWithIndex``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Int32,System.Boolean})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Partition``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すPartitionです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Span``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Break``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SortBy``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSortBy``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すRevSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Unfold``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,LangExt.Option{System.Tuple{``9,``0,``1,``2,``3,``4,``5,System.Tuple{``6,``7,``8}}}})">
            <summary>
            9要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Count``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongCount``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すLongCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Int32})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSumBy``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Int64})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すLongSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},LangExt.ISumStrategy{``9})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxBy``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すTryMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinBy``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すTryMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Fold``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},``9,System.Func{``9,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FoldBack``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},``9,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``9})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すFoldBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},``9,System.Func{``9,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},``9,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``9})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すScanBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryFind``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すTryFindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryPick``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,LangExt.Option{``9}})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すTryPickです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Forall``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Exists``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Filter``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FilterWithIndex``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Int32,System.Boolean})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すFilterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Map``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapWithIndex``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Int32,``9})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Iter``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterWithIndex``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Int32})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Bind``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,LangExt.Seq{``9}})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.BindWithIndex``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Int32,LangExt.Seq{``9}})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Choose``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,LangExt.Option{``9}})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すChooseです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ChooseWithIndex``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Int32,LangExt.Option{``9}})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すChooseWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhile``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhile``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhileWithIndex``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Int32,System.Boolean})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhileWithIndex``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Int32,System.Boolean})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Partition``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すPartitionです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Span``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Break``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SortBy``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSortBy``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すRevSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Unfold``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,LangExt.Option{System.Tuple{``10,``0,``1,``2,``3,``4,``5,System.Tuple{``6,``7,``8,``9}}}})">
            <summary>
            10要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Count``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongCount``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すLongCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Int32})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSumBy``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Int64})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すLongSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},LangExt.ISumStrategy{``10})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxBy``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すTryMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinBy``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すTryMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Fold``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},``10,System.Func{``10,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FoldBack``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},``10,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``10})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すFoldBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},``10,System.Func{``10,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},``10,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``10})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すScanBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryFind``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すTryFindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryPick``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,LangExt.Option{``10}})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すTryPickです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Forall``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Exists``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Filter``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FilterWithIndex``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Int32,System.Boolean})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すFilterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Map``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapWithIndex``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Int32,``10})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Iter``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterWithIndex``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Int32})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Bind``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,LangExt.Seq{``10}})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.BindWithIndex``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Int32,LangExt.Seq{``10}})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Choose``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,LangExt.Option{``10}})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すChooseです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ChooseWithIndex``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Int32,LangExt.Option{``10}})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すChooseWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhile``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhile``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhileWithIndex``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Int32,System.Boolean})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhileWithIndex``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Int32,System.Boolean})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Partition``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すPartitionです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Span``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Break``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SortBy``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSortBy``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すRevSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Unfold``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,LangExt.Option{System.Tuple{``11,``0,``1,``2,``3,``4,``5,System.Tuple{``6,``7,``8,``9,``10}}}})">
            <summary>
            11要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Count``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongCount``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すLongCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Int32})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSumBy``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Int64})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すLongSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},LangExt.ISumStrategy{``11})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxBy``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すTryMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinBy``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すTryMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Fold``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},``11,System.Func{``11,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FoldBack``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},``11,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``11})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すFoldBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},``11,System.Func{``11,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},``11,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``11})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すScanBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryFind``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すTryFindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryPick``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,LangExt.Option{``11}})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すTryPickです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Forall``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Exists``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Filter``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FilterWithIndex``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Int32,System.Boolean})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すFilterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Map``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapWithIndex``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Int32,``11})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Iter``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterWithIndex``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Int32})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Bind``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,LangExt.Seq{``11}})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.BindWithIndex``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Int32,LangExt.Seq{``11}})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Choose``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,LangExt.Option{``11}})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すChooseです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ChooseWithIndex``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Int32,LangExt.Option{``11}})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すChooseWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhile``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhile``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhileWithIndex``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Int32,System.Boolean})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhileWithIndex``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Int32,System.Boolean})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Partition``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すPartitionです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Span``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Break``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SortBy``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSortBy``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すRevSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Unfold``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,LangExt.Option{System.Tuple{``12,``0,``1,``2,``3,``4,``5,System.Tuple{``6,``7,``8,``9,``10,``11}}}})">
            <summary>
            12要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Count``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongCount``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すLongCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Int32})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSumBy``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Int64})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すLongSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},LangExt.ISumStrategy{``12})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxBy``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すTryMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinBy``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すTryMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Fold``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},``12,System.Func{``12,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FoldBack``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},``12,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``12})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すFoldBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},``12,System.Func{``12,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},``12,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``12})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すScanBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryFind``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すTryFindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryPick``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,LangExt.Option{``12}})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すTryPickです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Forall``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Exists``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Filter``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FilterWithIndex``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Int32,System.Boolean})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すFilterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Map``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapWithIndex``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Int32,``12})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Iter``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterWithIndex``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Int32})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Bind``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,LangExt.Seq{``12}})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.BindWithIndex``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Int32,LangExt.Seq{``12}})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Choose``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,LangExt.Option{``12}})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すChooseです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ChooseWithIndex``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Int32,LangExt.Option{``12}})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すChooseWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhile``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhile``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhileWithIndex``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Int32,System.Boolean})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhileWithIndex``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Int32,System.Boolean})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Partition``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すPartitionです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Span``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Break``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SortBy``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSortBy``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すRevSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Unfold``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,LangExt.Option{System.Tuple{``13,``0,``1,``2,``3,``4,``5,System.Tuple{``6,``7,``8,``9,``10,``11,``12}}}})">
            <summary>
            13要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Count``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongCount``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すLongCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Int32})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSumBy``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Int64})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すLongSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},LangExt.ISumStrategy{``13})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxBy``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すTryMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinBy``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すTryMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Fold``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},``13,System.Func{``13,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FoldBack``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},``13,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``13})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すFoldBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},``13,System.Func{``13,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},``13,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``13})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すScanBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryFind``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すTryFindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryPick``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,LangExt.Option{``13}})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すTryPickです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Forall``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Exists``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Filter``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FilterWithIndex``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Int32,System.Boolean})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すFilterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Map``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapWithIndex``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Int32,``13})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Iter``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterWithIndex``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Int32})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Bind``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,LangExt.Seq{``13}})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.BindWithIndex``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Int32,LangExt.Seq{``13}})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Choose``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,LangExt.Option{``13}})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すChooseです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ChooseWithIndex``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Int32,LangExt.Option{``13}})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すChooseWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhile``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhile``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhileWithIndex``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Int32,System.Boolean})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhileWithIndex``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Int32,System.Boolean})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Partition``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すPartitionです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Span``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Break``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SortBy``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSortBy``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すRevSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Unfold``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,LangExt.Option{System.Tuple{``14,``0,``1,``2,``3,``4,``5,System.Tuple{``6,``7,``8,``9,``10,``11,``12,System.Tuple{``13}}}}})">
            <summary>
            14要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Count``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongCount``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すLongCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Int32})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSumBy``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Int64})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すLongSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},LangExt.ISumStrategy{``14})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxBy``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すTryMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinBy``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すTryMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Fold``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},``14,System.Func{``14,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FoldBack``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},``14,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``14})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すFoldBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},``14,System.Func{``14,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},``14,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``14})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すScanBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryFind``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すTryFindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryPick``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,LangExt.Option{``14}})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すTryPickです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Forall``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Exists``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Filter``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FilterWithIndex``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Int32,System.Boolean})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すFilterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Map``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapWithIndex``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Int32,``14})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Iter``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterWithIndex``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Int32})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Bind``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,LangExt.Seq{``14}})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.BindWithIndex``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Int32,LangExt.Seq{``14}})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Choose``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,LangExt.Option{``14}})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すChooseです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ChooseWithIndex``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Int32,LangExt.Option{``14}})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すChooseWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhile``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhile``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhileWithIndex``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Int32,System.Boolean})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhileWithIndex``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Int32,System.Boolean})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Partition``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すPartitionです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Span``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Break``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SortBy``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSortBy``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すRevSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Unfold``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,LangExt.Option{System.Tuple{``15,``0,``1,``2,``3,``4,``5,System.Tuple{``6,``7,``8,``9,``10,``11,``12,System.Tuple{``13,``14}}}}})">
            <summary>
            15要素タプルの各要素を展開して関数に渡すUnfoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Count``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongCount``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すLongCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Int32})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSumBy``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Int64})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すLongSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},LangExt.ISumStrategy{``15})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxBy``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すTryMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinBy``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すTryMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Fold``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},``15,System.Func{``15,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すFoldです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FoldBack``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},``15,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``15})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すFoldBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},``15,System.Func{``15,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すScanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},``15,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``15})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すScanBackです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryFind``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すTryFindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryPick``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,LangExt.Option{``15}})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すTryPickです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Forall``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Exists``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Filter``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FilterWithIndex``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Int32,System.Boolean})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すFilterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Map``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapWithIndex``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Int32,``15})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すMapWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Iter``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterWithIndex``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Int32})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すIterWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Bind``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,LangExt.Seq{``15}})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.BindWithIndex``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Int32,LangExt.Seq{``15}})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すBindWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Choose``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,LangExt.Option{``15}})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すChooseです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ChooseWithIndex``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Int32,LangExt.Option{``15}})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すChooseWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhile``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhile``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhileWithIndex``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Int32,System.Boolean})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhileWithIndex``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Int32,System.Boolean})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileWithIndexです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Partition``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すPartitionです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Span``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Break``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SortBy``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSortBy``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すRevSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Count``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongCount``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すLongCountです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Int32})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSumBy``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Int64})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すLongSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``17(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},LangExt.ISumStrategy{``16})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すSumByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxBy``17(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すTryMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinBy``17(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すTryMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryFind``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すTryFindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryPick``17(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,LangExt.Option{``16}})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すTryPickです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Forall``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すForallです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Exists``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すExistsです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Filter``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すFilterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Map``17(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すMapです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Iter``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すIterです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Bind``17(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,LangExt.Seq{``16}})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すBindです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Choose``17(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,LangExt.Option{``16}})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すChooseです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhile``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すSkipWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhile``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すTakeWhileです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Partition``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すPartitionです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Span``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すSpanです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Break``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すBreakです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SortBy``17(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSortBy``17(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すRevSortByです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Select``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            クエリ式でシーケンスを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SelectMany``3(LangExt.ISeq{``0},System.Func{``0,LangExt.ISeq{``1}},System.Func{``0,``1,``2})">
            <summary>
            クエリ式でシーケンスを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Where``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            クエリ式でシーケンスを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Join``4(LangExt.ISeq{``0},LangExt.ISeq{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
            <summary>
            クエリ式でシーケンスを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.GroupJoin``4(LangExt.ISeq{``0},LangExt.ISeq{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,LangExt.ISeq{``1},``3})">
            <summary>
            クエリ式でシーケンスを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.OrderBy``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            クエリ式でシーケンスを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.OrderByDescending``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            クエリ式でシーケンスを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``3(LangExt.ISeq{``0},LangExt.ISeq{``1},System.Func{``0,``1,``2})">
            <summary>2個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``2(LangExt.ISeq{``0},LangExt.ISeq{``1})">
            <summary>2個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``2(LangExt.ISeq{System.Tuple{``0,``1}})">
            <summary>Zipされたシーケンスを元に戻し、2個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``4(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},System.Func{``0,``1,``2,``3})">
            <summary>3個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``3(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2})">
            <summary>3個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``3(LangExt.ISeq{System.Tuple{``0,``1,``2}})">
            <summary>Zipされたシーケンスを元に戻し、3個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``5(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>4個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``4(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3})">
            <summary>4個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}})">
            <summary>Zipされたシーケンスを元に戻し、4個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``6(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>5個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``5(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4})">
            <summary>5個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}})">
            <summary>Zipされたシーケンスを元に戻し、5個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``7(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>6個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``6(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5})">
            <summary>6個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}})">
            <summary>Zipされたシーケンスを元に戻し、6個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``8(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>7個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``7(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6})">
            <summary>7個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>Zipされたシーケンスを元に戻し、7個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``9(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>8個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``8(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7})">
            <summary>8個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}})">
            <summary>Zipされたシーケンスを元に戻し、8個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``10(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>9個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``9(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8})">
            <summary>9個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}})">
            <summary>Zipされたシーケンスを元に戻し、9個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``11(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>10個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``10(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9})">
            <summary>10個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}})">
            <summary>Zipされたシーケンスを元に戻し、10個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``12(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>11個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``11(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10})">
            <summary>11個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}})">
            <summary>Zipされたシーケンスを元に戻し、11個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``13(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>12個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``12(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11})">
            <summary>12個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}})">
            <summary>Zipされたシーケンスを元に戻し、12個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``14(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>13個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``13(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12})">
            <summary>13個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}})">
            <summary>Zipされたシーケンスを元に戻し、13個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``15(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12},LangExt.ISeq{``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>14個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``14(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12},LangExt.ISeq{``13})">
            <summary>14個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}})">
            <summary>Zipされたシーケンスを元に戻し、14個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``16(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12},LangExt.ISeq{``13},LangExt.ISeq{``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>15個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``15(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12},LangExt.ISeq{``13},LangExt.ISeq{``14})">
            <summary>15個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}})">
            <summary>Zipされたシーケンスを元に戻し、15個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``17(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12},LangExt.ISeq{``13},LangExt.ISeq{``14},LangExt.ISeq{``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>16個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``16(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12},LangExt.ISeq{``13},LangExt.ISeq{``14},LangExt.ISeq{``15})">
            <summary>16個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}})">
            <summary>Zipされたシーケンスを元に戻し、16個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``1(LangExt.ISeq{``0})">
            <summary>シーケンスに対して、0から始まる整数列をZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``2(LangExt.ISeq{System.Tuple{``0,``1}})">
            <summary>2要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``3(LangExt.ISeq{System.Tuple{``0,``1,``2}})">
            <summary>3要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}})">
            <summary>4要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}})">
            <summary>5要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}})">
            <summary>6要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>7要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}})">
            <summary>8要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}})">
            <summary>9要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}})">
            <summary>10要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}})">
            <summary>11要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}})">
            <summary>12要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}})">
            <summary>13要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}})">
            <summary>14要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}})">
            <summary>15要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="T:LangExt.Option`1">
            <summary>
            nullよりも安全に「値がないこと」を表すことのできるデータ型です。
            </summary>
            <remarks>
            この型は値のある「Some」と、値がない「None」を表すことができ、
            デフォルトではNoneとなります。
            また、任意の型からの暗黙変換を定義しており、この場合を保持するSomeとなります。
            </remarks>
            <typeparam name="T">値の型</typeparam>
        </member>
        <member name="M:LangExt.Option`1.#ctor(`0)">
            <summary>
            値を指定して明示的にSomeを生成します。
            基本的にはこのコンストラクタを直接使用せずに、
            Option.Someメソッドを使用してください。
            引数にnullを指定すると、ArgumentNullExceptionが投げられます。
            これにより、Optionが値を持つ場合、その値がnullではないことが保証されます。
            </summary>
            <param name="value">Optionに格納する値</param>
        </member>
        <member name="M:LangExt.Option`1.op_Implicit(LangExt.Option{LangExt.Placeholder})~LangExt.Option{`0}">
            <summary>
            Option.Noneで取得したオブジェクトを、任意のTのNoneに暗黙変換します。
            </summary>
            <param name="value">Option.None</param>
            <returns>任意のTのNone</returns>
        </member>
        <member name="M:LangExt.Option`1.GetOr(`0)">
            <summary>
            Someの場合、保持された値を取り出します。
            Noneの場合、引数に指定した値を返します。
            </summary>
            <param name="defaultValue">Noneの場合の戻り値</param>
            <returns>Someの場合保持している値。Noneの場合引数で指定した値</returns>
        </member>
        <member name="M:LangExt.Option`1.GetOrElse(System.Func{`0})">
            <summary>
            Someの場合、保持された値を取り出します。
            Noneの場合、引数に指定した関数の実行結果を返します。
            </summary>
            <param name="defaultF">Noneの場合の戻り値を返す関数</param>
            <returns>Someの場合保持している値。Noneの場合引数で指定した関数が返す値</returns>
        </member>
        <member name="M:LangExt.Option`1.Match``1(System.Func{`0,``0},System.Func{``0})">
            <summary>
            擬似的にパターンマッチを行います。
            値がある場合とない場合の両方で何らかの処理を行う必要がある際に使用します。
            </summary>
            <typeparam name="U">パターンマッチが返す処理の型</typeparam>
            <param name="Some">Someの場合の処理</param>
            <param name="None">Noneの場合の処理</param>
            <returns>処理が返した値</returns>
        </member>
        <member name="M:LangExt.Option`1.Match(System.Action{`0},System.Action)">
            <summary>
            擬似的にパターンマッチを行います。
            値がある場合とない場合の両方で何らかの処理を行う必要がある際に使用します。
            </summary>
            <param name="Some">Someの場合の処理</param>
            <param name="None">Noneの場合の処理</param>
        </member>
        <member name="M:LangExt.Option`1.Bind``1(System.Func{`0,LangExt.Option{``0}})">
            <summary>
            T型のOptionをU型のオプションに変換します。
            値がある場合のみに変換を適用します。
            変換は、T型を受け取りU型のOptionを返す関数として指定します。
            </summary>
            <typeparam name="U">変換先の型</typeparam>
            <param name="f">変換に用いる関数</param>
            <returns>変換した値</returns>
        </member>
        <member name="M:LangExt.Option`1.Equals(LangExt.Option{`0})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            Option.Noneで返された値と、型付きのNoneを比較した場合にfalseが返される点に注意してください。
            もしその場合にtrueを返してほしい場合は、EqualsではなくNonStrictEqualsを使用してください。
            </summary>
            <param name="other">このオブジェクトと比較するOption</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Option`1.NonStrictEquals``1(LangExt.Option{``0})">
            <summary>
            現在のオブジェクトが、別のOptionと等しいかどうかを判定します。
            Equalsとは違い、Option.Noneで返された値と型付きのNoneを比較した場合にもtrueを返します。
            </summary>
            <param name="other">このオブジェクトと比較するOption</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Option`1.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Option`1.op_Equality(LangExt.Option{`0},LangExt.Option{`0})">
            <summary>
            2つのOptionの比較を行います。 
            </summary>
            <param name="a">1つ目のOption</param>
            <param name="b">2つ目のOption</param>
            <returns>2つのOptionが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Option`1.op_Inequality(LangExt.Option{`0},LangExt.Option{`0})">
            <summary>
            2つのOptionの比較を行います。 
            </summary>
            <param name="a">1つ目のOption</param>
            <param name="b">2つ目のOption</param>
            <returns>2つのOptionが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Option`1.op_True(LangExt.Option{`0})">
            <summary>
            Optionが値を持つかどうかを判定します。
            </summary>
            <param name="x">判定の対象</param>
            <returns>値を持つ場合はtrue、持たない場合はfalse</returns>
        </member>
        <member name="M:LangExt.Option`1.op_False(LangExt.Option{`0})">
            <summary>
            Optionが値を持たないかどうかを判定します。
            </summary>
            <param name="x">判定の対象</param>
            <returns>値を持つ場合はfalse、持たない場合はtrue</returns>
        </member>
        <member name="M:LangExt.Option`1.OrElse(System.Func{LangExt.Option{`0}})">
            <summary>
            自身が値を持つ場合は自身を、そうでない場合はelsePartの結果を返します。
            Optionは短絡のor演算子を提供しているため、そちらを使用したほうが効率的です。
            </summary>
            <param name="elsePart">自身が値を持たなかった場合の値を返す関数</param>
            <returns>自身が値を持つ場合は自身、値を持たない場合はelsePartの結果</returns>
        </member>
        <member name="M:LangExt.Option`1.AndThen``1(System.Func{LangExt.Option{``0}})">
            <summary>
            自身とthenPartの結果の両方が値を持つ場合はthenPartの結果を、
            そうでない場合はNoneを返します。
            Optionは短絡のand演算子を提供しているため、そちらを使用したほうが効率的です。
            </summary>
            <param name="thenPart">自身が値を持つ場合の値を返す関数</param>
            <returns>自身とthenPartの結果の両方が値を持つ場合はthenPartの結果、どちらか一方でも値を持たなかった場合はNone</returns>
        </member>
        <member name="M:LangExt.Option`1.op_BitwiseOr(LangExt.Option{`0},LangExt.Option{`0})">
            <summary>
            左辺のOptionが値を持つ場合は左辺を、そうでない場合は右辺を返します。
            通常、直接使用せず、短絡演算子として使用します。
            </summary>
            <param name="a">1つ目のOption</param>
            <param name="b">2つ目のOption</param>
            <returns>左辺のOptionが値を持つ場合は左辺、それ以外の場合は右辺</returns>
        </member>
        <member name="M:LangExt.Option`1.op_BitwiseAnd(LangExt.Option{`0},LangExt.Option{`0})">
            <summary>
            両辺のOptionが値を持つ場合は右辺を、そうでない場合はNoneを返します。
            通常、直接使用せず、短絡演算子として使用します。
            </summary>
            <param name="a">1つ目のOption</param>
            <param name="b">2つ目のOption</param>
            <returns>両辺のOptionが値を持つ場合は右辺を、一方でも値を持たない場合はNone</returns>
        </member>
        <member name="M:LangExt.Option`1.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Option`1.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="M:LangExt.Option`1.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Option`1.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="P:LangExt.Option`1.None">
            <summary>
            任意の型のNoneを取得します。
            基本的にはこのプロパティを直接使用せずに、
            Option.Noneプロパティを使用してください。
            </summary>
        </member>
        <member name="P:LangExt.Option`1.IsSome">
            <summary>
            このオブジェクトが値を持つかどうかを取得します。
            制御構文内でboolが必要な場所に対しては、IsSomeやIsNoneではなく、Optionオブジェクトをそのまま使用することも可能です。
            </summary>
        </member>
        <member name="P:LangExt.Option`1.IsNone">
            <summary>
            このオブジェクトが値を持たないかどうかを取得します。
            制御構文内でboolが必要な場所に対しては、IsSomeやIsNoneではなく、Optionオブジェクトをそのまま使用することも可能です。
            </summary>
        </member>
        <member name="T:LangExt.Placeholder">
            <summary>
            プレースホルダーとして使用することを前提とした型です。
            </summary>
        </member>
        <member name="T:LangExt.Unit">
            <summary>
            値がないことを表すための型です。
            </summary>
        </member>
        <member name="F:LangExt.Unit._">
            <summary>
            Unitの値を取得します。
            </summary>
        </member>
        <member name="M:LangExt.Unit.op_Equality(LangExt.Unit,LangExt.Unit)">
            <summary>
            Unitは常に等しいため、この演算子は常にtrueを返します。
            </summary>
        </member>
        <member name="M:LangExt.Unit.op_Inequality(LangExt.Unit,LangExt.Unit)">
            <summary>
            Unitは常に等しいため、この演算子は常にfalseを返します。
            </summary>
        </member>
        <member name="M:LangExt.Unit.op_LessThan(LangExt.Unit,LangExt.Unit)">
            <summary>
            Unitは常に等しいため、この演算子は常にfalseを返します。
            </summary>
        </member>
        <member name="M:LangExt.Unit.op_GreaterThan(LangExt.Unit,LangExt.Unit)">
            <summary>
            Unitは常に等しいため、この演算子は常にfalseを返します。
            </summary>
        </member>
        <member name="M:LangExt.Unit.op_LessThanOrEqual(LangExt.Unit,LangExt.Unit)">
            <summary>
            Unitは常に等しいため、この演算子は常にtrueを返します。
            </summary>
        </member>
        <member name="M:LangExt.Unit.op_GreaterThanOrEqual(LangExt.Unit,LangExt.Unit)">
            <summary>
            Unitは常に等しいため、この演算子は常にtrueを返します。
            </summary>
        </member>
        <member name="M:LangExt.Unit.Equals(LangExt.Unit)">
            <summary>
            Unitは常に等しいため、このメソッドは常にtrueを返します。
            </summary>
        </member>
        <member name="M:LangExt.Unit.Equals(System.Object)">
            <summary>
            引数がUnitかどうかを判定します。
            </summary>
        </member>
        <member name="M:LangExt.Unit.CompareTo(LangExt.Unit)">
            <summary>
            Unitは常に等しいため、このメソッドは常に0を返します。
            </summary>
        </member>
        <member name="M:LangExt.Unit.GetHashCode">
            <summary>
            このオブジェクトを表すハッシュ値を取得します。
            </summary>
        </member>
        <member name="M:LangExt.Unit.ToString">
            <summary>
            このオブジェクトの文字列表現を取得します。
            </summary>
        </member>
        <member name="M:LangExt.Unit.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Unit.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="T:LangExt.UnitModule">
            <summary>
            Unitに対する関数を提供します。
            </summary>
        </member>
        <member name="M:LangExt.UnitModule.Ignore``1(``0)">
            <summary>
            値を無視してUnitを返します。
            </summary>
        </member>
        <member name="M:LangExt.UnitModule.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.UnitModule.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="T:LangExt.ISumStrategy`1">
            <summary>
            Tの総和の計算を行う戦略を表すインターフェイスです。
            </summary>
            <typeparam name="T">総和を計算する型</typeparam>
        </member>
        <member name="M:LangExt.ISumStrategy`1.Plus(`0,`0)">
            <summary>
            Tを加算する演算です。
            可換であることは、このインターフェイスでは求めていません。
            </summary>
        </member>
        <member name="P:LangExt.ISumStrategy`1.Zero">
            <summary>
            Tの加算に対する単位元を取得します。
            </summary>
        </member>
        <member name="T:LangExt.SumStrategy">
            <summary>
            よく使用するISumStrategyの生成を簡略化するためのクラスです。
            </summary>
        </member>
        <member name="M:LangExt.SumStrategy.Create``1(``0,System.Func{``0,``0,``0})">
            <summary>
            ゼロ値と加算のための関数からISumStrategyを生成します。
            </summary>
        </member>
        <member name="M:LangExt.SumStrategy.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.SumStrategy.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="P:LangExt.SumStrategy.Decimal">
            <summary>
            decimalに対するISumStrategyを返します。
            </summary>
        </member>
        <member name="P:LangExt.SumStrategy.Double">
            <summary>
            doubleに対するISumStrategyを返します。
            </summary>
        </member>
        <member name="P:LangExt.SumStrategy.Float">
            <summary>
            floatに対するISumStrategyを返します。
            </summary>
        </member>
        <member name="P:LangExt.SumStrategy.TimeSpan">
            <summary>
            System.TimeSpanに対するISumStrategyを返します。
            </summary>
        </member>
        <member name="P:LangExt.SumStrategy.String">
            <summary>
            stringに対するISumStrategyを返します。
            </summary>
        </member>
        <member name="T:LangExt.TryFunc">
            <summary>
            TryFuncに対する関数を提供します。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToOptFunc``1(LangExt.TryFunc{``0})">
            <summary>
            出力引数を伴う関数を、Optionを返す関数に変換します。
            fがtrueを返す場合にSome(ただし、出力引数にnullが設定された場合はNone)を、fがfalseを返す場合にNoneを返す関数に変換します。
            fが例外を投げうる場合、ToResultFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToResultFunc``1(LangExt.TryFunc{``0})">
            <summary>
            出力引数を伴う関数を、Resultを返す関数に変換します。
            fがtrueを返す場合にSuccess(ただし、出力引数にnullが設定された場合はFailure)を、
            fがfalseを返す場合とfが例外を投げた場合にFailureを返す関数に変換します。
            fがfalseを返した場合と、出力引数にnullが指定された場合、NullResultExceptionがFailureの値として設定されます。
            fが例外を投げない場合、ToOptFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToOptFunc``2(LangExt.TryFunc{``0,``1})">
            <summary>
            出力引数を伴う関数を、Optionを返す関数に変換します。
            fがtrueを返す場合にSome(ただし、出力引数にnullが設定された場合はNone)を、fがfalseを返す場合にNoneを返す関数に変換します。
            fが例外を投げうる場合、ToResultFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToResultFunc``2(LangExt.TryFunc{``0,``1})">
            <summary>
            出力引数を伴う関数を、Resultを返す関数に変換します。
            fがtrueを返す場合にSuccess(ただし、出力引数にnullが設定された場合はFailure)を、
            fがfalseを返す場合とfが例外を投げた場合にFailureを返す関数に変換します。
            fがfalseを返した場合と、出力引数にnullが指定された場合、NullResultExceptionがFailureの値として設定されます。
            fが例外を投げない場合、ToOptFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToOptFunc``3(LangExt.TryFunc{``0,``1,``2})">
            <summary>
            出力引数を伴う関数を、Optionを返す関数に変換します。
            fがtrueを返す場合にSome(ただし、出力引数にnullが設定された場合はNone)を、fがfalseを返す場合にNoneを返す関数に変換します。
            fが例外を投げうる場合、ToResultFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToResultFunc``3(LangExt.TryFunc{``0,``1,``2})">
            <summary>
            出力引数を伴う関数を、Resultを返す関数に変換します。
            fがtrueを返す場合にSuccess(ただし、出力引数にnullが設定された場合はFailure)を、
            fがfalseを返す場合とfが例外を投げた場合にFailureを返す関数に変換します。
            fがfalseを返した場合と、出力引数にnullが指定された場合、NullResultExceptionがFailureの値として設定されます。
            fが例外を投げない場合、ToOptFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToOptFunc``4(LangExt.TryFunc{``0,``1,``2,``3})">
            <summary>
            出力引数を伴う関数を、Optionを返す関数に変換します。
            fがtrueを返す場合にSome(ただし、出力引数にnullが設定された場合はNone)を、fがfalseを返す場合にNoneを返す関数に変換します。
            fが例外を投げうる場合、ToResultFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToResultFunc``4(LangExt.TryFunc{``0,``1,``2,``3})">
            <summary>
            出力引数を伴う関数を、Resultを返す関数に変換します。
            fがtrueを返す場合にSuccess(ただし、出力引数にnullが設定された場合はFailure)を、
            fがfalseを返す場合とfが例外を投げた場合にFailureを返す関数に変換します。
            fがfalseを返した場合と、出力引数にnullが指定された場合、NullResultExceptionがFailureの値として設定されます。
            fが例外を投げない場合、ToOptFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToOptFunc``5(LangExt.TryFunc{``0,``1,``2,``3,``4})">
            <summary>
            出力引数を伴う関数を、Optionを返す関数に変換します。
            fがtrueを返す場合にSome(ただし、出力引数にnullが設定された場合はNone)を、fがfalseを返す場合にNoneを返す関数に変換します。
            fが例外を投げうる場合、ToResultFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToResultFunc``5(LangExt.TryFunc{``0,``1,``2,``3,``4})">
            <summary>
            出力引数を伴う関数を、Resultを返す関数に変換します。
            fがtrueを返す場合にSuccess(ただし、出力引数にnullが設定された場合はFailure)を、
            fがfalseを返す場合とfが例外を投げた場合にFailureを返す関数に変換します。
            fがfalseを返した場合と、出力引数にnullが指定された場合、NullResultExceptionがFailureの値として設定されます。
            fが例外を投げない場合、ToOptFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToOptFunc``6(LangExt.TryFunc{``0,``1,``2,``3,``4,``5})">
            <summary>
            出力引数を伴う関数を、Optionを返す関数に変換します。
            fがtrueを返す場合にSome(ただし、出力引数にnullが設定された場合はNone)を、fがfalseを返す場合にNoneを返す関数に変換します。
            fが例外を投げうる場合、ToResultFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToResultFunc``6(LangExt.TryFunc{``0,``1,``2,``3,``4,``5})">
            <summary>
            出力引数を伴う関数を、Resultを返す関数に変換します。
            fがtrueを返す場合にSuccess(ただし、出力引数にnullが設定された場合はFailure)を、
            fがfalseを返す場合とfが例外を投げた場合にFailureを返す関数に変換します。
            fがfalseを返した場合と、出力引数にnullが指定された場合、NullResultExceptionがFailureの値として設定されます。
            fが例外を投げない場合、ToOptFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToOptFunc``7(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            出力引数を伴う関数を、Optionを返す関数に変換します。
            fがtrueを返す場合にSome(ただし、出力引数にnullが設定された場合はNone)を、fがfalseを返す場合にNoneを返す関数に変換します。
            fが例外を投げうる場合、ToResultFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToResultFunc``7(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            出力引数を伴う関数を、Resultを返す関数に変換します。
            fがtrueを返す場合にSuccess(ただし、出力引数にnullが設定された場合はFailure)を、
            fがfalseを返す場合とfが例外を投げた場合にFailureを返す関数に変換します。
            fがfalseを返した場合と、出力引数にnullが指定された場合、NullResultExceptionがFailureの値として設定されます。
            fが例外を投げない場合、ToOptFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToOptFunc``8(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            出力引数を伴う関数を、Optionを返す関数に変換します。
            fがtrueを返す場合にSome(ただし、出力引数にnullが設定された場合はNone)を、fがfalseを返す場合にNoneを返す関数に変換します。
            fが例外を投げうる場合、ToResultFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToResultFunc``8(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            出力引数を伴う関数を、Resultを返す関数に変換します。
            fがtrueを返す場合にSuccess(ただし、出力引数にnullが設定された場合はFailure)を、
            fがfalseを返す場合とfが例外を投げた場合にFailureを返す関数に変換します。
            fがfalseを返した場合と、出力引数にnullが指定された場合、NullResultExceptionがFailureの値として設定されます。
            fが例外を投げない場合、ToOptFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToOptFunc``9(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            出力引数を伴う関数を、Optionを返す関数に変換します。
            fがtrueを返す場合にSome(ただし、出力引数にnullが設定された場合はNone)を、fがfalseを返す場合にNoneを返す関数に変換します。
            fが例外を投げうる場合、ToResultFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToResultFunc``9(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            出力引数を伴う関数を、Resultを返す関数に変換します。
            fがtrueを返す場合にSuccess(ただし、出力引数にnullが設定された場合はFailure)を、
            fがfalseを返す場合とfが例外を投げた場合にFailureを返す関数に変換します。
            fがfalseを返した場合と、出力引数にnullが指定された場合、NullResultExceptionがFailureの値として設定されます。
            fが例外を投げない場合、ToOptFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToOptFunc``10(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            出力引数を伴う関数を、Optionを返す関数に変換します。
            fがtrueを返す場合にSome(ただし、出力引数にnullが設定された場合はNone)を、fがfalseを返す場合にNoneを返す関数に変換します。
            fが例外を投げうる場合、ToResultFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToResultFunc``10(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            出力引数を伴う関数を、Resultを返す関数に変換します。
            fがtrueを返す場合にSuccess(ただし、出力引数にnullが設定された場合はFailure)を、
            fがfalseを返す場合とfが例外を投げた場合にFailureを返す関数に変換します。
            fがfalseを返した場合と、出力引数にnullが指定された場合、NullResultExceptionがFailureの値として設定されます。
            fが例外を投げない場合、ToOptFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToOptFunc``11(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            出力引数を伴う関数を、Optionを返す関数に変換します。
            fがtrueを返す場合にSome(ただし、出力引数にnullが設定された場合はNone)を、fがfalseを返す場合にNoneを返す関数に変換します。
            fが例外を投げうる場合、ToResultFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToResultFunc``11(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            出力引数を伴う関数を、Resultを返す関数に変換します。
            fがtrueを返す場合にSuccess(ただし、出力引数にnullが設定された場合はFailure)を、
            fがfalseを返す場合とfが例外を投げた場合にFailureを返す関数に変換します。
            fがfalseを返した場合と、出力引数にnullが指定された場合、NullResultExceptionがFailureの値として設定されます。
            fが例外を投げない場合、ToOptFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToOptFunc``12(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            出力引数を伴う関数を、Optionを返す関数に変換します。
            fがtrueを返す場合にSome(ただし、出力引数にnullが設定された場合はNone)を、fがfalseを返す場合にNoneを返す関数に変換します。
            fが例外を投げうる場合、ToResultFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToResultFunc``12(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            出力引数を伴う関数を、Resultを返す関数に変換します。
            fがtrueを返す場合にSuccess(ただし、出力引数にnullが設定された場合はFailure)を、
            fがfalseを返す場合とfが例外を投げた場合にFailureを返す関数に変換します。
            fがfalseを返した場合と、出力引数にnullが指定された場合、NullResultExceptionがFailureの値として設定されます。
            fが例外を投げない場合、ToOptFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToOptFunc``13(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            出力引数を伴う関数を、Optionを返す関数に変換します。
            fがtrueを返す場合にSome(ただし、出力引数にnullが設定された場合はNone)を、fがfalseを返す場合にNoneを返す関数に変換します。
            fが例外を投げうる場合、ToResultFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToResultFunc``13(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            出力引数を伴う関数を、Resultを返す関数に変換します。
            fがtrueを返す場合にSuccess(ただし、出力引数にnullが設定された場合はFailure)を、
            fがfalseを返す場合とfが例外を投げた場合にFailureを返す関数に変換します。
            fがfalseを返した場合と、出力引数にnullが指定された場合、NullResultExceptionがFailureの値として設定されます。
            fが例外を投げない場合、ToOptFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToOptFunc``14(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            出力引数を伴う関数を、Optionを返す関数に変換します。
            fがtrueを返す場合にSome(ただし、出力引数にnullが設定された場合はNone)を、fがfalseを返す場合にNoneを返す関数に変換します。
            fが例外を投げうる場合、ToResultFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToResultFunc``14(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            出力引数を伴う関数を、Resultを返す関数に変換します。
            fがtrueを返す場合にSuccess(ただし、出力引数にnullが設定された場合はFailure)を、
            fがfalseを返す場合とfが例外を投げた場合にFailureを返す関数に変換します。
            fがfalseを返した場合と、出力引数にnullが指定された場合、NullResultExceptionがFailureの値として設定されます。
            fが例外を投げない場合、ToOptFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToOptFunc``15(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            出力引数を伴う関数を、Optionを返す関数に変換します。
            fがtrueを返す場合にSome(ただし、出力引数にnullが設定された場合はNone)を、fがfalseを返す場合にNoneを返す関数に変換します。
            fが例外を投げうる場合、ToResultFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToResultFunc``15(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            出力引数を伴う関数を、Resultを返す関数に変換します。
            fがtrueを返す場合にSuccess(ただし、出力引数にnullが設定された場合はFailure)を、
            fがfalseを返す場合とfが例外を投げた場合にFailureを返す関数に変換します。
            fがfalseを返した場合と、出力引数にnullが指定された場合、NullResultExceptionがFailureの値として設定されます。
            fが例外を投げない場合、ToOptFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToOptFunc``16(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            出力引数を伴う関数を、Optionを返す関数に変換します。
            fがtrueを返す場合にSome(ただし、出力引数にnullが設定された場合はNone)を、fがfalseを返す場合にNoneを返す関数に変換します。
            fが例外を投げうる場合、ToResultFuncの使用を検討してください。
            </summary>
        </member>
        <member name="M:LangExt.TryFunc.ToResultFunc``16(LangExt.TryFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            出力引数を伴う関数を、Resultを返す関数に変換します。
            fがtrueを返す場合にSuccess(ただし、出力引数にnullが設定された場合はFailure)を、
            fがfalseを返す場合とfが例外を投げた場合にFailureを返す関数に変換します。
            fがfalseを返した場合と、出力引数にnullが指定された場合、NullResultExceptionがFailureの値として設定されます。
            fが例外を投げない場合、ToOptFuncの使用を検討してください。
            </summary>
        </member>
        <member name="T:LangExt.TryFunc`1">
            <summary>
            出力引数を伴う関数を表すデリゲートです。
            </summary>
        </member>
        <member name="T:LangExt.TryFunc`2">
            <summary>
            出力引数を伴う関数を表すデリゲートです。
            </summary>
        </member>
        <member name="T:LangExt.TryFunc`3">
            <summary>
            出力引数を伴う関数を表すデリゲートです。
            </summary>
        </member>
        <member name="T:LangExt.TryFunc`4">
            <summary>
            出力引数を伴う関数を表すデリゲートです。
            </summary>
        </member>
        <member name="T:LangExt.TryFunc`5">
            <summary>
            出力引数を伴う関数を表すデリゲートです。
            </summary>
        </member>
        <member name="T:LangExt.TryFunc`6">
            <summary>
            出力引数を伴う関数を表すデリゲートです。
            </summary>
        </member>
        <member name="T:LangExt.TryFunc`7">
            <summary>
            出力引数を伴う関数を表すデリゲートです。
            </summary>
        </member>
        <member name="T:LangExt.TryFunc`8">
            <summary>
            出力引数を伴う関数を表すデリゲートです。
            </summary>
        </member>
        <member name="T:LangExt.TryFunc`9">
            <summary>
            出力引数を伴う関数を表すデリゲートです。
            </summary>
        </member>
        <member name="T:LangExt.TryFunc`10">
            <summary>
            出力引数を伴う関数を表すデリゲートです。
            </summary>
        </member>
        <member name="T:LangExt.TryFunc`11">
            <summary>
            出力引数を伴う関数を表すデリゲートです。
            </summary>
        </member>
        <member name="T:LangExt.TryFunc`12">
            <summary>
            出力引数を伴う関数を表すデリゲートです。
            </summary>
        </member>
        <member name="T:LangExt.TryFunc`13">
            <summary>
            出力引数を伴う関数を表すデリゲートです。
            </summary>
        </member>
        <member name="T:LangExt.TryFunc`14">
            <summary>
            出力引数を伴う関数を表すデリゲートです。
            </summary>
        </member>
        <member name="T:LangExt.TryFunc`15">
            <summary>
            出力引数を伴う関数を表すデリゲートです。
            </summary>
        </member>
        <member name="T:LangExt.TryFunc`16">
            <summary>
            出力引数を伴う関数を表すデリゲートです。
            </summary>
        </member>
        <member name="T:LangExt.TupleModule">
            <summary>タプルに対する関数を提供します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``2(``0,``1)">
            <summary>2要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``2(System.Tuple{``0,``1})">
            <summary>2要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``2(System.Tuple{``0,``1})">
            <summary>2要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``2(System.Tuple{``0,``1})">
            <summary>2要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``2(System.Tuple{``0,``1})">
            <summary>2要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``3(System.Tuple{``0,``1},``2)">
            <summary>2要素タプルに要素を追加し、3要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.AddFirst``3(System.Tuple{``1,``2},``0)">
            <summary>2要素タプルに要素を追加し、3要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``3(System.Tuple{``0,``1},System.Func{``0,``1,``2})">
            <summary>2要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``3(System.Tuple{``0,``1},System.Func{``0,``2})">
            <summary>2要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``3(System.Tuple{``0,``1},System.Func{``1,``2})">
            <summary>2要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``3(``0,``1,``2)">
            <summary>3要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``3(System.Tuple{``0,``1,``2})">
            <summary>3要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``3(System.Tuple{``0,``1,``2})">
            <summary>3要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``3(System.Tuple{``0,``1,``2})">
            <summary>3要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``3(System.Tuple{``0,``1,``2})">
            <summary>3要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``3(System.Tuple{``0,``1,``2})">
            <summary>3要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``4(System.Tuple{``0,``1,``2},``3)">
            <summary>3要素タプルに要素を追加し、4要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.AddFirst``4(System.Tuple{``1,``2,``3},``0)">
            <summary>3要素タプルに要素を追加し、4要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``3(System.Tuple{``0,``1,``2})">
            <summary>3要素タプルから末尾要素を削除し、2要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveFirst``3(System.Tuple{``0,``1,``2})">
            <summary>3要素タプルから末尾要素を削除し、2要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``4(System.Tuple{``0,``1,``2},System.Func{``0,``1,``2,``3})">
            <summary>3要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``4(System.Tuple{``0,``1,``2},System.Func{``0,``3})">
            <summary>3要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``4(System.Tuple{``0,``1,``2},System.Func{``1,``3})">
            <summary>3要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``4(System.Tuple{``0,``1,``2},System.Func{``2,``3})">
            <summary>3要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``4(``0,``1,``2,``3)">
            <summary>4要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``4(System.Tuple{``0,``1,``2,``3})">
            <summary>4要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``4(System.Tuple{``0,``1,``2,``3})">
            <summary>4要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``4(System.Tuple{``0,``1,``2,``3})">
            <summary>4要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``4(System.Tuple{``0,``1,``2,``3})">
            <summary>4要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``4(System.Tuple{``0,``1,``2,``3})">
            <summary>4要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``4(System.Tuple{``0,``1,``2,``3})">
            <summary>4要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``5(System.Tuple{``0,``1,``2,``3},``4)">
            <summary>4要素タプルに要素を追加し、5要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.AddFirst``5(System.Tuple{``1,``2,``3,``4},``0)">
            <summary>4要素タプルに要素を追加し、5要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``4(System.Tuple{``0,``1,``2,``3})">
            <summary>4要素タプルから末尾要素を削除し、3要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveFirst``4(System.Tuple{``0,``1,``2,``3})">
            <summary>4要素タプルから末尾要素を削除し、3要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``5(System.Tuple{``0,``1,``2,``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>4要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``5(System.Tuple{``0,``1,``2,``3},System.Func{``0,``4})">
            <summary>4要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``5(System.Tuple{``0,``1,``2,``3},System.Func{``1,``4})">
            <summary>4要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``5(System.Tuple{``0,``1,``2,``3},System.Func{``2,``4})">
            <summary>4要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``5(System.Tuple{``0,``1,``2,``3},System.Func{``3,``4})">
            <summary>4要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``5(``0,``1,``2,``3,``4)">
            <summary>5要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>5要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>5要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>5要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>5要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>5要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>5要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>5要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``6(System.Tuple{``0,``1,``2,``3,``4},``5)">
            <summary>5要素タプルに要素を追加し、6要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.AddFirst``6(System.Tuple{``1,``2,``3,``4,``5},``0)">
            <summary>5要素タプルに要素を追加し、6要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>5要素タプルから末尾要素を削除し、4要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveFirst``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>5要素タプルから末尾要素を削除し、4要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``6(System.Tuple{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>5要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``6(System.Tuple{``0,``1,``2,``3,``4},System.Func{``0,``5})">
            <summary>5要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``6(System.Tuple{``0,``1,``2,``3,``4},System.Func{``1,``5})">
            <summary>5要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``6(System.Tuple{``0,``1,``2,``3,``4},System.Func{``2,``5})">
            <summary>5要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``6(System.Tuple{``0,``1,``2,``3,``4},System.Func{``3,``5})">
            <summary>5要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``6(System.Tuple{``0,``1,``2,``3,``4},System.Func{``4,``5})">
            <summary>5要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``6(``0,``1,``2,``3,``4,``5)">
            <summary>6要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``7(System.Tuple{``0,``1,``2,``3,``4,``5},``6)">
            <summary>6要素タプルに要素を追加し、7要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.AddFirst``7(System.Tuple{``1,``2,``3,``4,``5,``6},``0)">
            <summary>6要素タプルに要素を追加し、7要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから末尾要素を削除し、5要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveFirst``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから末尾要素を削除し、5要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``7(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>6要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``7(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``0,``6})">
            <summary>6要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``7(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``1,``6})">
            <summary>6要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``7(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``2,``6})">
            <summary>6要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``7(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``3,``6})">
            <summary>6要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``7(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``4,``6})">
            <summary>6要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``7(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``5,``6})">
            <summary>6要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>7要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7)">
            <summary>7要素タプルに要素を追加し、8要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.AddFirst``8(System.Tuple{``1,``2,``3,``4,``5,``6,``7},``0)">
            <summary>7要素タプルに要素を追加し、8要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから末尾要素を削除し、6要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveFirst``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから末尾要素を削除し、6要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>7要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``7})">
            <summary>7要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``1,``7})">
            <summary>7要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``2,``7})">
            <summary>7要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``3,``7})">
            <summary>7要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``4,``7})">
            <summary>7要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``5,``7})">
            <summary>7要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``6,``7})">
            <summary>7要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>8要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._8``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから8番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8)">
            <summary>8要素タプルに要素を追加し、9要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.AddFirst``9(System.Tuple{``1,``2,``3,``4,``5,``6,``7,System.Tuple{``8}},``0)">
            <summary>8要素タプルに要素を追加し、9要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから末尾要素を削除し、7要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveFirst``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから末尾要素を削除し、7要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>8要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``0,``8})">
            <summary>8要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``1,``8})">
            <summary>8要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``2,``8})">
            <summary>8要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``3,``8})">
            <summary>8要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``4,``8})">
            <summary>8要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``5,``8})">
            <summary>8要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``6,``8})">
            <summary>8要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map8``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``7,``8})">
            <summary>8要素タプルの8番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``9(``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>9要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._8``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから8番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._9``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから9番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9)">
            <summary>9要素タプルに要素を追加し、10要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.AddFirst``10(System.Tuple{``1,``2,``3,``4,``5,``6,``7,System.Tuple{``8,``9}},``0)">
            <summary>9要素タプルに要素を追加し、10要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから末尾要素を削除し、8要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveFirst``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから末尾要素を削除し、8要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>9要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``0,``9})">
            <summary>9要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``1,``9})">
            <summary>9要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``2,``9})">
            <summary>9要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``3,``9})">
            <summary>9要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``4,``9})">
            <summary>9要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``5,``9})">
            <summary>9要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``6,``9})">
            <summary>9要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map8``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``7,``9})">
            <summary>9要素タプルの8番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map9``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``8,``9})">
            <summary>9要素タプルの9番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``10(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>10要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._8``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから8番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._9``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから9番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._10``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから10番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10)">
            <summary>10要素タプルに要素を追加し、11要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.AddFirst``11(System.Tuple{``1,``2,``3,``4,``5,``6,``7,System.Tuple{``8,``9,``10}},``0)">
            <summary>10要素タプルに要素を追加し、11要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから末尾要素を削除し、9要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveFirst``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから末尾要素を削除し、9要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>10要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``0,``10})">
            <summary>10要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``1,``10})">
            <summary>10要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``2,``10})">
            <summary>10要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``3,``10})">
            <summary>10要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``4,``10})">
            <summary>10要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``5,``10})">
            <summary>10要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``6,``10})">
            <summary>10要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map8``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``7,``10})">
            <summary>10要素タプルの8番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map9``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``8,``10})">
            <summary>10要素タプルの9番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map10``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``9,``10})">
            <summary>10要素タプルの10番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``11(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>11要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._8``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから8番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._9``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから9番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._10``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから10番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._11``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから11番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11)">
            <summary>11要素タプルに要素を追加し、12要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.AddFirst``12(System.Tuple{``1,``2,``3,``4,``5,``6,``7,System.Tuple{``8,``9,``10,``11}},``0)">
            <summary>11要素タプルに要素を追加し、12要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから末尾要素を削除し、10要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveFirst``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから末尾要素を削除し、10要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>11要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``0,``11})">
            <summary>11要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``1,``11})">
            <summary>11要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``2,``11})">
            <summary>11要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``3,``11})">
            <summary>11要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``4,``11})">
            <summary>11要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``5,``11})">
            <summary>11要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``6,``11})">
            <summary>11要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map8``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``7,``11})">
            <summary>11要素タプルの8番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map9``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``8,``11})">
            <summary>11要素タプルの9番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map10``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``9,``11})">
            <summary>11要素タプルの10番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map11``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``10,``11})">
            <summary>11要素タプルの11番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``12(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>12要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._8``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから8番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._9``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから9番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._10``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから10番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._11``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから11番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._12``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから12番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12)">
            <summary>12要素タプルに要素を追加し、13要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.AddFirst``13(System.Tuple{``1,``2,``3,``4,``5,``6,``7,System.Tuple{``8,``9,``10,``11,``12}},``0)">
            <summary>12要素タプルに要素を追加し、13要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから末尾要素を削除し、11要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveFirst``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから末尾要素を削除し、11要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>12要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``0,``12})">
            <summary>12要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``1,``12})">
            <summary>12要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``2,``12})">
            <summary>12要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``3,``12})">
            <summary>12要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``4,``12})">
            <summary>12要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``5,``12})">
            <summary>12要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``6,``12})">
            <summary>12要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map8``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``7,``12})">
            <summary>12要素タプルの8番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map9``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``8,``12})">
            <summary>12要素タプルの9番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map10``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``9,``12})">
            <summary>12要素タプルの10番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map11``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``10,``12})">
            <summary>12要素タプルの11番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map12``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``11,``12})">
            <summary>12要素タプルの12番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``13(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>13要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._8``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから8番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._9``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから9番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._10``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから10番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._11``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから11番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._12``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから12番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._13``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから13番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13)">
            <summary>13要素タプルに要素を追加し、14要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.AddFirst``14(System.Tuple{``1,``2,``3,``4,``5,``6,``7,System.Tuple{``8,``9,``10,``11,``12,``13}},``0)">
            <summary>13要素タプルに要素を追加し、14要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから末尾要素を削除し、12要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveFirst``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから末尾要素を削除し、12要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>13要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``0,``13})">
            <summary>13要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``1,``13})">
            <summary>13要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``2,``13})">
            <summary>13要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``3,``13})">
            <summary>13要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``4,``13})">
            <summary>13要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``5,``13})">
            <summary>13要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``6,``13})">
            <summary>13要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map8``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``7,``13})">
            <summary>13要素タプルの8番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map9``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``8,``13})">
            <summary>13要素タプルの9番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map10``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``9,``13})">
            <summary>13要素タプルの10番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map11``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``10,``13})">
            <summary>13要素タプルの11番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map12``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``11,``13})">
            <summary>13要素タプルの12番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map13``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``12,``13})">
            <summary>13要素タプルの13番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``14(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>14要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._8``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから8番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._9``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから9番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._10``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから10番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._11``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから11番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._12``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから12番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._13``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから13番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._14``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから14番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14)">
            <summary>14要素タプルに要素を追加し、15要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.AddFirst``15(System.Tuple{``1,``2,``3,``4,``5,``6,``7,System.Tuple{``8,``9,``10,``11,``12,``13,``14}},``0)">
            <summary>14要素タプルに要素を追加し、15要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから末尾要素を削除し、13要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveFirst``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから末尾要素を削除し、13要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>14要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``0,``14})">
            <summary>14要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``1,``14})">
            <summary>14要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``2,``14})">
            <summary>14要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``3,``14})">
            <summary>14要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``4,``14})">
            <summary>14要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``5,``14})">
            <summary>14要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``6,``14})">
            <summary>14要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map8``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``7,``14})">
            <summary>14要素タプルの8番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map9``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``8,``14})">
            <summary>14要素タプルの9番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map10``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``9,``14})">
            <summary>14要素タプルの10番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map11``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``10,``14})">
            <summary>14要素タプルの11番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map12``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``11,``14})">
            <summary>14要素タプルの12番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map13``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``12,``14})">
            <summary>14要素タプルの13番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map14``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``13,``14})">
            <summary>14要素タプルの14番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``15(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>15要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._8``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから8番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._9``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから9番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._10``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから10番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._11``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから11番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._12``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから12番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._13``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから13番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._14``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから14番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._15``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから15番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15)">
            <summary>15要素タプルに要素を追加し、16要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.AddFirst``16(System.Tuple{``1,``2,``3,``4,``5,``6,``7,System.Tuple{``8,``9,``10,``11,``12,``13,``14,System.Tuple{``15}}},``0)">
            <summary>15要素タプルに要素を追加し、16要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから末尾要素を削除し、14要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveFirst``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから末尾要素を削除し、14要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>15要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``0,``15})">
            <summary>15要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``1,``15})">
            <summary>15要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``2,``15})">
            <summary>15要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``3,``15})">
            <summary>15要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``4,``15})">
            <summary>15要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``5,``15})">
            <summary>15要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``6,``15})">
            <summary>15要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map8``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``7,``15})">
            <summary>15要素タプルの8番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map9``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``8,``15})">
            <summary>15要素タプルの9番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map10``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``9,``15})">
            <summary>15要素タプルの10番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map11``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``10,``15})">
            <summary>15要素タプルの11番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map12``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``11,``15})">
            <summary>15要素タプルの12番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map13``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``12,``15})">
            <summary>15要素タプルの13番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map14``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``13,``15})">
            <summary>15要素タプルの14番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map15``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``14,``15})">
            <summary>15要素タプルの15番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``16(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>16要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._8``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから8番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._9``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから9番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._10``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから10番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._11``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから11番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._12``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから12番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._13``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから13番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._14``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから14番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._15``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから15番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._16``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから16番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから末尾要素を削除し、15要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveFirst``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから末尾要素を削除し、15要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>16要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``0,``16})">
            <summary>16要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``1,``16})">
            <summary>16要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``2,``16})">
            <summary>16要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``3,``16})">
            <summary>16要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``4,``16})">
            <summary>16要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``5,``16})">
            <summary>16要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``6,``16})">
            <summary>16要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map8``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``7,``16})">
            <summary>16要素タプルの8番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map9``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``8,``16})">
            <summary>16要素タプルの9番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map10``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``9,``16})">
            <summary>16要素タプルの10番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map11``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``10,``16})">
            <summary>16要素タプルの11番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map12``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``11,``16})">
            <summary>16要素タプルの12番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map13``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``12,``16})">
            <summary>16要素タプルの13番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map14``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``13,``16})">
            <summary>16要素タプルの14番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map15``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``14,``16})">
            <summary>16要素タプルの15番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map16``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``15,``16})">
            <summary>16要素タプルの16番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.TupleModule.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="T:LangExt.Unsafe.EnumerableUnsafe">
            <summary>
            IEnumerable[T]に対する(例外を投げうる)関数を提供します。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.EnumerableUnsafe.Get``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            IEnumerableの指定番目の要素を取得します。
            標準クエリ演算子のElementAtに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.EnumerableUnsafe.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.EnumerableUnsafe.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="T:LangExt.Unsafe.OptionUnsafe">
            <summary>
            Optionに対する(例外を投げうる)関数を提供します。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.OptionUnsafe.GetValue``1(LangExt.Option{``0})">
            <summary>
            保持している値を強制的に取得します。
            このメソッドはNoneの場合に意味のない値(default(T))を返すため、危険です。
            そのため、このメソッドは基本的には使用せず、
            MatchメソッドやGetOrメソッドを使用するようにしてください。
            </summary>
            <returns>内部で保持している値</returns>
        </member>
        <member name="M:LangExt.Unsafe.OptionUnsafe.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.OptionUnsafe.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="T:LangExt.Unsafe.ResultUnsafe">
            <summary>
            Resultに対する(例外を投げうる)関数を提供します。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.ResultUnsafe.GetSuccessValue``2(LangExt.Result{``0,``1})">
            <summary>
            保持している成功の値を強制的に取得します。
            このメソッドはFailureの場合に意味のない値(default(TFailure))を返すため、危険です。
            そのため、このメソッドは基本的には使用せず、MatchメソッドやGetOrメソッドを使用するようにしてください。
            </summary>
            <returns>内部で保持している成功の値</returns>
        </member>
        <member name="M:LangExt.Unsafe.ResultUnsafe.GetFailureValue``2(LangExt.Result{``0,``1})">
            <summary>
            保持している失敗の値を強制的に取得します。
            このメソッドはSuccessの場合に意味のない値(default(TSuccess))を返すため、危険です。
            そのため、このメソッドは基本的には使用せず、MatchメソッドやGetFailureOrメソッドを使用するようにしてください。
            </summary>
            <returns>内部で保持している失敗の値</returns>
        </member>
        <member name="M:LangExt.Unsafe.ResultUnsafe.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.ResultUnsafe.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="T:LangExt.Unsafe.SeqUnsafe">
            <summary>
            シーケンスに対する(例外を投げうる)関数を提供します。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Get``1(LangExt.ISeq{``0},System.Int32)">
            <summary>
            シーケンスの指定番目の要素を取得します。
            標準クエリ演算子のElementAtに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Max``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスの最大値を求めます。
            標準クエリ演算子のMaxに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MaxWith``1(LangExt.ISeq{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            任意の型のシーケンスの最大値を求めます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MaxBy``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            任意の型のシーケンスの最大値を求めます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Min``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスの最小値を求めます。
            標準クエリ演算子のMinに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MinWith``1(LangExt.ISeq{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            任意の型のシーケンスの最小値を求めます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MinBy``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            任意の型のシーケンスの最小値を求めます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Reduce``1(LangExt.ISeq{``0},System.Func{``0,``0,``0})">
            <summary>
            シーケンスを先頭から畳み込みます。
            標準クエリ演算子のAggregateに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.ReduceBack``1(LangExt.ISeq{``0},System.Func{``0,``0,``0})">
            <summary>
            シーケンスを末尾から畳み込みます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Find``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            シーケンスから、predを満たす最初の要素を探索します。
            標準クエリ演算子のFirstに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Pick``2(LangExt.ISeq{``0},System.Func{``0,LangExt.Option{``1}})">
            <summary>
            シーケンスから、fがSomeを返す最初の要素を探索し、Someの中身を返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Equals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.ReferenceEquals(System.Object,System.Object)">
            <summary>
            使用しません。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MaxBy``3(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,``2})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MinBy``3(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,``2})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Reduce``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,``0,``1,System.Tuple{``0,``1}})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すReduceです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.ReduceBack``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,``0,``1,System.Tuple{``0,``1}})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すReduceBackです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Find``2(LangExt.ISeq{System.Tuple{``0,``1}},System.Func{``0,``1,System.Boolean})">
            <summary>
            2要素タプルのシーケンスの各要素を展開して関数に渡すFindです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MaxBy``4(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``3})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MinBy``4(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``3})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Reduce``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``0,``1,``2,System.Tuple{``0,``1,``2}})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すReduceです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.ReduceBack``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,``0,``1,``2,System.Tuple{``0,``1,``2}})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すReduceBackです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Find``3(LangExt.ISeq{System.Tuple{``0,``1,``2}},System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            3要素タプルのシーケンスの各要素を展開して関数に渡すFindです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MaxBy``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MinBy``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Reduce``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``0,``1,``2,``3,System.Tuple{``0,``1,``2,``3}})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すReduceです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.ReduceBack``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``0,``1,``2,``3,System.Tuple{``0,``1,``2,``3}})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すReduceBackです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Find``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            4要素タプルのシーケンスの各要素を展開して関数に渡すFindです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MaxBy``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MinBy``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Reduce``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``0,``1,``2,``3,``4,System.Tuple{``0,``1,``2,``3,``4}})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すReduceです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.ReduceBack``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``0,``1,``2,``3,``4,System.Tuple{``0,``1,``2,``3,``4}})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すReduceBackです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Find``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            5要素タプルのシーケンスの各要素を展開して関数に渡すFindです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MaxBy``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MinBy``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Reduce``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``0,``1,``2,``3,``4,``5,System.Tuple{``0,``1,``2,``3,``4,``5}})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すReduceです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.ReduceBack``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``0,``1,``2,``3,``4,``5,System.Tuple{``0,``1,``2,``3,``4,``5}})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すReduceBackです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Find``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            6要素タプルのシーケンスの各要素を展開して関数に渡すFindです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MaxBy``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MinBy``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Reduce``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``0,``1,``2,``3,``4,``5,``6,System.Tuple{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すReduceです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.ReduceBack``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``0,``1,``2,``3,``4,``5,``6,System.Tuple{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すReduceBackです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Find``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            7要素タプルのシーケンスの各要素を展開して関数に渡すFindです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MaxBy``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MinBy``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Reduce``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``0,``1,``2,``3,``4,``5,``6,``7,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すReduceです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.ReduceBack``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``0,``1,``2,``3,``4,``5,``6,``7,System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すReduceBackです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Find``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            8要素タプルのシーケンスの各要素を展開して関数に渡すFindです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MaxBy``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MinBy``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Find``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Boolean})">
            <summary>
            9要素タプルのシーケンスの各要素を展開して関数に渡すFindです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MaxBy``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MinBy``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Find``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Boolean})">
            <summary>
            10要素タプルのシーケンスの各要素を展開して関数に渡すFindです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MaxBy``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MinBy``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Find``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Boolean})">
            <summary>
            11要素タプルのシーケンスの各要素を展開して関数に渡すFindです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MaxBy``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MinBy``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Find``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Boolean})">
            <summary>
            12要素タプルのシーケンスの各要素を展開して関数に渡すFindです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MaxBy``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MinBy``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Find``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Boolean})">
            <summary>
            13要素タプルのシーケンスの各要素を展開して関数に渡すFindです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MaxBy``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MinBy``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Find``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Boolean})">
            <summary>
            14要素タプルのシーケンスの各要素を展開して関数に渡すFindです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MaxBy``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MinBy``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Find``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Boolean})">
            <summary>
            15要素タプルのシーケンスの各要素を展開して関数に渡すFindです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MaxBy``17(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すMaxByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.MinBy``17(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すMinByです。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.SeqUnsafe.Find``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Boolean})">
            <summary>
            16要素タプルのシーケンスの各要素を展開して関数に渡すFindです。
            </summary>
        </member>
    </members>
</doc>
